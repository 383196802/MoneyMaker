[{"courseID":"UTSG-CSC104H","code":"CSC104H","name":"Computational Thinking","description":"Humans have solved problems for millennia on computing devices by representing data as diverse numbers, text, images, sound and genomes, and then transforming the data.  A gentle introduction to designing programs (recipes) for systematically solving problems that crop up in diverse domains such as science, literature, and graphics.  Social and intellectual issues raised by computing.  Algorithms, hardware, software, operating systems, the limits of computation.\r\nNote: you may not take this course concurrently with any Computer Science course, but you may take CSC108H1/CSC148H1 after CSC104H1.","campus":"UTSG"},{"courseID":"UTSG-CSC104H","code":"CSC104H","name":"Computational Thinking","description":"Humans have solved problems for millennia on computing devices by representing data as diverse numbers, text, images, sound and genomes, and then transforming the data. A gentle introduction to designing programs (recipes) for systematically solving problems that crop up in diverse domains such as science, literature, and graphics. Social and intellectual issues raised by computing. Algorithms, hardware, software, operating systems, the limits of computation. Note: you may not take this course concurrently with any Computer Science course, but you may take CSC108H1/CSC148H1 after CSC104H1.","campus":"UTSG"},{"courseID":"UTSG-CSC104H","code":"CSC104H","name":"Computational Thinking","description":"Humans have solved problems for millennia on computing devices by representing data as diverse numbers, text, images, sound and genomes, and then transforming the data. A gentle introduction to designing programs (recipes) for systematically solving problems that crop up in diverse domains such as science, literature, and graphics. Social and intellectual issues raised by computing. Algorithms, hardware, software, operating systems, the limits of computation. Note: you may not take this course concurrently with any Computer Science course, but you may take CSC108H1/CSC148H1 after CSC104H1.","campus":"UTSG"},{"courseID":"UTSG-CSC104H","code":"CSC104H","name":"Computational Thinking","description":"Humans have solved problems for millennia on computing devices by representing data as diverse numbers, text, images, sound and genomes, and then transforming the data.  A gentle introduction to designing programs (recipes) for systematically solving problems that crop up in diverse domains such as science, literature, and graphics.  Social and intellectual issues raised by computing.  Algorithms, hardware, software, operating systems, the limits of computation.\r\nNote: you may not take this course concurrently with any Computer Science course, but you may take CSC108H1/CSC148H1 after CSC104H1.","campus":"UTSG"},{"courseID":"UTSG-CSC104H","code":"CSC104H","name":"Computational Thinking","description":"Humans have solved problems for millennia on computing devices by representing data as diverse numbers, text, images, sound and genomes, and then transforming the data. A gentle introduction to designing programs (recipes) for systematically solving problems that crop up in diverse domains such as science, literature, and graphics. Social and intellectual issues raised by computing. Algorithms, hardware, software, operating systems, the limits of computation. Note: you may not take this course concurrently with any Computer Science course, but you may take CSC108H1/CSC148H1 after CSC104H1.","campus":"UTSG"},{"courseID":"UTSG-CSC104H","code":"CSC104H","name":"Computational Thinking","description":"Humans have solved problems for millennia on computing devices by representing data as diverse numbers, text, images, sound and genomes, and then transforming the data. A gentle introduction to designing programs (recipes) for systematically solving problems that crop up in diverse domains such as science, literature, and graphics. Social and intellectual issues raised by computing. Algorithms, hardware, software, operating systems, the limits of computation. Note: you may not take this course concurrently with any Computer Science course, but you may take CSC108H1/CSC148H1 after CSC104H1.","campus":"UTSG"},{"courseID":"UTSG-CSC108H","code":"CSC108H","name":"Introduction to Computer Programming","description":"Programming in a language such as Python. Elementary data types, lists, maps.  Program structure: control flow, functions, classes, objects, methods. Algorithms and problem solving. Searching, sorting, and complexity. Unit testing. No prior programming experience required.NOTE: You may not take this course concurrently with CSC120H1/CSC148H1, but you may take CSC148H1 after CSC108H1.","campus":"UTSG"},{"courseID":"UTSG-CSC108H","code":"CSC108H","name":"Introduction to Computer Programming","description":"Programming in a language such as Python. Elementary data types, lists, maps. Program structure: control flow, functions, classes, objects, methods. Algorithms and problem solving. Searching, sorting, and complexity. Unit testing. No prior programming experience required.NOTE: You may not take this course concurrently with CSC120H1/CSC148H1, but you may take CSC148H1 after CSC108H1.","campus":"UTSG"},{"courseID":"UTSG-CSC108H","code":"CSC108H","name":"Introduction to Computer Programming","description":"Programming in a language such as Python. Elementary data types, lists, maps. Program structure: control flow, functions, classes, objects, methods. Algorithms and problem solving. Searching, sorting, and complexity. Unit testing. No prior programming experience required.NOTE: You may not take this course concurrently with CSC120H1/CSC148H1, but you may take CSC148H1 after CSC108H1.","campus":"UTSG"},{"courseID":"UTSG-CSC108H","code":"CSC108H","name":"Introduction to Computer Programming","description":"Programming in a language such as Python. Elementary data types, lists, maps.  Program structure: control flow, functions, classes, objects, methods. Algorithms and problem solving. Searching, sorting, and complexity. Unit testing. No prior programming experience required.NOTE: You may not take this course concurrently with CSC120H1/CSC148H1, but you may take CSC148H1 after CSC108H1.","campus":"UTSG"},{"courseID":"UTSG-CSC108H","code":"CSC108H","name":"Introduction to Computer Programming","description":"Programming in a language such as Python. Elementary data types, lists, maps. Program structure: control flow, functions, classes, objects, methods. Algorithms and problem solving. Searching, sorting, and complexity. Unit testing. No prior programming experience required.NOTE: You may not take this course concurrently with CSC120H1/CSC148H1, but you may take CSC148H1 after CSC108H1.","campus":"UTSG"},{"courseID":"UTSG-CSC108H","code":"CSC108H","name":"Introduction to Computer Programming","description":"Programming in a language such as Python. Elementary data types, lists, maps. Program structure: control flow, functions, classes, objects, methods. Algorithms and problem solving. Searching, sorting, and complexity. Unit testing. No prior programming experience required.NOTE: You may not take this course concurrently with CSC120H1/CSC148H1, but you may take CSC148H1 after CSC108H1.","campus":"UTSG"},{"courseID":"UTSG-CSC108H","code":"CSC108H","name":"Introduction to Computer Programming","description":"Programming in a language such as Python. Elementary data types, lists, maps. Program structure: control flow, functions, classes, objects, methods. Algorithms and problem solving. Searching, sorting, and complexity. Unit testing. No prior programming experience required.NOTE: You may not take this course concurrently with CSC120H1/CSC148H1, but you may take CSC148H1 after CSC108H1.","campus":"UTSG"},{"courseID":"UTSG-CSC108H","code":"CSC108H","name":"Introduction to Computer Programming","description":"Programming in a language such as Python. Elementary data types, lists, maps. Program structure: control flow, functions, classes, objects, methods. Algorithms and problem solving. Searching, sorting, and complexity. Unit testing. No prior programming experience required.NOTE: You may not take this course concurrently with CSC120H1/CSC148H1, but you may take CSC148H1 after CSC108H1.","campus":"UTSG"},{"courseID":"UTM-CSC108H","code":"CSC108H","name":"Introduction to Computer Programming","description":"Structure of computers; the computing environment. Programming in a language such as Python. Program structure: elementary data types, statements, control flow, functions, classes, objects, methods, fields. List: searching, sorting and complexity. [36L, 24P]","campus":"UTM"},{"courseID":"UTM-CSC108H","code":"CSC108H","name":"Introduction to Computer Programming","description":"Structure of computers; the computing environment. Programming in a language such as Python. Program structure: elementary data types, statements, control flow, functions, classes, objects, methods, fields. List: searching, sorting and complexity. [36L, 24P]","campus":"UTM"},{"courseID":"UTM-CSC108H","code":"CSC108H","name":"Introduction to Computer Programming","description":"Structure of computers; the computing environment. Programming in a language such as Python. Program structure: elementary data types, statements, control flow, functions, classes, objects, methods, fields. List: searching, sorting and complexity. [36L, 24P]","campus":"UTM"},{"courseID":"UTM-CSC108H","code":"CSC108H","name":"Introduction to Computer Programming","description":"Structure of computers; the computing environment. Programming in a language such as Python. Program structure: elementary data types, statements, control flow, functions, classes, objects, methods, fields. List: searching, sorting and complexity. [36L, 24P]","campus":"UTM"},{"courseID":"UTM-CSC108H","code":"CSC108H","name":"Introduction to Computer Programming","description":"Structure of computers; the computing environment. Programming in a language such as Python. Program structure: elementary data types, statements, control flow, functions, classes, objects, methods, fields. List: searching, sorting and complexity. [36L, 24P]","campus":"UTM"},{"courseID":"UTM-CSC108H","code":"CSC108H","name":"Introduction to Computer Programming","description":"Structure of computers; the computing environment. Programming in a language such as Python. Program structure: elementary data types, statements, control flow, functions, classes, objects, methods, fields. List: searching, sorting and complexity. [36L, 24P]","campus":"UTM"},{"courseID":"UTM-CSC108H","code":"CSC108H","name":"Introduction to Computer Programming","description":"Structure of computers; the computing environment. Programming in a language such as Python. Program structure: elementary data types, statements, control flow, functions, classes, objects, methods, fields. List: searching, sorting and complexity. [36L, 24P]","campus":"UTM"},{"courseID":"UTSG-CSC120H","code":"CSC120H","name":"Computer Science for the Sciences","description":"An introduction to computer science for students in other sciences, with an emphasis on gaining practical skills. Introduction to programming with examples and exercises appropriate to the sciences; web programming; software tools.  Topics from: database design, considerations in numerical calculation, using UNIX/LINUX systems. At the end of this course you will be able to develop computer tools for scientific applications, such as the structuring and analysis of experimental data. With some additional preparation, you will also be ready to go on to CSC148H1.  Practical (P) sections consist of supervised work in the computer laboratory. No programming experience is necessary.","campus":"UTSG"},{"courseID":"UTSG-CSC120H","code":"CSC120H","name":"Computer Science for the Sciences","description":"An introduction to computer science for students in other sciences, with an emphasis on gaining practical skills. Introduction to programming with examples and exercises appropriate to the sciences; web programming; software tools. Topics from: database design, considerations in numerical calculation, using UNIX/LINUX systems. At the end of this course you will be able to develop computer tools for scientific applications, such as the structuring and analysis of experimental data. With some additional preparation, you will also be ready to go on to CSC148H1. Practical (P) sections consist of supervised work in the computer laboratory. No programming experience is necessary.","campus":"UTSG"},{"courseID":"UTSG-CSC120H","code":"CSC120H","name":"Computer Science for the Sciences","description":"An introduction to computer science for students in other sciences, with an emphasis on gaining practical skills. Introduction to programming with examples and exercises appropriate to the sciences; web programming; software tools. Topics from: database design, considerations in numerical calculation, using UNIX/LINUX systems. At the end of this course you will be able to develop computer tools for scientific applications, such as the structuring and analysis of experimental data. With some additional preparation, you will also be ready to go on to CSC148H1. Practical (P) sections consist of supervised work in the computer laboratory. No programming experience is necessary.","campus":"UTSG"},{"courseID":"UTSG-CSC121H","code":"CSC121H","name":"Computer Science for Statistics","description":"An introduction to computer science for students planning to use computers for statistical analysis and research. Using a statistical programming environment, fundamental programming concepts, and computational topics relevant to statistics, such as issues with numerical calculation, random number generation, and management of data. Practicals consist of supervised work in the computer laboratory to reinforce concepts and develop programming skills. No previous programming experience is necessary. Please consult with the CS Undergraduate office if you intend to continue on to CSC148H1.","campus":"UTSG"},{"courseID":"UTSG-CSC121H","code":"CSC121H","name":"Computer Science for Statistics","description":"An introduction to computer science for students planning to use computers for statistical analysis and research. Using a statistical programming environment, fundamental programming concepts, and computational topics relevant to statistics, such as issues with numerical calculation, random number generation, and management of data. Practicals consist of supervised work in the computer laboratory to reinforce concepts and develop programming skills. No previous programming experience is necessary. Please consult with the CS Undergraduate office if you intend to continue on to CSC148H1.","campus":"UTSG"},{"courseID":"UTSG-CSC148H","code":"CSC148H","name":"Introduction to Computer Science","description":"Abstract data types and data structures for implementing them. Linked data structures. Encapsulation and information-hiding. Object-oriented programming. Specifications. Analyzing the efficiency of programs. Recursion. This course assumes programming experience as provided by CSC108H1. Students who already have this background may consult the Computer Science Undergraduate Office for advice about skipping CSC108H1. Practical (P) sections consist of supervised work in the computing laboratory. These sections are offered when facilities are available, and attendance is required. NOTE: Students may go to their college to drop down from CSC148H1 to CSC108H1. See above for the drop down deadline.","campus":"UTSG"},{"courseID":"UTSG-CSC148H","code":"CSC148H","name":"Introduction to Computer Science","description":"Abstract data types and data structures for implementing them. Linked data structures. Encapsulation and information-hiding. Object-oriented programming. Specifications. Analyzing the efficiency of programs. Recursion. This course assumes programming experience as provided by CSC108H1. Students who already have this background may consult the Computer Science Undergraduate Office for advice about skipping CSC108H1. Practical (P) sections consist of supervised work in the computing laboratory. These sections are offered when facilities are available, and attendance is required. NOTE: Students may go to their college to drop down from CSC148H1 to CSC108H1. See above for the drop down deadline.","campus":"UTSG"},{"courseID":"UTSG-CSC148H","code":"CSC148H","name":"Introduction to Computer Science","description":"Abstract data types and data structures for implementing them. Linked data structures. Encapsulation and information-hiding. Object-oriented programming. Specifications. Analyzing the efficiency of programs. Recursion. This course assumes programming experience as provided by CSC108H1. Students who already have this background may consult the Computer Science Undergraduate Office for advice about skipping CSC108H1. Practical (P) sections consist of supervised work in the computing laboratory. These sections are offered when facilities are available, and attendance is required. NOTE: Students may go to their college to drop down from CSC148H1 to CSC108H1. See above for the drop down deadline.","campus":"UTSG"},{"courseID":"UTSG-CSC148H","code":"CSC148H","name":"Introduction to Computer Science","description":"Abstract data types and data structures for implementing them. Linked data structures. Encapsulation and information-hiding. Object-oriented programming. Specifications. Analyzing the efficiency of programs. Recursion. This course assumes programming experience as provided by CSC108H1. Students who already have this background may consult the Computer Science Undergraduate Office for advice about skipping CSC108H1. Practical (P) sections consist of supervised work in the computing laboratory. These sections are offered when facilities are available, and attendance is required. NOTE: Students may go to their college to drop down from CSC148H1 to CSC108H1. See above for the drop down deadline.","campus":"UTSG"},{"courseID":"UTSG-CSC148H","code":"CSC148H","name":"Introduction to Computer Science","description":"Abstract data types and data structures for implementing them. Linked data structures. Encapsulation and information-hiding. Object-oriented programming. Specifications. Analyzing the efficiency of programs. Recursion. This course assumes programming experience as provided by CSC108H1. Students who already have this background may consult the Computer Science Undergraduate Office for advice about skipping CSC108H1. Practical (P) sections consist of supervised work in the computing laboratory. These sections are offered when facilities are available, and attendance is required. NOTE: Students may go to their college to drop down from CSC148H1 to CSC108H1. See above for the drop down deadline.","campus":"UTSG"},{"courseID":"UTSG-CSC148H","code":"CSC148H","name":"Introduction to Computer Science","description":"Abstract data types and data structures for implementing them. Linked data structures. Encapsulation and information-hiding. Object-oriented programming. Specifications. Analyzing the efficiency of programs. Recursion. This course assumes programming experience as provided by CSC108H1. Students who already have this background may consult the Computer Science Undergraduate Office for advice about skipping CSC108H1. Practical (P) sections consist of supervised work in the computing laboratory. These sections are offered when facilities are available, and attendance is required. NOTE: Students may go to their college to drop down from CSC148H1 to CSC108H1. See above for the drop down deadline.","campus":"UTSG"},{"courseID":"UTSG-CSC148H","code":"CSC148H","name":"Introduction to Computer Science","description":"Abstract data types and data structures for implementing them. Linked data structures. Encapsulation and information-hiding. Object-oriented programming. Specifications. Analyzing the efficiency of programs. Recursion. This course assumes programming experience as provided by CSC108H1. Students who already have this background may consult the Computer Science Undergraduate Office for advice about skipping CSC108H1. Practical (P) sections consist of supervised work in the computing laboratory. These sections are offered when facilities are available, and attendance is required. NOTE: Students may go to their college to drop down from CSC148H1 to CSC108H1. See above for the drop down deadline.","campus":"UTSG"},{"courseID":"UTSG-CSC148H","code":"CSC148H","name":"Introduction to Computer Science","description":"Abstract data types and data structures for implementing them. Linked data structures. Encapsulation and information-hiding. Object-oriented programming. Specifications. Analyzing the efficiency of programs. Recursion. This course assumes programming experience as provided by CSC108H1. Students who already have this background may consult the Computer Science Undergraduate Office for advice about skipping CSC108H1. Practical (P) sections consist of supervised work in the computing laboratory. These sections are offered when facilities are available, and attendance is required. NOTE: Students may go to their college to drop down from CSC148H1 to CSC108H1. See above for the drop down deadline.","campus":"UTSG"},{"courseID":"UTM-CSC148H","code":"CSC148H","name":"Introduction to Computer Science","description":"Abstract data types and data structures for implementing them. Linked data structures. Encapsulation and information-hiding. Object-oriented programming. Specifications. Analyzing the efficiency of programs. Recursion. This course assumes programming experience in a language such as Python, C++, or Java, as provided by CSC108H5. Students who already have this background may consult the Computer Science faculty advisor for advice about skipping CSC108H5. [36L, 24P] You may not take this course after completing three or more CSC courses at the 200 level or higher.","campus":"UTM"},{"courseID":"UTM-CSC148H","code":"CSC148H","name":"Introduction to Computer Science","description":"Abstract data types and data structures for implementing them. Linked data structures. Encapsulation and information-hiding. Object-oriented programming. Specifications. Analyzing the efficiency of programs. Recursion. This course assumes programming experience in a language such as Python, C++, or Java, as provided by CSC108H5. Students who already have this background may consult the Computer Science faculty advisor for advice about skipping CSC108H5. [36L, 24P] You may not take this course after completing three or more CSC courses at the 200 level or higher.","campus":"UTM"},{"courseID":"UTM-CSC148H","code":"CSC148H","name":"Introduction to Computer Science","description":"Abstract data types and data structures for implementing them. Linked data structures. Encapsulation and information-hiding. Object-oriented programming. Specifications. Analyzing the efficiency of programs. Recursion. This course assumes programming experience in a language such as Python, C++, or Java, as provided by CSC108H5. Students who already have this background may consult the Computer Science faculty advisor for advice about skipping CSC108H5. [36L, 24P] You may not take this course after completing three or more CSC courses at the 200 level or higher.","campus":"UTM"},{"courseID":"UTM-CSC148H","code":"CSC148H","name":"Introduction to Computer Science","description":"Abstract data types and data structures for implementing them. Linked data structures. Encapsulation and information-hiding. Object-oriented programming. Specifications. Analyzing the efficiency of programs. Recursion. This course assumes programming experience in a language such as Python, C++, or Java, as provided by CSC108H5. Students who already have this background may consult the Computer Science faculty advisor for advice about skipping CSC108H5. [36L, 24P] You may not take this course after completing three or more CSC courses at the 200 level or higher.","campus":"UTM"},{"courseID":"UTM-CSC148H","code":"CSC148H","name":"Introduction to Computer Science","description":"Abstract data types and data structures for implementing them. Linked data structures. Encapsulation and information-hiding. Object-oriented programming. Specifications. Analyzing the efficiency of programs. Recursion. This course assumes programming experience in a language such as Python, C++, or Java, as provided by CSC108H5. Students who already have this background may consult the Computer Science faculty advisor for advice about skipping CSC108H5. [36L, 24P] You may not take this course after completing three or more CSC courses at the 200 level or higher.","campus":"UTM"},{"courseID":"UTSG-CSC165H","code":"CSC165H","name":"Mathematical Expression and Reasoning for Computer Science","description":"Introduction to abstraction and rigour. Informal introduction to logical notation and reasoning. Understanding, using and developing precise expressions of mathematical ideas, including definitions and theorems. Structuring proofs to improve presentation and comprehension. General problem-solving techniques. Running time analysis of iterative programs.  Formal definition of Big-Oh.  Diagonalization, the Halting Problem, and some reductions. Unified approaches to programming and theoretical problems.","campus":"UTSG"},{"courseID":"UTSG-CSC165H","code":"CSC165H","name":"Mathematical Expression and Reasoning for Computer Science","description":"Introduction to abstraction and rigour. Informal introduction to logical notation and reasoning. Understanding, using and developing precise expressions of mathematical ideas, including definitions and theorems. Structuring proofs to improve presentation and comprehension. General problem-solving techniques. Running time analysis of iterative programs. Formal definition of Big-Oh. Diagonalization, the Halting Problem, and some reductions. Unified approaches to programming and theoretical problems.","campus":"UTSG"},{"courseID":"UTSG-CSC165H","code":"CSC165H","name":"Mathematical Expression and Reasoning for Computer Science","description":"Introduction to abstraction and rigour. Informal introduction to logical notation and reasoning. Understanding, using and developing precise expressions of mathematical ideas, including definitions and theorems. Structuring proofs to improve presentation and comprehension. General problem-solving techniques. Running time analysis of iterative programs. Formal definition of Big-Oh. Diagonalization, the Halting Problem, and some reductions. Unified approaches to programming and theoretical problems.","campus":"UTSG"},{"courseID":"UTSG-CSC165H","code":"CSC165H","name":"Mathematical Expression and Reasoning for Computer Science","description":"Introduction to abstraction and rigour. Informal introduction to logical notation and reasoning. Understanding, using and developing precise expressions of mathematical ideas, including definitions and theorems. Structuring proofs to improve presentation and comprehension. General problem-solving techniques. Running time analysis of iterative programs.  Formal definition of Big-Oh.  Diagonalization, the Halting Problem, and some reductions. Unified approaches to programming and theoretical problems.","campus":"UTSG"},{"courseID":"UTSG-CSC165H","code":"CSC165H","name":"Mathematical Expression and Reasoning for Computer Science","description":"Introduction to abstraction and rigour. Informal introduction to logical notation and reasoning. Understanding, using and developing precise expressions of mathematical ideas, including definitions and theorems. Structuring proofs to improve presentation and comprehension. General problem-solving techniques. Running time analysis of iterative programs. Formal definition of Big-Oh. Diagonalization, the Halting Problem, and some reductions. Unified approaches to programming and theoretical problems.","campus":"UTSG"},{"courseID":"UTSG-CSC165H","code":"CSC165H","name":"Mathematical Expression and Reasoning for Computer Science","description":"Introduction to abstraction and rigour. Informal introduction to logical notation and reasoning. Understanding, using and developing precise expressions of mathematical ideas, including definitions and theorems. Structuring proofs to improve presentation and comprehension. General problem-solving techniques. Running time analysis of iterative programs. Formal definition of Big-Oh. Diagonalization, the Halting Problem, and some reductions. Unified approaches to programming and theoretical problems.","campus":"UTSG"},{"courseID":"UTSG-CSC165H","code":"CSC165H","name":"Mathematical Expression and Reasoning for Computer Science","description":"Introduction to abstraction and rigour. Informal introduction to logical notation and reasoning. Understanding, using and developing precise expressions of mathematical ideas, including definitions and theorems. Structuring proofs to improve presentation and comprehension. General problem-solving techniques. Running time analysis of iterative programs. Formal definition of Big-Oh. Diagonalization, the Halting Problem, and some reductions. Unified approaches to programming and theoretical problems.","campus":"UTSG"},{"courseID":"UTSG-CSC165H","code":"CSC165H","name":"Mathematical Expression and Reasoning for Computer Science","description":"Introduction to abstraction and rigour. Informal introduction to logical notation and reasoning. Understanding, using and developing precise expressions of mathematical ideas, including definitions and theorems. Structuring proofs to improve presentation and comprehension. General problem-solving techniques. Running time analysis of iterative programs. Formal definition of Big-Oh. Diagonalization, the Halting Problem, and some reductions. Unified approaches to programming and theoretical problems.","campus":"UTSG"},{"courseID":"UTSG-CSC180H","code":"CSC180H","name":"Introduction to Computer Programming","description":"The first of two courses that introduces students to programming and computational thinking, and prepares them for additional study across a breadth of programming fields. Students will learn to use the Python programming language to design and implement computational solutions to problems drawn from their 1F courses, with specific focus on algorithms, data structures, problem decomposition, and the use of programming paradigms appropriate to the problems being solved. Specifically, this course aims to have students work with and understand profiling and runtime analysis, searching and sorting algorithms, and the use of recursion.","campus":"UTSG"},{"courseID":"UTSG-CSC180H","code":"CSC180H","name":"Introduction to Computer Programming","description":"The first of two courses that introduces students to programming and computational thinking, and prepares them for additional study across a breadth of programming fields. Students will learn to use the Python programming language to design and implement computational solutions to problems drawn from their 1F courses, with specific focus on algorithms, data structures, problem decomposition, and the use of programming paradigms appropriate to the problems being solved. Specifically, this course aims to have students work with and understand profiling and runtime analysis, searching and sorting algorithms, and the use of recursion.","campus":"UTSG"},{"courseID":"UTSG-CSC180H","code":"CSC180H","name":"Introduction to Computer Programming","description":"The first of two courses that introduces students to programming and computational thinking, and prepares them for additional study across a breadth of programming fields. Students will learn to use the Python programming language to design and implement computational solutions to problems drawn from their 1F courses, with specific focus on algorithms, data structures, problem decomposition, and the use of programming paradigms appropriate to the problems being solved. Specifically, this course aims to have students work with and understand profiling and runtime analysis, searching and sorting algorithms, and the use of recursion.","campus":"UTSG"},{"courseID":"UTSG-CSC190H","code":"CSC190H","name":"Computer Algorithms and Data Structures ","description":"The second of two courses that introduces students to programming and computational thinking, and prepares them for additional study across a breadth of programming fields. Students will learn to use the C programming language to design and implement computational solutions to problems drawn from their 1S courses, and will explore new programming paradigms, algorithm design techniques, and data structures appropriate to these challenges. Specifically, this course aims to have students work with and understand linked lists, stacks, queues, trees, heaps, hashing, pointers (including function pointers) and arrays, data types and bit operations, and dynamic memory management.","campus":"UTSG"},{"courseID":"UTSG-CSC190H","code":"CSC190H","name":"Computer Algorithms and Data Structures ","description":"The second of two courses that introduces students to programming and computational thinking, and prepares them for additional study across a breadth of programming fields. Students will learn to use the C programming language to design and implement computational solutions to problems drawn from their 1S courses, and will explore new programming paradigms, algorithm design techniques, and data structures appropriate to these challenges. Specifically, this course aims to have students work with and understand linked lists, stacks, queues, trees, heaps, hashing, pointers (including function pointers) and arrays, data types and bit operations, and dynamic memory management.","campus":"UTSG"},{"courseID":"UTSG-CSC190H","code":"CSC190H","name":"Computer Algorithms and Data Structures ","description":"The second of two courses that introduces students to programming and computational thinking, and prepares them for additional study across a breadth of programming fields. Students will learn to use the C programming language to design and implement computational solutions to problems drawn from their 1S courses, and will explore new programming paradigms, algorithm design techniques, and data structures appropriate to these challenges. Specifically, this course aims to have students work with and understand linked lists, stacks, queues, trees, heaps, hashing, pointers (including function pointers) and arrays, data types and bit operations, and dynamic memory management.","campus":"UTSG"},{"courseID":"UTSG-CSC207H","code":"CSC207H","name":"Software Design","description":"An introduction to software design and development concepts, methods, and tools using a statically-typed object-oriented programming language such as Java. Topics from: version control, unit testing, refactoring, object-oriented design and development, design patterns, advanced IDE usage, regular expressions, and reflection.  Representation of \u001aoating-point numbers and introduction to numerical computation.","campus":"UTSG"},{"courseID":"UTSG-CSC207H","code":"CSC207H","name":"Software Design","description":"An introduction to software design and development concepts, methods, and tools using a statically-typed object-oriented programming language such as Java. Topics from: version control, unit testing, refactoring, object-oriented design and development, design patterns, advanced IDE usage, regular expressions, and reflection. Representation of floating-point numbers and introduction to numerical computation.","campus":"UTSG"},{"courseID":"UTSG-CSC207H","code":"CSC207H","name":"Software Design","description":"An introduction to software design and development concepts, methods, and tools using a statically-typed object-oriented programming language such as Java. Topics from: version control, unit testing, refactoring, object-oriented design and development, design patterns, advanced IDE usage, regular expressions, and reflection. Representation of floating-point numbers and introduction to numerical computation.","campus":"UTSG"},{"courseID":"UTSG-CSC207H","code":"CSC207H","name":"Software Design","description":"An introduction to software design and development concepts, methods, and tools using a statically-typed object-oriented programming language such as Java. Topics from: version control, unit testing, refactoring, object-oriented design and development, design patterns, advanced IDE usage, regular expressions, and reflection.  Representation of \u001aoating-point numbers and introduction to numerical computation.","campus":"UTSG"},{"courseID":"UTSG-CSC207H","code":"CSC207H","name":"Software Design","description":"An introduction to software design and development concepts, methods, and tools using a statically-typed object-oriented programming language such as Java. Topics from: version control, unit testing, refactoring, object-oriented design and development, design patterns, advanced IDE usage, regular expressions, and reflection. Representation of floating-point numbers and introduction to numerical computation.","campus":"UTSG"},{"courseID":"UTSG-CSC207H","code":"CSC207H","name":"Software Design","description":"An introduction to software design and development concepts, methods, and tools using a statically-typed object-oriented programming language such as Java. Topics from: version control, unit testing, refactoring, object-oriented design and development, design patterns, advanced IDE usage, regular expressions, and reflection. Representation of floating-point numbers and introduction to numerical computation.","campus":"UTSG"},{"courseID":"UTSG-CSC207H","code":"CSC207H","name":"Software Design","description":"An introduction to software design and development concepts, methods, and tools using a statically-typed object-oriented programming language such as Java. Topics from: version control, unit testing, refactoring, object-oriented design and development, design patterns, advanced IDE usage, regular expressions, and reflection. Representation of floating-point numbers and introduction to numerical computation.","campus":"UTSG"},{"courseID":"UTSG-CSC207H","code":"CSC207H","name":"Software Design","description":"An introduction to software design and development concepts, methods, and tools using a statically-typed object-oriented programming language such as Java. Topics from: version control, unit testing, refactoring, object-oriented design and development, design patterns, advanced IDE usage, regular expressions, and reflection. Representation of floating-point numbers and introduction to numerical computation.","campus":"UTSG"},{"courseID":"UTM-CSC207H","code":"CSC207H","name":"Software Design","description":"An introduction to software design and development concepts, methods, and tools using a statically-typed object-oriented programming language such as Java. Topics from: version control, build management, unit testing, refactoring, object-oriented design and development, design patterns, advanced IDE usage, regular expressions, and reflection. Representation of floating-point numbers and introduction to numerical computation. [24L, 12T]","campus":"UTM"},{"courseID":"UTM-CSC207H","code":"CSC207H","name":"Software Design","description":"An introduction to software design and development concepts, methods, and tools using a statically-typed object-oriented programming language such as Java. Topics from: version control, build management, unit testing, refactoring, object-oriented design and development, design patterns, advanced IDE usage, regular expressions, and reflection. Representation of floating-point numbers and introduction to numerical computation. [24L, 12T]","campus":"UTM"},{"courseID":"UTM-CSC207H","code":"CSC207H","name":"Software Design","description":"An introduction to software design and development concepts, methods, and tools using a statically-typed object-oriented programming language such as Java. Topics from: version control, build management, unit testing, refactoring, object-oriented design and development, design patterns, advanced IDE usage, regular expressions, and reflection. Representation of floating-point numbers and introduction to numerical computation. [24L, 12P]","campus":"UTM"},{"courseID":"UTSG-CSC209H","code":"CSC209H","name":"Software Tools and Systems Programming","description":"Software techniques in a Unix-style environment, using scripting languages and a machine-oriented programming language (typically C). What goes on in the operating system when programs are executed. Core topics: creating and using software tools, pipes and filters, file processing, shell programming, processes, system calls, signals, basic network programming.","campus":"UTSG"},{"courseID":"UTSG-CSC209H","code":"CSC209H","name":"Software Tools and Systems Programming","description":"Software techniques in a Unix-style environment, using scripting languages and a machine-oriented programming language (typically C). What goes on in the operating system when programs are executed. Core topics: creating and using software tools, pipes and filters, file processing, shell programming, processes, system calls, signals, basic network programming.","campus":"UTSG"},{"courseID":"UTSG-CSC209H","code":"CSC209H","name":"Software Tools and Systems Programming","description":"Software techniques in a Unix-style environment, using scripting languages and a machine-oriented programming language (typically C). What goes on in the operating system when programs are executed. Core topics: creating and using software tools, pipes and filters, file processing, shell programming, processes, system calls, signals, basic network programming.","campus":"UTSG"},{"courseID":"UTSG-CSC209H","code":"CSC209H","name":"Software Tools and Systems Programming","description":"Software techniques in a Unix-style environment, using scripting languages and a machine-oriented programming language (typically C). What goes on in the operating system when programs are executed. Core topics: creating and using software tools, pipes and filters, file processing, shell programming, processes, system calls, signals, basic network programming.","campus":"UTSG"},{"courseID":"UTSG-CSC209H","code":"CSC209H","name":"Software Tools and Systems Programming","description":"Software techniques in a Unix-style environment, using scripting languages and a machine-oriented programming language (typically C). What goes on in the operating system when programs are executed. Core topics: creating and using software tools, pipes and filters, file processing, shell programming, processes, system calls, signals, basic network programming.","campus":"UTSG"},{"courseID":"UTSG-CSC209H","code":"CSC209H","name":"Software Tools and Systems Programming","description":"Software techniques in a Unix-style environment, using scripting languages and a machine-oriented programming language (typically C). What goes on in the operating system when programs are executed. Core topics: creating and using software tools, pipes and filters, file processing, shell programming, processes, system calls, signals, basic network programming.","campus":"UTSG"},{"courseID":"UTSG-CSC209H","code":"CSC209H","name":"Software Tools and Systems Programming","description":"Software techniques in a Unix-style environment, using scripting languages and a machine-oriented programming language (typically C). What goes on in the operating system when programs are executed. Core topics: creating and using software tools, pipes and filters, file processing, shell programming, processes, system calls, signals, basic network programming.","campus":"UTSG"},{"courseID":"UTSG-CSC209H","code":"CSC209H","name":"Software Tools and Systems Programming","description":"Software techniques in a Unix-style environment, using scripting languages and a machine-oriented programming language (typically C). What goes on in the operating system when programs are executed. Core topics: creating and using software tools, pipes and filters, file processing, shell programming, processes, system calls, signals, basic network programming.","campus":"UTSG"},{"courseID":"UTM-CSC209H","code":"CSC209H","name":"Software Tools and Systems Programming","description":"Software tools and development in a Unix/Linux environment, using a machine-oriented programming language (typically C). Core topics: software tools (shell utilities and make), processes and program execution, the memory model, system calls, file processing, interprocess communication (pipes and signals), and an introduction to concurrency, including multithreading. [24L, 12T]","campus":"UTM"},{"courseID":"UTM-CSC209H","code":"CSC209H","name":"Software Tools and Systems Programming","description":"Software tools and development in a Unix/Linux environment, using a machine-oriented programming language (typically C). Core topics: software tools (shell utilities and make), processes and program execution, the memory model, system calls, file processing, interprocess communication (pipes and signals), and an introduction to concurrency, including multithreading. [24L, 12T]","campus":"UTM"},{"courseID":"UTM-CSC209H","code":"CSC209H","name":"Software Tools and Systems Programming","description":"Software tools and development in a Unix/Linux environment, using a machine-oriented programming language (typically C). Core topics: software tools (shell utilities and make), processes and program execution, the memory model, system calls, file processing, interprocess communication (pipes and signals), and an introduction to concurrency, including multithreading. [24L, 12P]","campus":"UTM"},{"courseID":"UTSG-CSC236H","code":"CSC236H","name":"Introduction to the Theory of Computation","description":"The application of logic and proof techniques to Computer Science. Mathematical induction; correctness proofs for iterative and recursive algorithms; recurrence equations and their solutions; introduction to automata and formal languages.  This course assumes university-level experience with proof techniques and algorithmic complexity as provided by CSC165H1.  Very strong students who already have this experience (e.g. successful completion of MAT157Y1) may consult the undergraduate office about proceeding directly into CSC236H1.","campus":"UTSG"},{"courseID":"UTSG-CSC236H","code":"CSC236H","name":"Introduction to the Theory of Computation","description":"The application of logic and proof techniques to Computer Science. Mathematical induction; correctness proofs for iterative and recursive algorithms; recurrence equations and their solutions; introduction to automata and formal languages. This course assumes university-level experience with proof techniques and algorithmic complexity as provided by CSC165H1. Very strong students who already have this experience (e.g. successful completion of MAT157Y1) may consult the undergraduate office about proceeding directly into CSC236H1 or CSC240H1.","campus":"UTSG"},{"courseID":"UTSG-CSC236H","code":"CSC236H","name":"Introduction to the Theory of Computation","description":"The application of logic and proof techniques to Computer Science. Mathematical induction; correctness proofs for iterative and recursive algorithms; recurrence equations and their solutions; introduction to automata and formal languages. This course assumes university-level experience with proof techniques and algorithmic complexity as provided by CSC165H1. Very strong students who already have this experience (e.g. successful completion of MAT157Y1) may consult the undergraduate office about proceeding directly into CSC236H1 or CSC240H1.","campus":"UTSG"},{"courseID":"UTSG-CSC236H","code":"CSC236H","name":"Introduction to the Theory of Computation","description":"The application of logic and proof techniques to Computer Science. Mathematical induction; correctness proofs for iterative and recursive algorithms; recurrence equations and their solutions; introduction to automata and formal languages.  This course assumes university-level experience with proof techniques and algorithmic complexity as provided by CSC165H1.  Very strong students who already have this experience (e.g. successful completion of MAT157Y1) may consult the undergraduate office about proceeding directly into CSC236H1.","campus":"UTSG"},{"courseID":"UTSG-CSC236H","code":"CSC236H","name":"Introduction to the Theory of Computation","description":"The application of logic and proof techniques to Computer Science. Mathematical induction; correctness proofs for iterative and recursive algorithms; recurrence equations and their solutions; introduction to automata and formal languages. This course assumes university-level experience with proof techniques and algorithmic complexity as provided by CSC165H1. Very strong students who already have this experience (e.g. successful completion of MAT157Y1) may consult the undergraduate office about proceeding directly into CSC236H1 or CSC240H1.","campus":"UTSG"},{"courseID":"UTSG-CSC236H","code":"CSC236H","name":"Introduction to the Theory of Computation","description":"The application of logic and proof techniques to Computer Science. Mathematical induction; correctness proofs for iterative and recursive algorithms; recurrence equations and their solutions; introduction to automata and formal languages. This course assumes university-level experience with proof techniques and algorithmic complexity as provided by CSC165H1. Very strong students who already have this experience (e.g. successful completion of MAT157Y1) may consult the undergraduate office about proceeding directly into CSC236H1 or CSC240H1.","campus":"UTSG"},{"courseID":"UTSG-CSC236H","code":"CSC236H","name":"Introduction to the Theory of Computation","description":"The application of logic and proof techniques to Computer Science. Mathematical induction; correctness proofs for iterative and recursive algorithms; recurrence equations and their solutions; introduction to automata and formal languages. This course assumes university-level experience with proof techniques and algorithmic complexity as provided by CSC165H1. Very strong students who already have this experience (e.g. successful completion of MAT157Y1) may consult the undergraduate office about proceeding directly into CSC236H1 or CSC240H1.","campus":"UTSG"},{"courseID":"UTSG-CSC236H","code":"CSC236H","name":"Introduction to the Theory of Computation","description":"The application of logic and proof techniques to Computer Science. Mathematical induction; correctness proofs for iterative and recursive algorithms; recurrence equations and their solutions; introduction to automata and formal languages. This course assumes university-level experience with proof techniques and algorithmic complexity as provided by CSC165H1. Very strong students who already have this experience (e.g. successful completion of MAT157Y1) may consult the undergraduate office about proceeding directly into CSC236H1 or CSC240H1.","campus":"UTSG"},{"courseID":"UTM-CSC236H","code":"CSC236H","name":"Introduction to the Theory of Computation","description":"Mathematical induction; correctness proofs for iterative and recursive algorithms; recurrence equations and their solutions (including the \"Master Theorem\"); introduction to automata and formal languages. [24L, 12T]","campus":"UTM"},{"courseID":"UTM-CSC236H","code":"CSC236H","name":"Introduction to the Theory of Computation","description":"Mathematical induction; correctness proofs for iterative and recursive algorithms; recurrence equations and their solutions (including the \"Master Theorem\"); introduction to automata and formal languages. [24L, 12T]","campus":"UTM"},{"courseID":"UTM-CSC236H","code":"CSC236H","name":"Introduction to the Theory of Computation","description":"Mathematical induction; correctness proofs for iterative and recursive algorithms; recurrence equations and their solutions (including the \"Master Theorem\"); introduction to automata and formal languages. [24L, 12T]","campus":"UTM"},{"courseID":"UTSG-CSC240H","code":"CSC240H","name":"Enriched Introduction to the Theory of Computation","description":"The rigorous application of logic and proof techniques to Computer Science. Propositional and predicate logic; mathematical induction and other basic proof techniques; correctness proofs for iterative and recursive algorithms; recurrence equations and their solutions (including the Master Theorem); introduction to automata and formal languages. This course covers the same topics as CSC236H1, together with selected material from CSC165H1, but at a faster pace, in greater depth and with more rigour, and with more challenging assignments. Greater emphasis will be placed on proofs and theoretical analysis. Certain topics briefly mentioned in CSC165H1 or CSC236H1 may be covered in more detail in this course, and some additional topics may also be covered.\r\n NOTE: Students may go to their college to drop down from CSC240H1 to CSC165H1 (or to CSC236H1 if they have already passed CSC165H1). See above for the drop down deadline.","campus":"UTSG"},{"courseID":"UTSG-CSC240H","code":"CSC240H","name":"Enriched Introduction to the Theory of Computation","description":"The rigorous application of logic and proof techniques to Computer Science. Propositional and predicate logic; mathematical induction and other basic proof techniques; correctness proofs for iterative and recursive algorithms; recurrence equations and their solutions (including the Master Theorem); introduction to automata and formal languages. This course covers the same topics as CSC236H1, together with selected material from CSC165H1, but at a faster pace, in greater depth and with more rigour, and with more challenging assignments. Greater emphasis will be placed on proofs and theoretical analysis. Certain topics briefly mentioned in CSC165H1 or CSC236H1 may be covered in more detail in this course, and some additional topics may also be covered. NOTE: Students may go to their college to drop down from CSC240H1 to CSC165H1 (or to CSC236H1 if they have already passed CSC165H1). See above for the drop down deadline.","campus":"UTSG"},{"courseID":"UTSG-CSC240H","code":"CSC240H","name":"Enriched Introduction to the Theory of Computation","description":"The rigorous application of logic and proof techniques to Computer Science. Propositional and predicate logic; mathematical induction and other basic proof techniques; correctness proofs for iterative and recursive algorithms; recurrence equations and their solutions (including the Master Theorem); introduction to automata and formal languages. This course covers the same topics as CSC236H1, together with selected material from CSC165H1, but at a faster pace, in greater depth and with more rigour, and with more challenging assignments. Greater emphasis will be placed on proofs and theoretical analysis. Certain topics briefly mentioned in CSC165H1 or CSC236H1 may be covered in more detail in this course, and some additional topics may also be covered. NOTE: Students may go to their college to drop down from CSC240H1 to CSC165H1 (or to CSC236H1 if they have already passed CSC165H1). See above for the drop down deadline.","campus":"UTSG"},{"courseID":"UTSG-CSC258H","code":"CSC258H","name":"Computer Organization","description":"Computer structures, machine languages, instruction execution, addressing techniques, and digital representation of data. Computer system organization, memory storage devices, and microprogramming. Block diagram circuit realizations of memory, control and arithmetic functions. There are a number of laboratory periods in which students conduct experiments with digital logic circuits.","campus":"UTSG"},{"courseID":"UTSG-CSC258H","code":"CSC258H","name":"Computer Organization","description":"Computer structures, machine languages, instruction execution, addressing techniques, and digital representation of data. Computer system organization, memory storage devices, and microprogramming. Block diagram circuit realizations of memory, control and arithmetic functions. There are a number of laboratory periods in which students conduct experiments with digital logic circuits.","campus":"UTSG"},{"courseID":"UTSG-CSC258H","code":"CSC258H","name":"Computer Organization","description":"Computer structures, machine languages, instruction execution, addressing techniques, and digital representation of data. Computer system organization, memory storage devices, and microprogramming. Block diagram circuit realizations of memory, control and arithmetic functions. There are a number of laboratory periods in which students conduct experiments with digital logic circuits.","campus":"UTSG"},{"courseID":"UTSG-CSC258H","code":"CSC258H","name":"Computer Organization","description":"Computer structures, machine languages, instruction execution, addressing techniques, and digital representation of data. Computer system organization, memory storage devices, and microprogramming. Block diagram circuit realizations of memory, control and arithmetic functions. There are a number of laboratory periods in which students conduct experiments with digital logic circuits.","campus":"UTSG"},{"courseID":"UTSG-CSC258H","code":"CSC258H","name":"Computer Organization","description":"Computer structures, machine languages, instruction execution, addressing techniques, and digital representation of data. Computer system organization, memory storage devices, and microprogramming. Block diagram circuit realizations of memory, control and arithmetic functions. There are a number of laboratory periods in which students conduct experiments with digital logic circuits.","campus":"UTSG"},{"courseID":"UTSG-CSC258H","code":"CSC258H","name":"Computer Organization","description":"Computer structures, machine languages, instruction execution, addressing techniques, and digital representation of data. Computer system organization, memory storage devices, and microprogramming. Block diagram circuit realizations of memory, control and arithmetic functions. There are a number of laboratory periods in which students conduct experiments with digital logic circuits.","campus":"UTSG"},{"courseID":"UTSG-CSC258H","code":"CSC258H","name":"Computer Organization","description":"Computer structures, machine languages, instruction execution, addressing techniques, and digital representation of data. Computer system organization, memory storage devices, and microprogramming. Block diagram circuit realizations of memory, control and arithmetic functions. There are a number of laboratory periods in which students conduct experiments with digital logic circuits.","campus":"UTSG"},{"courseID":"UTSG-CSC258H","code":"CSC258H","name":"Computer Organization","description":"Computer structures, machine languages, instruction execution, addressing techniques, and digital representation of data. Computer system organization, memory storage devices, and microprogramming. Block diagram circuit realizations of memory, control and arithmetic functions. There are a number of laboratory periods in which students conduct experiments with digital logic circuits.","campus":"UTSG"},{"courseID":"UTM-CSC258H","code":"CSC258H","name":"Computer Organization","description":"An introduction to computer organization and architecture, using a common CPU architecture (typically MIPS). Core topics: boolean expressions and logic gates, numerical representations, design and analysis of combinational and sequential circuits, the control unit and datapath, the memory hierarchy, instruction set architectures, and assembly programming. Students will design circuits and program using assembly. [24L, 24P]","campus":"UTM"},{"courseID":"UTM-CSC258H","code":"CSC258H","name":"Computer Organization","description":"An introduction to computer organization and architecture, using a common CPU architecture (typically MIPS). Core topics: boolean expressions and logic gates, numerical representations, design and analysis of combinational and sequential circuits, the control unit and datapath, the memory hierarchy, instruction set architectures, and assembly programming. Students will design circuits and program using assembly. [24L, 24P]","campus":"UTM"},{"courseID":"UTM-CSC258H","code":"CSC258H","name":"Computer Organization","description":"An introduction to computer organization and architecture, using a common CPU architecture (typically MIPS). Core topics: boolean expressions and logic gates, numerical representations, design and analysis of combinational and sequential circuits, the control unit and datapath, the memory hierarchy, instruction set architectures, and assembly programming. Students will design circuits and program using assembly. [24L, 24P]","campus":"UTM"},{"courseID":"UTSG-CSC263H","code":"CSC263H","name":"Data Structures and Analysis","description":"Algorithm analysis: worst-case, average-case, and amortized complexity. Expected worst-case complexity, randomized quicksort and selection.  Standard abstract data types, such as graphs, dictionaries, priority queues, and disjoint sets. A variety of data structures for implementing these abstract data types, such as balanced search trees, hashing, heaps, and disjoint forests. Design and comparison of data structures. Introduction to lower bounds.","campus":"UTSG"},{"courseID":"UTSG-CSC263H","code":"CSC263H","name":"Data Structures and Analysis","description":"Algorithm analysis: worst-case, average-case, and amortized complexity. Expected worst-case complexity, randomized quicksort and selection. Standard abstract data types, such as graphs, dictionaries, priority queues, and disjoint sets. A variety of data structures for implementing these abstract data types, such as balanced search trees, hashing, heaps, and disjoint forests. Design and comparison of data structures. Introduction to lower bounds.","campus":"UTSG"},{"courseID":"UTSG-CSC263H","code":"CSC263H","name":"Data Structures and Analysis","description":"Algorithm analysis: worst-case, average-case, and amortized complexity. Expected worst-case complexity, randomized quicksort and selection. Standard abstract data types, such as graphs, dictionaries, priority queues, and disjoint sets. A variety of data structures for implementing these abstract data types, such as balanced search trees, hashing, heaps, and disjoint forests. Design and comparison of data structures. Introduction to lower bounds.","campus":"UTSG"},{"courseID":"UTSG-CSC263H","code":"CSC263H","name":"Data Structures and Analysis","description":"Algorithm analysis: worst-case, average-case, and amortized complexity. Expected worst-case complexity, randomized quicksort and selection.  Standard abstract data types, such as graphs, dictionaries, priority queues, and disjoint sets. A variety of data structures for implementing these abstract data types, such as balanced search trees, hashing, heaps, and disjoint forests. Design and comparison of data structures. Introduction to lower bounds.","campus":"UTSG"},{"courseID":"UTSG-CSC263H","code":"CSC263H","name":"Data Structures and Analysis","description":"Algorithm analysis: worst-case, average-case, and amortized complexity. Expected worst-case complexity, randomized quicksort and selection. Standard abstract data types, such as graphs, dictionaries, priority queues, and disjoint sets. A variety of data structures for implementing these abstract data types, such as balanced search trees, hashing, heaps, and disjoint forests. Design and comparison of data structures. Introduction to lower bounds.","campus":"UTSG"},{"courseID":"UTSG-CSC263H","code":"CSC263H","name":"Data Structures and Analysis","description":"Algorithm analysis: worst-case, average-case, and amortized complexity. Expected worst-case complexity, randomized quicksort and selection. Standard abstract data types, such as graphs, dictionaries, priority queues, and disjoint sets. A variety of data structures for implementing these abstract data types, such as balanced search trees, hashing, heaps, and disjoint forests. Design and comparison of data structures. Introduction to lower bounds.","campus":"UTSG"},{"courseID":"UTSG-CSC263H","code":"CSC263H","name":"Data Structures and Analysis","description":"Algorithm analysis: worst-case, average-case, and amortized complexity. Expected worst-case complexity, randomized quicksort and selection. Standard abstract data types, such as graphs, dictionaries, priority queues, and disjoint sets. A variety of data structures for implementing these abstract data types, such as balanced search trees, hashing, heaps, and disjoint forests. Design and comparison of data structures. Introduction to lower bounds.","campus":"UTSG"},{"courseID":"UTSG-CSC263H","code":"CSC263H","name":"Data Structures and Analysis","description":"Algorithm analysis: worst-case, average-case, and amortized complexity. Expected worst-case complexity, randomized quicksort and selection. Standard abstract data types, such as graphs, dictionaries, priority queues, and disjoint sets. A variety of data structures for implementing these abstract data types, such as balanced search trees, hashing, heaps, and disjoint forests. Design and comparison of data structures. Introduction to lower bounds.","campus":"UTSG"},{"courseID":"UTM-CSC263H","code":"CSC263H","name":"Data Structures and Analysis","description":"Algorithm analysis: worst-case, average-case, and amortized complexity. Standard abstract data types, such as graphs, dictionaries, priority queues and disjoint sets. A variety of data structures for implementing these abstract data types, such as balanced search trees, hashing, heaps and disjoint forests. Design, implementation and comparison of data structures. Introduction to lower bounds. [24L, 12T]","campus":"UTM"},{"courseID":"UTM-CSC263H","code":"CSC263H","name":"Data Structures and Analysis","description":"Algorithm analysis: worst-case, average-case, and amortized complexity. Standard abstract data types, such as graphs, dictionaries, priority queues and disjoint sets. A variety of data structures for implementing these abstract data types, such as balanced search trees, hashing, heaps and disjoint forests. Design, implementation and comparison of data structures. Introduction to lower bounds. [24L, 12T]","campus":"UTM"},{"courseID":"UTM-CSC263H","code":"CSC263H","name":"Data Structures and Analysis","description":"Algorithm analysis: worst-case, average-case, and amortized complexity. Standard abstract data types, such as graphs, dictionaries, priority queues and disjoint sets. A variety of data structures for implementing these abstract data types, such as balanced search trees, hashing, heaps and disjoint forests. Design, implementation and comparison of data structures. Introduction to lower bounds. [24L, 12T]","campus":"UTM"},{"courseID":"UTSG-CSC265H","code":"CSC265H","name":"Enriched Data Structures and Analysis","description":"This course covers the same topics as CSC263H1, but at a faster pace, in greater depth and with more rigour, and with more challenging assignments. Greater emphasis will be placed on proofs, theoretical analysis, and creative problem-solving. Certain topics briefly mentioned in CSC263H1 may be covered in more detail in this course, and some additional topics may also be covered. Students without the exact course prerequisites but with a strong mathematical background are encouraged to consult the Department about the possibility of taking this course.\r\n NOTE: Students may go to their college to drop down from CSC265H1 to CSC263H1. See above for the drop down deadline.","campus":"UTSG"},{"courseID":"UTSG-CSC265H","code":"CSC265H","name":"Enriched Data Structures and Analysis","description":"This course covers the same topics as CSC263H1, but at a faster pace, in greater depth and with more rigour, and with more challenging assignments. Greater emphasis will be placed on proofs, theoretical analysis, and creative problem-solving. Certain topics briefly mentioned in CSC263H1 may be covered in more detail in this course, and some additional topics may also be covered. Students without the exact course prerequisites but with a strong mathematical background are encouraged to consult the Department about the possibility of taking this course. NOTE: Students may go to their college to drop down from CSC265H1 to CSC263H1. See above for the drop down deadline.","campus":"UTSG"},{"courseID":"UTSG-CSC265H","code":"CSC265H","name":"Enriched Data Structures and Analysis","description":"This course covers the same topics as CSC263H1, but at a faster pace, in greater depth and with more rigour, and with more challenging assignments. Greater emphasis will be placed on proofs, theoretical analysis, and creative problem-solving. Certain topics briefly mentioned in CSC263H1 may be covered in more detail in this course, and some additional topics may also be covered. Students without the exact course prerequisites but with a strong mathematical background are encouraged to consult the Department about the possibility of taking this course. NOTE: Students may go to their college to drop down from CSC265H1 to CSC263H1. See above for the drop down deadline.","campus":"UTSG"},{"courseID":"UTM-CSC290H","code":"CSC290H","name":"Communication Skills for Computer Scientists","description":"Targeted instruction and significant practice in the communications required for careers in computer science. The curriculum covers written, oral and interpersonal communication. Students will hand in short pieces of writing each week, will make oral presentations several times in the semester, and will work together in simulated project meetings and other realistic scenarios of pair and small group interaction. This can be used to satisfy the writing requirement in CSC programs. [24L, 12T]","campus":"UTM"},{"courseID":"UTM-CSC290H","code":"CSC290H","name":"Communication Skills for Computer Scientists","description":"Targeted instruction and significant practice in the communications required for careers in computer science. The curriculum covers written, oral and interpersonal communication. Students will hand in short pieces of writing each week, will make oral presentations several times in the semester, and will work together in simulated project meetings and other realistic scenarios of pair and small group interaction. This can be used to satisfy the writing requirement in CSC programs. [24L, 12T]","campus":"UTM"},{"courseID":"UTM-CSC290H","code":"CSC290H","name":"Communication Skills for Computer Scientists","description":"Targeted instruction and significant practice in the communications required for careers in computer science. The curriculum covers written, oral and interpersonal communication. Students will hand in short pieces of writing each week, will make oral presentations several times in the semester, and will work together in simulated project meetings and other realistic scenarios of pair and small group interaction. This can be used to satisfy the writing requirement in CSC programs. [24L, 12T]","campus":"UTM"},{"courseID":"UTM-CSC290H","code":"CSC290H","name":"Communication Skills for Computer Scientists","description":"Targeted instruction and significant practice in the communications required for careers in computer science. The curriculum covers written, oral and interpersonal communication. Students will hand in short pieces of writing each week, will make oral presentations several times in the semester, and will work together in simulated project meetings and other realistic scenarios of pair and small group interaction. This can be used to satisfy the writing requirement in CSC programs. [24L, 12T]","campus":"UTM"},{"courseID":"UTM-CSC290H","code":"CSC290H","name":"Communication Skills for Computer Scientists","description":"Targeted instruction and significant practice in the communications required for careers in computer science. The curriculum covers written, oral and interpersonal communication. Students will hand in short pieces of writing each week, will make oral presentations several times in the semester, and will work together in simulated project meetings and other realistic scenarios of pair and small group interaction. This can be used to satisfy the writing requirement in CSC programs. [24L, 12T]","campus":"UTM"},{"courseID":"UTM-CSC290H","code":"CSC290H","name":"Communication Skills for Computer Scientists","description":"Targeted instruction and significant practice in the communications required for careers in computer science. The curriculum covers written, oral and interpersonal communication. Students will hand in short pieces of writing each week, will make oral presentations several times in the semester, and will work together in simulated project meetings and other realistic scenarios of pair and small group interaction. This can be used to satisfy the writing requirement in CSC programs. [24L, 12T]","campus":"UTM"},{"courseID":"UTSG-CSC299Y","code":"CSC299Y","name":"Rsch Opportunity Prg ","description":"","campus":"UTSG"},{"courseID":"UTSG-CSC299Y","code":"CSC299Y","name":"Rsch Opportunity Prg ","description":"","campus":"UTSG"},{"courseID":"UTSG-CSC299Y","code":"CSC299Y","name":"Rsch Opportunity Prg ","description":"","campus":"UTSG"},{"courseID":"UTSG-CSC299Y","code":"CSC299Y","name":"Rsch Opportunity Prg ","description":"","campus":"UTSG"},{"courseID":"UTM-CSC299Y","code":"CSC299Y","name":"Research Opportunity Program","description":"This courses provides a richly rewarding opportunity for students in their second year to work in the research project of a professor in return for 299Y course credit. Students enrolled have an opportunity to become involved in original research, learn research methods and share in the excitement and discovery of acquiring new knowledge. Participating faculty members post their project descriptions for the following summer and fall/winter sessions in early February and students are invited to apply in early March. See Experiential and International Opportunities for more details.","campus":"UTM"},{"courseID":"UTM-CSC299Y","code":"CSC299Y","name":"Research Opportunity Program","description":"This courses provides a richly rewarding opportunity for students in their second year to work in the research project of a professor in return for 299Y course credit. Students enrolled have an opportunity to become involved in original research, learn research methods and share in the excitement and discovery of acquiring new knowledge. Participating faculty members post their project descriptions for the following summer and fall/winter sessions in early February and students are invited to apply in early March. See Experiential and International Opportunities for more details.","campus":"UTM"},{"courseID":"UTSG-CSC300H","code":"CSC300H","name":"Computers and Society","description":"Privacy and Freedom of Information; recent Canadian legislation and reports. Computers and work; employment levels, quality of working life. Electronic fund transfer systems; transborder data flows. Computers and bureaucratization. Computers in the home; public awareness about computers. Robotics. Professionalism and the ethics of computers. The course is designed not only for science students, but also those in social sciences or humanities.","campus":"UTSG"},{"courseID":"UTSG-CSC300H","code":"CSC300H","name":"Computers and Society","description":"Privacy and Freedom of Information; recent Canadian legislation and reports. Computers and work; employment levels, quality of working life. Electronic fund transfer systems; transborder data flows. Computers and bureaucratization. Computers in the home; public awareness about computers. Robotics. Professionalism and the ethics of computers. The course is designed not only for science students, but also those in social sciences or humanities.","campus":"UTSG"},{"courseID":"UTSG-CSC300H","code":"CSC300H","name":"Computers and Society","description":"Privacy and Freedom of Information; recent Canadian legislation and reports. Computers and work; employment levels, quality of working life. Electronic fund transfer systems; transborder data flows. Computers and bureaucratization. Computers in the home; public awareness about computers. Robotics. Professionalism and the ethics of computers. The course is designed not only for science students, but also those in social sciences or humanities.","campus":"UTSG"},{"courseID":"UTSG-CSC300H","code":"CSC300H","name":"Computers and Society","description":"Privacy and Freedom of Information; recent Canadian legislation and reports. Computers and work; employment levels, quality of working life. Electronic fund transfer systems; transborder data flows. Computers and bureaucratization. Computers in the home; public awareness about computers. Robotics. Professionalism and the ethics of computers. The course is designed not only for science students, but also those in social sciences or humanities.","campus":"UTSG"},{"courseID":"UTSG-CSC300H","code":"CSC300H","name":"Computers and Society","description":"Privacy and Freedom of Information; recent Canadian legislation and reports. Computers and work; employment levels, quality of working life. Electronic fund transfer systems; transborder data flows. Computers and bureaucratization. Computers in the home; public awareness about computers. Robotics. Professionalism and the ethics of computers. The course is designed not only for science students, but also those in social sciences or humanities.","campus":"UTSG"},{"courseID":"UTSG-CSC300H","code":"CSC300H","name":"Computers and Society","description":"Privacy and Freedom of Information; recent Canadian legislation and reports. Computers and work; employment levels, quality of working life. Electronic fund transfer systems; transborder data flows. Computers and bureaucratization. Computers in the home; public awareness about computers. Robotics. Professionalism and the ethics of computers. The course is designed not only for science students, but also those in social sciences or humanities.","campus":"UTSG"},{"courseID":"UTSG-CSC301H","code":"CSC301H","name":"Introduction to Software Engineering","description":"An introduction to agile development methods appropriate for medium-sized teams and rapidly-moving projects. Basic software development infrastructure; requirements elicitation and tracking; estimation and prioritization; teamwork skills; basic UML; design patterns and refactoring; security, discussion of ethical issues, and professional responsibility.","campus":"UTSG"},{"courseID":"UTSG-CSC301H","code":"CSC301H","name":"Introduction to Software Engineering","description":"An introduction to agile development methods appropriate for medium-sized teams and rapidly-moving projects. Basic software development infrastructure; requirements elicitation and tracking; estimation and prioritization; teamwork skills; basic UML; design patterns and refactoring; security, discussion of ethical issues, and professional responsibility.","campus":"UTSG"},{"courseID":"UTSG-CSC301H","code":"CSC301H","name":"Introduction to Software Engineering","description":"An introduction to agile development methods appropriate for medium-sized teams and rapidly-moving projects. Basic software development infrastructure; requirements elicitation and tracking; estimation and prioritization; teamwork skills; basic UML; design patterns and refactoring; security, discussion of ethical issues, and professional responsibility.","campus":"UTSG"},{"courseID":"UTSG-CSC301H","code":"CSC301H","name":"Introduction to Software Engineering","description":"An introduction to agile development methods appropriate for medium-sized teams and rapidly-moving projects. Basic software development infrastructure; requirements elicitation and tracking; estimation and prioritization; teamwork skills; basic UML; design patterns and refactoring; security, discussion of ethical issues, and professional responsibility.","campus":"UTSG"},{"courseID":"UTSG-CSC301H","code":"CSC301H","name":"Introduction to Software Engineering","description":"An introduction to agile development methods appropriate for medium-sized teams and rapidly-moving projects. Basic software development infrastructure; requirements elicitation and tracking; estimation and prioritization; teamwork skills; basic UML; design patterns and refactoring; security, discussion of ethical issues, and professional responsibility.","campus":"UTSG"},{"courseID":"UTSG-CSC301H","code":"CSC301H","name":"Introduction to Software Engineering","description":"An introduction to agile development methods appropriate for medium-sized teams and rapidly-moving projects. Basic software development infrastructure; requirements elicitation and tracking; estimation and prioritization; teamwork skills; basic UML; design patterns and refactoring; security, discussion of ethical issues, and professional responsibility.","campus":"UTSG"},{"courseID":"UTM-CSC301H","code":"CSC301H","name":"Introduction to Software Engineering","description":"An introduction to agile development methods appropriate for medium-sized teams and rapidly-moving projects. Basic software development infrastructure; requirements elicitation and tracking; estimation and prioritization; teamwork skills; basic UML; design patterns and refactoring; security. [24L, 12T] Priority is given to students enrolled in Computer Science Specialist, Information Security Specialist, Bioinformatics Specialist or Computer Science Major programs.","campus":"UTM"},{"courseID":"UTM-CSC301H","code":"CSC301H","name":"Introduction to Software Engineering","description":"An introduction to agile development methods appropriate for medium-sized teams and rapidly-moving projects. Basic software development infrastructure; requirements elicitation and tracking; estimation and prioritization; teamwork skills; basic UML; design patterns and refactoring; security. [24L, 12T] Priority is given to students enrolled in Computer Science Specialist, Information Security Specialist, Bioinformatics Specialist or Computer Science Major programs.","campus":"UTM"},{"courseID":"UTM-CSC301H","code":"CSC301H","name":"Introduction to Software Engineering","description":"An introduction to agile development methods appropriate for medium-sized teams and rapidly-moving projects. Basic software development infrastructure; requirements elicitation and tracking; estimation and prioritization; teamwork skills; basic UML; design patterns and refactoring; security. [24L, 12T] Priority is given to students enrolled in Computer Science Specialist, Information Security Specialist, Bioinformatics Specialist or Computer Science Major programs.","campus":"UTM"},{"courseID":"UTSG-CSC302H","code":"CSC302H","name":"Engineering Large Software Systems","description":"An introduction to the theory and practice of large-scale software system design, development, and deployment. Project management; advanced UML; reverse engineering; requirements inspection; verification and validation; software architecture; performance modelling and analysis.","campus":"UTSG"},{"courseID":"UTSG-CSC302H","code":"CSC302H","name":"Engineering Large Software Systems","description":"An introduction to the theory and practice of large-scale software system design, development, and deployment. Project management; advanced UML; reverse engineering; requirements inspection; verification and validation; software architecture; performance modelling and analysis.","campus":"UTSG"},{"courseID":"UTSG-CSC302H","code":"CSC302H","name":"Engineering Large Software Systems","description":"An introduction to the theory and practice of large-scale software system design, development, and deployment. Project management; advanced UML; reverse engineering; requirements inspection; verification and validation; software architecture; performance modelling and analysis.","campus":"UTSG"},{"courseID":"UTSG-CSC302H","code":"CSC302H","name":"Engineering Large Software Systems","description":"An introduction to the theory and practice of large-scale software system design, development, and deployment. Project management; advanced UML; reverse engineering; requirements inspection; verification and validation; software architecture; performance modelling and analysis.","campus":"UTSG"},{"courseID":"UTSG-CSC303H","code":"CSC303H","name":"Social and Information Networks","description":"A course on how networks underlie the social, technological, and natural worlds, with an emphasis on developing intuitions for broadly applicable concepts in network analysis. Topics include: introductions to graph theory, network concepts, and game theory; social networks; information networks; the aggregate behaviour of markets and crowds; network dynamics; information diffusion; popular concepts such as \"six degrees of separation,\" the \"friendship paradox,\" and the \"wisdom of crowds.\"","campus":"UTSG"},{"courseID":"UTSG-CSC304H","code":"CSC304H","name":"Algorithmic Game Theory and Mechanism Design","description":"A mathematical and computational introduction to game theory and mechanism design. Topics include games in matrix and extensive form, equilibria and price of anarchy, matching markets, auctions, network externalities, tipping points, voting theory. This course is intended for economics, mathematics, and computer science students.","campus":"UTSG"},{"courseID":"UTSG-CSC304H","code":"CSC304H","name":"Algorithmic Game Theory and Mechanism Design","description":"A mathematical and computational introduction to game theory and mechanism design. Topics include games in matrix and extensive form, equilibria and price of anarchy, matching markets, auctions, network externalities, tipping points, voting theory. This course is intended for economics, mathematics, and computer science students.","campus":"UTSG"},{"courseID":"UTSG-CSC304H","code":"CSC304H","name":"Algorithmic Game Theory and Mechanism Design","description":"A mathematical and computational introduction to game theory and mechanism design. Topics include games in matrix and extensive form, equilibria and price of anarchy, matching markets, auctions, network externalities, tipping points, voting theory. This course is intended for economics, mathematics, and computer science students.","campus":"UTSG"},{"courseID":"UTSG-CSC309H","code":"CSC309H","name":"Programming on the Web","description":"An introduction to software development on the web. Concepts underlying the development of programs that operate on the web; survey of technological alternatives; greater depth on some technologies. Operational concepts of the internet and the web, static client content, dynamic client content, dynamically served content, n-tiered architectures, web development processes, and security on the web. Assignments involve increasingly more complex web-based programs. Guest lecturers from leading e-commerce firms will describe the architecture and operation of their web sites.","campus":"UTSG"},{"courseID":"UTSG-CSC309H","code":"CSC309H","name":"Programming on the Web","description":"An introduction to software development on the web. Concepts underlying the development of programs that operate on the web; survey of technological alternatives; greater depth on some technologies. Operational concepts of the internet and the web, static client content, dynamic client content, dynamically served content, n-tiered architectures, web development processes, and security on the web. Assignments involve increasingly more complex web-based programs. Guest lecturers from leading e-commerce firms will describe the architecture and operation of their web sites.","campus":"UTSG"},{"courseID":"UTSG-CSC309H","code":"CSC309H","name":"Programming on the Web","description":"An introduction to software development on the web. Concepts underlying the development of programs that operate on the web; survey of technological alternatives; greater depth on some technologies. Operational concepts of the internet and the web, static client content, dynamic client content, dynamically served content, n-tiered architectures, web development processes, and security on the web. Assignments involve increasingly more complex web-based programs. Guest lecturers from leading e-commerce firms will describe the architecture and operation of their web sites.","campus":"UTSG"},{"courseID":"UTSG-CSC309H","code":"CSC309H","name":"Programming on the Web","description":"An introduction to software development on the web. Concepts underlying the development of programs that operate on the web; survey of technological alternatives; greater depth on some technologies. Operational concepts of the internet and the web, static client content, dynamic client content, dynamically served content, n-tiered architectures, web development processes, and security on the web. Assignments involve increasingly more complex web-based programs. Guest lecturers from leading e-commerce firms will describe the architecture and operation of their web sites.","campus":"UTSG"},{"courseID":"UTSG-CSC309H","code":"CSC309H","name":"Programming on the Web","description":"An introduction to software development on the web. Concepts underlying the development of programs that operate on the web; survey of technological alternatives; greater depth on some technologies. Operational concepts of the internet and the web, static client content, dynamic client content, dynamically served content, n-tiered architectures, web development processes, and security on the web. Assignments involve increasingly more complex web-based programs. Guest lecturers from leading e-commerce firms will describe the architecture and operation of their web sites.","campus":"UTSG"},{"courseID":"UTSG-CSC309H","code":"CSC309H","name":"Programming on the Web","description":"An introduction to software development on the web. Concepts underlying the development of programs that operate on the web; survey of technological alternatives; greater depth on some technologies. Operational concepts of the internet and the web, static client content, dynamic client content, dynamically served content, n-tiered architectures, web development processes, and security on the web. Assignments involve increasingly more complex web-based programs. Guest lecturers from leading e-commerce firms will describe the architecture and operation of their web sites.","campus":"UTSG"},{"courseID":"UTM-CSC309H","code":"CSC309H","name":"Programming on the Web","description":"An introduction to software development on the web. Concepts underlying the development of programs that operate on the web; survey of technological alternatives; greater depth on some technologies. Operational concepts of the internet and the web, static client content, dynamic client content, dynamically served content, n-tiered architectures, web development processes, and security on the web. Assignments involve increasingly more complex web-based programs. [24L, 12T] Priority is given to students enrolled in Computer Science Specialist, Information Security Specialist, Bioinformatics Specialist or Computer Science Major programs.","campus":"UTM"},{"courseID":"UTM-CSC309H","code":"CSC309H","name":"Programming on the Web","description":"An introduction to software development on the web. Concepts underlying the development of programs that operate on the web; survey of technological alternatives; greater depth on some technologies. Operational concepts of the internet and the web, static client content, dynamic client content, dynamically served content, n-tiered architectures, web development processes, and security on the web. Assignments involve increasingly more complex web-based programs. [24L, 12T] Priority is given to students enrolled in Computer Science Specialist, Information Security Specialist, Bioinformatics Specialist or Computer Science Major programs.","campus":"UTM"},{"courseID":"UTM-CSC309H","code":"CSC309H","name":"Programming on the Web","description":"An introduction to software development on the web. Concepts underlying the development of programs that operate on the web; survey of technological alternatives; greater depth on some technologies. Operational concepts of the internet and the web, static client content, dynamic client content, dynamically served content, n-tiered architectures, web development processes, and security on the web. Assignments involve increasingly more complex web-based programs. [24L, 12P] Priority is given to students enrolled in Computer Science Specialist, Information Security Specialist, Bioinformatics Specialist or Computer Science Major programs.","campus":"UTM"},{"courseID":"UTSG-CSC318H","code":"CSC318H","name":"The Design of Interactive Computational Media","description":"User-centred design of interactive systems; methodologies, principles, and metaphors; task analysis. Interdisciplinary design; the role of graphic design, industrial design, and the behavioural sciences. Interactive hardware and software; concepts from computer graphics. Typography, layout, colour, sound, video, gesture, and usability enhancements. Classes of interactive graphical media; direct manipulation systems, extensible systems, rapid prototyping tools. Students work on projects in interdisciplinary teams.","campus":"UTSG"},{"courseID":"UTSG-CSC318H","code":"CSC318H","name":"The Design of Interactive Computational Media","description":"User-centred design of interactive systems; methodologies, principles, and metaphors; task analysis. Interdisciplinary design; the role of graphic design, industrial design, and the behavioural sciences. Interactive hardware and software; concepts from computer graphics. Typography, layout, colour, sound, video, gesture, and usability enhancements. Classes of interactive graphical media; direct manipulation systems, extensible systems, rapid prototyping tools. Students work on projects in interdisciplinary teams.","campus":"UTSG"},{"courseID":"UTSG-CSC318H","code":"CSC318H","name":"The Design of Interactive Computational Media","description":"User-centred design of interactive systems; methodologies, principles, and metaphors; task analysis. Interdisciplinary design; the role of graphic design, industrial design, and the behavioural sciences. Interactive hardware and software; concepts from computer graphics. Typography, layout, colour, sound, video, gesture, and usability enhancements. Classes of interactive graphical media; direct manipulation systems, extensible systems, rapid prototyping tools. Students work on projects in interdisciplinary teams.","campus":"UTSG"},{"courseID":"UTSG-CSC318H","code":"CSC318H","name":"The Design of Interactive Computational Media","description":"User-centred design of interactive systems; methodologies, principles, and metaphors; task analysis. Interdisciplinary design; the role of graphic design, industrial design, and the behavioural sciences. Interactive hardware and software; concepts from computer graphics. Typography, layout, colour, sound, video, gesture, and usability enhancements. Classes of interactive graphical media; direct manipulation systems, extensible systems, rapid prototyping tools. Students work on projects in interdisciplinary teams.","campus":"UTSG"},{"courseID":"UTSG-CSC318H","code":"CSC318H","name":"The Design of Interactive Computational Media","description":"User-centred design of interactive systems; methodologies, principles, and metaphors; task analysis. Interdisciplinary design; the role of graphic design, industrial design, and the behavioural sciences. Interactive hardware and software; concepts from computer graphics. Typography, layout, colour, sound, video, gesture, and usability enhancements. Classes of interactive graphical media; direct manipulation systems, extensible systems, rapid prototyping tools. Students work on projects in interdisciplinary teams.","campus":"UTSG"},{"courseID":"UTSG-CSC318H","code":"CSC318H","name":"The Design of Interactive Computational Media","description":"User-centred design of interactive systems; methodologies, principles, and metaphors; task analysis. Interdisciplinary design; the role of graphic design, industrial design, and the behavioural sciences. Interactive hardware and software; concepts from computer graphics. Typography, layout, colour, sound, video, gesture, and usability enhancements. Classes of interactive graphical media; direct manipulation systems, extensible systems, rapid prototyping tools. Students work on projects in interdisciplinary teams.","campus":"UTSG"},{"courseID":"UTM-CSC318H","code":"CSC318H","name":"The Design of Interactive Computational Media","description":"User-centered design of interactive systems. Methodologies, principles, metaphors, task analysis, and other topics. Interdisciplinary design; the role of industrial design and the behavioural sciences. Interactive hardware and software; concepts from computer graphics. Classes of direct manipulation systems, extensible systems, rapid prototyping tools. Additional topics in interactive computational media. Students work on projects in interdisciplinary teams. Enrolment limited, but non-computer scientists welcome.[24L, 12T] Priority is given to students enrolled in Computer Science Specialist, Information Security Specialist, Bioinformatics Specialist or Computer Science Major programs.","campus":"UTM"},{"courseID":"UTM-CSC318H","code":"CSC318H","name":"The Design of Interactive Computational Media","description":"User-centered design of interactive systems. Methodologies, principles, metaphors, task analysis, and other topics. Interdisciplinary design; the role of industrial design and the behavioural sciences. Interactive hardware and software; concepts from computer graphics. Classes of direct manipulation systems, extensible systems, rapid prototyping tools. Additional topics in interactive computational media. Students work on projects in interdisciplinary teams. Enrolment limited, but non-computer scientists welcome.[24L, 12T] Priority is given to students enrolled in Computer Science Specialist, Information Security Specialist, Bioinformatics Specialist or Computer Science Major programs.","campus":"UTM"},{"courseID":"UTM-CSC318H","code":"CSC318H","name":"The Design of Interactive Computational Media","description":"User-centered design of interactive systems. Methodologies, principles, metaphors, task analysis, and other topics. Interdisciplinary design; the role of industrial design and the behavioural sciences. Interactive hardware and software; concepts from computer graphics. Classes of direct manipulation systems, extensible systems, rapid prototyping tools. Additional topics in interactive computational media. Students work on projects in interdisciplinary teams. Enrolment limited, but non-computer scientists welcome.[24L, 12T] Priority is given to students enrolled in Computer Science Specialist, Information Security Specialist, Bioinformatics Specialist or Computer Science Major programs.","campus":"UTM"},{"courseID":"UTSG-CSC320H","code":"CSC320H","name":"Introduction to Visual Computing","description":"Image synthesis and image analysis aimed at students with an interest in computer graphics, computer vision, or the visual arts. Focus on three major topics: (1) visual computing principles—computational and mathematical methods for creating, capturing, analyzing, and manipulating digital photographs (image acquisition, basic image processing, image warping, anti-aliasing); (2) digital special effects—applying these principles to create special effects found in movies and commercials; (3) visual programming—using C/C++ and OpenGL to create graphical user interfaces for synthesizing and manipulating photographs. The course requires the ability to use differential calculus in several variables and linear algebra.","campus":"UTSG"},{"courseID":"UTSG-CSC320H","code":"CSC320H","name":"Introduction to Visual Computing","description":"Image synthesis and image analysis aimed at students with an interest in computer graphics, computer vision, or the visual arts. Focus on three major topics: (1) visual computing principlesâ€”computational and mathematical methods for creating, capturing, analyzing, and manipulating digital photographs (image acquisition, basic image processing, image warping, anti-aliasing); (2) digital special effectsâ€”applying these principles to create special effects found in movies and commercials; (3) visual programmingâ€”using C/C++ and OpenGL to create graphical user interfaces for synthesizing and manipulating photographs. The course requires the ability to use differential calculus in several variables and linear algebra.","campus":"UTSG"},{"courseID":"UTSG-CSC320H","code":"CSC320H","name":"Introduction to Visual Computing","description":"Image synthesis and image analysis aimed at students with an interest in computer graphics, computer vision, or the visual arts. Focus on three major topics: (1) visual computing principles—computational and mathematical methods for creating, capturing, analyzing, and manipulating digital photographs (image acquisition, basic image processing, image warping, anti-aliasing); (2) digital special effects—applying these principles to create special effects found in movies and commercials; (3) visual programming—using C/C++ and OpenGL to create graphical user interfaces for synthesizing and manipulating photographs. The course requires the ability to use differential calculus in several variables and linear algebra.","campus":"UTSG"},{"courseID":"UTSG-CSC321H","code":"CSC321H","name":"Introduction to Neural Networks and Machine Learning","description":"The first half of the course is about supervised learning for regression and classification problems and will include the perceptron learning procedure, backpropagation, and methods for ensuring good generalisation to new data. The second half of the course is about unsupervised learning methods that discover hidden causes and will include K-means, the EM algorithm, Boltzmann machines, and deep belief nets.","campus":"UTSG"},{"courseID":"UTSG-CSC321H","code":"CSC321H","name":"Introduction to Neural Networks and Machine Learning","description":"The first half of the course is about supervised learning for regression and classification problems and will include the perceptron learning procedure, backpropagation, and methods for ensuring good generalisation to new data. The second half of the course is about unsupervised learning methods that discover hidden causes and will include K-means, the EM algorithm, Boltzmann machines, and deep belief nets.","campus":"UTSG"},{"courseID":"UTM-CSC321H","code":"CSC321H","name":"Introduction to Neural Networks and Machine Learning","description":"The first half of the course is about supervised learning for regression and classification problems and will include the perceptron learning procedure, backpropagation, and methods for ensuring good generalisation to new data. The second half of the course is about unsupervised learning methods that discover hidden causes and will include Kmeans, the EM algorithm, Boltzmann machines, and deep belief nets. [24L, 12T] Priority is given to students enrolled in Computer Science Specialist, Information Security Specialist, Bioinformatics Specialist or Computer Science Major programs.","campus":"UTM"},{"courseID":"UTSG-CSC324H","code":"CSC324H","name":"Principles of Programming Languages","description":"Programming principles common in modern languages; details of commonly used paradigms. The structure and meaning of code. Scope, control flow, datatypes, and parameter passing. Two non-procedural, non-object-oriented programming paradigms: functional programming (illustrated by languages such as Lisp/Scheme, ML or Haskell) and logic programming (typically illustrated in Prolog).","campus":"UTSG"},{"courseID":"UTSG-CSC324H","code":"CSC324H","name":"Principles of Programming Languages","description":"Programming principles common in modern languages; details of commonly used paradigms. The structure and meaning of code. Scope, control flow, datatypes, and parameter passing. Two non-procedural, non-object-oriented programming paradigms: functional programming (illustrated by languages such as Lisp/Scheme, ML or Haskell) and logic programming (typically illustrated in Prolog).","campus":"UTSG"},{"courseID":"UTSG-CSC324H","code":"CSC324H","name":"Principles of Programming Languages","description":"Programming principles common in modern languages; details of commonly used paradigms. The structure and meaning of code. Scope, control flow, datatypes, and parameter passing. Two non-procedural, non-object-oriented programming paradigms: functional programming (illustrated by languages such as Lisp/Scheme, ML or Haskell) and logic programming (typically illustrated in Prolog).","campus":"UTSG"},{"courseID":"UTSG-CSC324H","code":"CSC324H","name":"Principles of Programming Languages","description":"Programming principles common in modern languages; details of commonly used paradigms. The structure and meaning of code. Scope, control flow, datatypes, and parameter passing. Two non-procedural, non-object-oriented programming paradigms: functional programming (illustrated by languages such as Lisp/Scheme, ML or Haskell) and logic programming (typically illustrated in Prolog).","campus":"UTSG"},{"courseID":"UTSG-CSC324H","code":"CSC324H","name":"Principles of Programming Languages","description":"Programming principles common in modern languages; details of commonly used paradigms. The structure and meaning of code. Scope, control flow, datatypes, and parameter passing. Two non-procedural, non-object-oriented programming paradigms: functional programming (illustrated by languages such as Lisp/Scheme, ML or Haskell) and logic programming (typically illustrated in Prolog).","campus":"UTSG"},{"courseID":"UTSG-CSC324H","code":"CSC324H","name":"Principles of Programming Languages","description":"Programming principles common in modern languages; details of commonly used paradigms. The structure and meaning of code. Scope, control flow, datatypes, and parameter passing. Two non-procedural, non-object-oriented programming paradigms: functional programming (illustrated by languages such as Lisp/Scheme, ML or Haskell) and logic programming (typically illustrated in Prolog).","campus":"UTSG"},{"courseID":"UTM-CSC324H","code":"CSC324H","name":"Principles of Programming Languages","description":"Major topics in the development of modern programming languages. Syntax specification, type systems, type inference, exception handling, information hiding, structural recursion, run-time storage management, and programming paradigms. Two non-procedural programming paradigms: functional programming (illustrated by languages such as Lisp, Scheme, ML or Haskell) and logic programming (illustrated by languages such as Prolog, XSB or Coral). [24L, 12T] Priority is given to students enrolled in Computer Science Specialist, Information Security Specialist, Bioinformatics Specialist or Computer Science Major programs.","campus":"UTM"},{"courseID":"UTM-CSC324H","code":"CSC324H","name":"Principles of Programming Languages","description":"Major topics in the development of modern programming languages. Syntax specification, type systems, type inference, exception handling, information hiding, structural recursion, run-time storage management, and programming paradigms. Two non-procedural programming paradigms: functional programming (illustrated by languages such as Lisp, Scheme, ML or Haskell) and logic programming (illustrated by languages such as Prolog, XSB or Coral). [24L, 12T] Priority is given to students enrolled in Computer Science Specialist, Information Security Specialist, Bioinformatics Specialist or Computer Science Major programs.","campus":"UTM"},{"courseID":"UTM-CSC324H","code":"CSC324H","name":"Principles of Programming Languages","description":"Major topics in the development of modern programming languages. Syntax specification, type systems, type inference, exception handling, information hiding, structural recursion, run-time storage management, and programming paradigms. Two non-procedural programming paradigms: functional programming (illustrated by languages such as Lisp, Scheme, ML or Haskell) and logic programming (illustrated by languages such as Prolog, XSB or Coral). [24L, 12P] Priority is given to students enrolled in Computer Science Specialist, Information Security Specialist, Bioinformatics Specialist or Computer Science Major programs.","campus":"UTM"},{"courseID":"UTSG-CSC326H","code":"CSC326H","name":"Programming Languages","description":"Study of programming styles and paradigms. Included are object-oriented scripting functional and logic-based approaches. Languages that support these programming styles will be introduced. Languages treated include Python, Lisp or Scheme and Prolog.","campus":"UTSG"},{"courseID":"UTSG-CSC326H","code":"CSC326H","name":"Programming Languages","description":"Study of programming styles and paradigms. Included are object-oriented scripting functional and logic-based approaches. Languages that support these programming styles will be introduced. Languages treated include Python, Lisp or Scheme and Prolog.","campus":"UTSG"},{"courseID":"UTSG-CSC326H","code":"CSC326H","name":"Programming Languages","description":"Study of programming styles and paradigms. Included are object-oriented scripting functional and logic-based approaches. Languages that support these programming styles will be introduced. Languages treated include Python, Lisp or Scheme and Prolog.","campus":"UTSG"},{"courseID":"UTM-CSC333H","code":"CSC333H","name":"Forensic Computing","description":"Introduction to the tools and techniques of the digital detective. Electronic discovery of digital data, including field investigation methods of the computer crime scene. Focus on the computer science behind computer forensics, network forensics and data forensics. Forensic topics include: computer structure, data acquisition from storage media, file system analysis, network intrusion detection, electronic evidence, Canadian computer crime case law. [24L, 12T]","campus":"UTM"},{"courseID":"UTSG-CSC336H","code":"CSC336H","name":"Numerical Methods","description":"The study of computational methods for solving problems in linear algebra, non-linear equations, and approximation. The aim is to give students a basic understanding of both floating-point arithmetic and the implementation of algorithms used to solve numerical problems, as well as a familiarity with current numerical computing environments.","campus":"UTSG"},{"courseID":"UTSG-CSC336H","code":"CSC336H","name":"Numerical Methods","description":"The study of computational methods for solving problems in linear algebra, non-linear equations, and approximation. The aim is to give students a basic understanding of both floating-point arithmetic and the implementation of algorithms used to solve numerical problems, as well as a familiarity with current numerical computing environments.","campus":"UTSG"},{"courseID":"UTSG-CSC336H","code":"CSC336H","name":"Numerical Methods","description":"The study of computational methods for solving problems in linear algebra, non-linear equations, and approximation. The aim is to give students a basic understanding of both floating-point arithmetic and the implementation of algorithms used to solve numerical problems, as well as a familiarity with current numerical computing environments.","campus":"UTSG"},{"courseID":"UTSG-CSC336H","code":"CSC336H","name":"Numerical Methods","description":"The study of computational methods for solving problems in linear algebra, non-linear equations, and approximation. The aim is to give students a basic understanding of both floating-point arithmetic and the implementation of algorithms used to solve numerical problems, as well as a familiarity with current numerical computing environments.","campus":"UTSG"},{"courseID":"UTSG-CSC336H","code":"CSC336H","name":"Numerical Methods","description":"The study of computational methods for solving problems in linear algebra, non-linear equations, and approximation. The aim is to give students a basic understanding of both floating-point arithmetic and the implementation of algorithms used to solve numerical problems, as well as a familiarity with current numerical computing environments.","campus":"UTSG"},{"courseID":"UTSG-CSC336H","code":"CSC336H","name":"Numerical Methods","description":"The study of computational methods for solving problems in linear algebra, non-linear equations, and approximation. The aim is to give students a basic understanding of both floating-point arithmetic and the implementation of algorithms used to solve numerical problems, as well as a familiarity with current numerical computing environments.","campus":"UTSG"},{"courseID":"UTM-CSC338H","code":"CSC338H","name":"Numerical Methods","description":"Computational methods for solving numerical problems in science, engineering and business. Linear and non-linear equations, approximation, optimization, interpolation,integration and differentiation. The aim is to give students a basic understanding of floating-point arithmetic and the implementation of algorithms used to solve numericalproblems, as well as a familiarity with current numerical computing environments.Course concepts are crucial to a wide range of practical applications such as computational finance and portfolio management, graphics and special effects, data mining and machine learning, as well as robotics, bioinformatics, medical imaging and others. [24L, 12T] Priority is given to students enrolled in Computer Science Specialist, Information Security Specialist, Bioinformatics Specialist or Computer Science Major programs.","campus":"UTM"},{"courseID":"UTM-CSC338H","code":"CSC338H","name":"Numerical Methods","description":"Computational methods for solving numerical problems in science, engineering and business. Linear and non-linear equations, approximation, optimization, interpolation,integration and differentiation. The aim is to give students a basic understanding of floating-point arithmetic and the implementation of algorithms used to solve numericalproblems, as well as a familiarity with current numerical computing environments.Course concepts are crucial to a wide range of practical applications such as computational finance and portfolio management, graphics and special effects, data mining and machine learning, as well as robotics, bioinformatics, medical imaging and others. [24L, 12T] Priority is given to students enrolled in Computer Science Specialist, Information Security Specialist, Bioinformatics Specialist or Computer Science Major programs.","campus":"UTM"},{"courseID":"UTM-CSC338H","code":"CSC338H","name":"Numerical Methods","description":"Computational methods for solving numerical problems in science, engineering and business. Linear and non-linear equations, approximation, optimization, interpolation,integration and differentiation. The aim is to give students a basic understanding of floating-point arithmetic and the implementation of algorithms used to solve numericalproblems, as well as a familiarity with current numerical computing environments.Course concepts are crucial to a wide range of practical applications such as computational finance and portfolio management, graphics and special effects, data mining and machine learning, as well as robotics, bioinformatics, medical imaging and others. [24L, 12T] Priority is given to students enrolled in Computer Science Specialist, Information Security Specialist, Bioinformatics Specialist or Computer Science Major programs.","campus":"UTM"},{"courseID":"UTSG-CSC343H","code":"CSC343H","name":"Introduction to Databases","description":"Introduction to database management systems. The relational data model. Relational algebra. Querying and updating databases: the query language SQL. Application programming with SQL. Integrity constraints, normal forms, and database design. Elements of database system technology: query processing, transaction management.","campus":"UTSG"},{"courseID":"UTSG-CSC343H","code":"CSC343H","name":"Introduction to Databases","description":"Introduction to database management systems. The relational data model. Relational algebra. Querying and updating databases: the query language SQL. Application programming with SQL. Integrity constraints, normal forms, and database design. Elements of database system technology: query processing, transaction management.","campus":"UTSG"},{"courseID":"UTSG-CSC343H","code":"CSC343H","name":"Introduction to Databases","description":"Introduction to database management systems. The relational data model. Relational algebra. Querying and updating databases: the query language SQL. Application programming with SQL. Integrity constraints, normal forms, and database design. Elements of database system technology: query processing, transaction management.","campus":"UTSG"},{"courseID":"UTSG-CSC343H","code":"CSC343H","name":"Introduction to Databases","description":"Introduction to database management systems. The relational data model. Relational algebra. Querying and updating databases: the query language SQL. Application programming with SQL. Integrity constraints, normal forms, and database design. Elements of database system technology: query processing, transaction management.","campus":"UTSG"},{"courseID":"UTSG-CSC343H","code":"CSC343H","name":"Introduction to Databases","description":"Introduction to database management systems. The relational data model. Relational algebra. Querying and updating databases: the query language SQL. Application programming with SQL. Integrity constraints, normal forms, and database design. Elements of database system technology: query processing, transaction management.","campus":"UTSG"},{"courseID":"UTSG-CSC343H","code":"CSC343H","name":"Introduction to Databases","description":"Introduction to database management systems. The relational data model. Relational algebra. Querying and updating databases: the query language SQL. Application programming with SQL. Integrity constraints, normal forms, and database design. Elements of database system technology: query processing, transaction management.","campus":"UTSG"},{"courseID":"UTSG-CSC343H","code":"CSC343H","name":"Introduction to Databases","description":"Introduction to database management systems. The relational data model. Relational algebra. Querying and updating databases: the query language SQL. Application programming with SQL. Integrity constraints, normal forms, and database design. Elements of database system technology: query processing, transaction management.","campus":"UTSG"},{"courseID":"UTSG-CSC343H","code":"CSC343H","name":"Introduction to Databases","description":"Introduction to database management systems. The relational data model. Relational algebra. Querying and updating databases: the query language SQL. Application programming with SQL. Integrity constraints, normal forms, and database design. Elements of database system technology: query processing, transaction management.","campus":"UTSG"},{"courseID":"UTM-CSC343H","code":"CSC343H","name":"Introduction to Databases","description":"Introduction to database management systems. The relational data model. Relational algebra. Querying and updating databases: the query language SQL. Application programming with SQL. Integrity constraints, normal forms, and database design. Elements of database system technology: query processing, transaction management. [24L, 12T] Priority is given to students enrolled in Computer Science Specialist, Information Security Specialist, Bioinformatics Specialist or Computer Science Major programs.","campus":"UTM"},{"courseID":"UTM-CSC343H","code":"CSC343H","name":"Introduction to Databases","description":"Introduction to database management systems. The relational data model. Relational algebra. Querying and updating databases: the query language SQL. Application programming with SQL. Integrity constraints, normal forms, and database design. Elements of database system technology: query processing, transaction management. [24L, 12T] Priority is given to students enrolled in Computer Science Specialist, Information Security Specialist, Bioinformatics Specialist or Computer Science Major programs.","campus":"UTM"},{"courseID":"UTM-CSC343H","code":"CSC343H","name":"Introduction to Databases","description":"Introduction to database management systems. The relational data model. Relational algebra. Querying and updating databases: the query language SQL. Application programming with SQL. Integrity constraints, normal forms, and database design. Elements of database system technology: query processing, transaction management. [24L, 12P] Priority is given to students enrolled in Computer Science Specialist, Information Security Specialist, Bioinformatics Specialist or Computer Science Major programs.","campus":"UTM"},{"courseID":"UTM-CSC343H","code":"CSC343H","name":"Introduction to Databases","description":"Introduction to database management systems. The relational data model. Relational algebra. Querying and updating databases: the query language SQL. Application programming with SQL. Integrity constraints, normal forms, and database design. Elements of database system technology: query processing, transaction management. [24L, 12T] Priority is given to students enrolled in Computer Science Specialist, Information Security Specialist, Bioinformatics Specialist or Computer Science Major programs.","campus":"UTM"},{"courseID":"UTM-CSC343H","code":"CSC343H","name":"Introduction to Databases","description":"Introduction to database management systems. The relational data model. Relational algebra. Querying and updating databases: the query language SQL. Application programming with SQL. Integrity constraints, normal forms, and database design. Elements of database system technology: query processing, transaction management. [24L, 12P] Priority is given to students enrolled in Computer Science Specialist, Information Security Specialist, Bioinformatics Specialist or Computer Science Major programs.","campus":"UTM"},{"courseID":"UTM-CSC347H","code":"CSC347H","name":"Introduction to Information Security","description":"An investigation of many aspects of modern information security. Major topics cover: Techniques to identify and avoid common software development flaws which leave software vulnerable to crackers. Utilizing modern operating systems security features to deploy software in a protected environment. Common threats to networks and networked computers and tools to deal with them. Cryptography and the role it plays in software development, systems security and network security. [24L, 12T] Priority is given to students enrolled in Computer Science Specialist, Information Security Specialist, Bioinformatics Specialist or Computer Science Major programs.","campus":"UTM"},{"courseID":"UTM-CSC347H","code":"CSC347H","name":"Introduction to Information Security","description":"An investigation of many aspects of modern information security. Major topics cover: Techniques to identify and avoid common software development flaws which leave software vulnerable to crackers. Utilizing modern operating systems security features to deploy software in a protected environment. Common threats to networks and networked computers and tools to deal with them. Cryptography and the role it plays in software development, systems security and network security. [24L, 12T] Priority is given to students enrolled in Computer Science Specialist, Information Security Specialist, Bioinformatics Specialist or Computer Science Major programs.","campus":"UTM"},{"courseID":"UTM-CSC347H","code":"CSC347H","name":"Introduction to Information Security","description":"An investigation of many aspects of modern information security. Major topics cover: Techniques to identify and avoid common software development flaws which leave software vulnerable to crackers. Utilizing modern operating systems security features to deploy software in a protected environment. Common threats to networks and networked computers and tools to deal with them. Cryptography and the role it plays in software development, systems security and network security. [24L, 12P] Priority is given to students enrolled in Computer Science Specialist, Information Security Specialist, Bioinformatics Specialist or Computer Science Major programs.","campus":"UTM"},{"courseID":"UTSG-CSC358H","code":"CSC358H","name":"Principles of Computer Networks","description":"Introduction to computer networks with an emphasis on fundamental principles. Basic understanding of computer networks and network protocols. Topics include network hardware and software, routing, addressing, congestion control, reliable data transfer, performance analysis, local area networks, and TCP/IP.","campus":"UTSG"},{"courseID":"UTSG-CSC358H","code":"CSC358H","name":"Principles of Computer Networks","description":"Introduction to computer networks with an emphasis on fundamental principles. Basic understanding of computer networks and network protocols. Topics include network hardware and software, routing, addressing, congestion control, reliable data transfer, performance analysis, local area networks, and TCP/IP.","campus":"UTSG"},{"courseID":"UTSG-CSC358H","code":"CSC358H","name":"Principles of Computer Networks","description":"Introduction to computer networks with an emphasis on fundamental principles. Basic understanding of computer networks and network protocols. Topics include network hardware and software, routing, addressing, congestion control, reliable data transfer, performance analysis, local area networks, and TCP/IP.","campus":"UTSG"},{"courseID":"UTM-CSC358H","code":"CSC358H","name":"Principles of Computer Networks","description":"Introduction to computer networks and systems programming of networks. Basic understanding of computer networks and network protocols. Network hardware and software, routing, addressing, congestion control, reliable data transfer, and socket programming. [24L,12P] Priority is given to students enrolled in Computer Science Specialist, Information Security Specialist, Bioinformatics Specialist or Computer Science Major programs.","campus":"UTM"},{"courseID":"UTM-CSC358H","code":"CSC358H","name":"Principles of Computer Networks","description":"Introduction to computer networks and systems programming of networks. Basic understanding of computer networks and network protocols. Network hardware and software, routing, addressing, congestion control, reliable data transfer, and socket programming. [24L,12P] Priority is given to students enrolled in Computer Science Specialist, Information Security Specialist, Bioinformatics Specialist or Computer Science Major programs.","campus":"UTM"},{"courseID":"UTM-CSC358H","code":"CSC358H","name":"Principles of Computer Networks","description":"Introduction to computer networks and systems programming of networks. Basic understanding of computer networks and network protocols. Network hardware and software, routing, addressing, congestion control, reliable data transfer, and socket programming. [24L,12P] Priority is given to students enrolled in Computer Science Specialist, Information Security Specialist, Bioinformatics Specialist or Computer Science Major programs.","campus":"UTM"},{"courseID":"UTM-CSC363H","code":"CSC363H","name":"Computational Complexity and Computability","description":"Introduction to the theory of computability: Turing machines, Church's thesis, computable and non-computable functions, recursive and recursively enumerable sets, reducibility. Introduction to complexity theory: models of computation, P, NP, polynomial time reducibility, NP-completeness, further topics in complexity theory. [24L, 12T] Priority is given to students enrolled in Computer Science Specialist, Information Security Specialist, Bioinformatics Specialist or Computer Science Major programs.","campus":"UTM"},{"courseID":"UTM-CSC363H","code":"CSC363H","name":"Computational Complexity and Computability","description":"Introduction to the theory of computability: Turing machines, Church's thesis, computable and non-computable functions, recursive and recursively enumerable sets, reducibility. Introduction to complexity theory: models of computation, P, NP, polynomial time reducibility, NP-completeness, further topics in complexity theory. [24L, 12T] Priority is given to students enrolled in Computer Science Specialist, Information Security Specialist, Bioinformatics Specialist or Computer Science Major programs.","campus":"UTM"},{"courseID":"UTM-CSC363H","code":"CSC363H","name":"Computational Complexity and Computability","description":"Introduction to the theory of computability: Turing machines, Church's thesis, computable and non-computable functions, recursive and recursively enumerable sets, reducibility. Introduction to complexity theory: models of computation, P, NP, polynomial time reducibility, NP-completeness, further topics in complexity theory. [24L, 12T] Priority is given to students enrolled in Computer Science Specialist, Information Security Specialist, Bioinformatics Specialist or Computer Science Major programs.","campus":"UTM"},{"courseID":"UTSG-CSC367H","code":"CSC367H","name":"Parallel Programming","description":"Introduction to aspects of parallel programming. Topics include computer instruction execution, instruction-level parallelism, memory system performance, task and data parallelism, parallel models (shared memory, message passing), synchronization, scalability and Amdahl's law, Flynn taxonomy, vector processing and parallel computing architectures.","campus":"UTSG"},{"courseID":"UTSG-CSC367H","code":"CSC367H","name":"Parallel Programming","description":"Introduction to aspects of parallel programming. Topics include computer instruction execution, instruction-level parallelism, memory system performance, task and data parallelism, parallel models (shared memory, message passing), synchronization, scalability and Amdahl's law, Flynn taxonomy, vector processing and parallel computing architectures.","campus":"UTSG"},{"courseID":"UTSG-CSC369H","code":"CSC369H","name":"Operating Systems","description":"Principles of operating systems. The operating system as a control program and as a resource allocator. The concept of a process and concurrency problems: synchronization, mutual exclusion, deadlock. Additional topics include memory management, file systems, process scheduling, threads, and protection.","campus":"UTSG"},{"courseID":"UTSG-CSC369H","code":"CSC369H","name":"Operating Systems","description":"Principles of operating systems. The operating system as a control program and as a resource allocator. The concept of a process and concurrency problems: synchronization, mutual exclusion, deadlock. Additional topics include memory management, file systems, process scheduling, threads, and protection.","campus":"UTSG"},{"courseID":"UTSG-CSC369H","code":"CSC369H","name":"Operating Systems","description":"Principles of operating systems. The operating system as a control program and as a resource allocator. The concept of a process and concurrency problems: synchronization, mutual exclusion, deadlock. Additional topics include memory management, file systems, process scheduling, threads, and protection.","campus":"UTSG"},{"courseID":"UTSG-CSC369H","code":"CSC369H","name":"Operating Systems","description":"Principles of operating systems. The operating system as a control program and as a resource allocator. The concept of a process and concurrency problems: synchronization, mutual exclusion, deadlock. Additional topics include memory management, file systems, process scheduling, threads, and protection.","campus":"UTSG"},{"courseID":"UTSG-CSC369H","code":"CSC369H","name":"Operating Systems","description":"Principles of operating systems. The operating system as a control program and as a resource allocator. The concept of a process and concurrency problems: synchronization, mutual exclusion, deadlock. Additional topics include memory management, file systems, process scheduling, threads, and protection.","campus":"UTSG"},{"courseID":"UTSG-CSC369H","code":"CSC369H","name":"Operating Systems","description":"Principles of operating systems. The operating system as a control program and as a resource allocator. The concept of a process and concurrency problems: synchronization, mutual exclusion, deadlock. Additional topics include memory management, file systems, process scheduling, threads, and protection.","campus":"UTSG"},{"courseID":"UTSG-CSC369H","code":"CSC369H","name":"Operating Systems","description":"Principles of operating systems. The operating system as a control program and as a resource allocator. The concept of a process and concurrency problems: synchronization, mutual exclusion, deadlock. Additional topics include memory management, file systems, process scheduling, threads, and protection.","campus":"UTSG"},{"courseID":"UTSG-CSC369H","code":"CSC369H","name":"Operating Systems","description":"Principles of operating systems. The operating system as a control program and as a resource allocator. The concept of a process and concurrency problems: synchronization, mutual exclusion, deadlock. Additional topics include memory management, file systems, process scheduling, threads, and protection.","campus":"UTSG"},{"courseID":"UTM-CSC369H","code":"CSC369H","name":"Operating Systems","description":"Principles of operating systems. The operating system as a control program and as a resource allocator. Core topics: processes and threads, concurrency (synchronization, mutual exclusion, deadlock), processor, scheduling, memory management, file systems, and protection. [24L, 12T] Priority is given to students enrolled in Computer Science Specialist, Information Security Specialist, Bioinformatics Specialist or Computer Science Major programs.","campus":"UTM"},{"courseID":"UTM-CSC369H","code":"CSC369H","name":"Operating Systems","description":"Principles of operating systems. The operating system as a control program and as a resource allocator. Core topics: processes and threads, concurrency (synchronization, mutual exclusion, deadlock), processor, scheduling, memory management, file systems, and protection. [24L, 12T] Priority is given to students enrolled in Computer Science Specialist, Information Security Specialist, Bioinformatics Specialist or Computer Science Major programs.","campus":"UTM"},{"courseID":"UTM-CSC369H","code":"CSC369H","name":"Operating Systems","description":"Principles of operating systems. The operating system as a control program and as a resource allocator. Core topics: processes and threads, concurrency (synchronization, mutual exclusion, deadlock), processor, scheduling, memory management, file systems, and protection. [24L, 12P] Priority is given to students enrolled in Computer Science Specialist, Information Security Specialist, Bioinformatics Specialist or Computer Science Major programs.","campus":"UTM"},{"courseID":"UTSG-CSC373H","code":"CSC373H","name":"Algorithm Design, Analysis & Complexity","description":"Standard algorithm design techniques: divide-and-conquer, greedy strategies, dynamic programming, linear programming, randomization, network flows, approximation algorithms.  Brief introduction to NP-completeness: polynomial time reductions, examples of various NP-complete problems, self-reducibility.  Additional topics may include approximation and randomized algorithms.  Students will be expected to show good design principles and adequate skills at reasoning about the correctness and complexity of algorithms.","campus":"UTSG"},{"courseID":"UTSG-CSC373H","code":"CSC373H","name":"Algorithm Design, Analysis & Complexity","description":"Standard algorithm design techniques: divide-and-conquer, greedy strategies, dynamic programming, linear programming, randomization, network flows, approximation algorithms. Brief introduction to NP-completeness: polynomial time reductions, examples of various NP-complete problems, self-reducibility. Additional topics may include approximation and randomized algorithms. Students will be expected to show good design principles and adequate skills at reasoning about the correctness and complexity of algorithms.","campus":"UTSG"},{"courseID":"UTSG-CSC373H","code":"CSC373H","name":"Algorithm Design, Analysis & Complexity","description":"Standard algorithm design techniques: divide-and-conquer, greedy strategies, dynamic programming, linear programming, randomization, network flows, approximation algorithms. Brief introduction to NP-completeness: polynomial time reductions, examples of various NP-complete problems, self-reducibility. Additional topics may include approximation and randomized algorithms. Students will be expected to show good design principles and adequate skills at reasoning about the correctness and complexity of algorithms.","campus":"UTSG"},{"courseID":"UTSG-CSC373H","code":"CSC373H","name":"Algorithm Design, Analysis & Complexity","description":"Standard algorithm design techniques: divide-and-conquer, greedy strategies, dynamic programming, linear programming, randomization, network flows, approximation algorithms.  Brief introduction to NP-completeness: polynomial time reductions, examples of various NP-complete problems, self-reducibility.  Additional topics may include approximation and randomized algorithms.  Students will be expected to show good design principles and adequate skills at reasoning about the correctness and complexity of algorithms.","campus":"UTSG"},{"courseID":"UTSG-CSC373H","code":"CSC373H","name":"Algorithm Design, Analysis & Complexity","description":"Standard algorithm design techniques: divide-and-conquer, greedy strategies, dynamic programming, linear programming, randomization, network flows, approximation algorithms. Brief introduction to NP-completeness: polynomial time reductions, examples of various NP-complete problems, self-reducibility. Additional topics may include approximation and randomized algorithms. Students will be expected to show good design principles and adequate skills at reasoning about the correctness and complexity of algorithms.","campus":"UTSG"},{"courseID":"UTSG-CSC373H","code":"CSC373H","name":"Algorithm Design, Analysis & Complexity","description":"Standard algorithm design techniques: divide-and-conquer, greedy strategies, dynamic programming, linear programming, randomization, network flows, approximation algorithms. Brief introduction to NP-completeness: polynomial time reductions, examples of various NP-complete problems, self-reducibility. Additional topics may include approximation and randomized algorithms. Students will be expected to show good design principles and adequate skills at reasoning about the correctness and complexity of algorithms.","campus":"UTSG"},{"courseID":"UTSG-CSC373H","code":"CSC373H","name":"Algorithm Design, Analysis & Complexity","description":"Standard algorithm design techniques: divide-and-conquer, greedy strategies, dynamic programming, linear programming, randomization, network flows, approximation algorithms. Brief introduction to NP-completeness: polynomial time reductions, examples of various NP-complete problems, self-reducibility. Additional topics may include approximation and randomized algorithms. Students will be expected to show good design principles and adequate skills at reasoning about the correctness and complexity of algorithms.","campus":"UTSG"},{"courseID":"UTSG-CSC373H","code":"CSC373H","name":"Algorithm Design, Analysis & Complexity","description":"Standard algorithm design techniques: divide-and-conquer, greedy strategies, dynamic programming, linear programming, randomization, network flows, approximation algorithms. Brief introduction to NP-completeness: polynomial time reductions, examples of various NP-complete problems, self-reducibility. Additional topics may include approximation and randomized algorithms. Students will be expected to show good design principles and adequate skills at reasoning about the correctness and complexity of algorithms.","campus":"UTSG"},{"courseID":"UTM-CSC373H","code":"CSC373H","name":"Algorithm Design and Analysis","description":"Standard algorithm design techniques: divide-and-conquer, greedy strategies, dynamic programming, linear programming, randomization, network flows, approximation algorithms and others (if time permits). Students will be expected to show good design principles and adequate skills at reasoning about the correctness and complexity of algorithms. [24L, 12T] Priority is given to students enrolled in Computer Science Specialist, Information Security Specialist, Bioinformatics Specialist or Computer Science Major programs.","campus":"UTM"},{"courseID":"UTM-CSC373H","code":"CSC373H","name":"Algorithm Design and Analysis","description":"Standard algorithm design techniques: divide-and-conquer, greedy strategies, dynamic programming, linear programming, randomization, network flows, approximation algorithms and others (if time permits). Students will be expected to show good design principles and adequate skills at reasoning about the correctness and complexity of algorithms. [24L, 12T] Priority is given to students enrolled in Computer Science Specialist, Information Security Specialist, Bioinformatics Specialist or Computer Science Major programs.","campus":"UTM"},{"courseID":"UTM-CSC373H","code":"CSC373H","name":"Algorithm Design and Analysis","description":"Standard algorithm design techniques: divide-and-conquer, greedy strategies, dynamic programming, linear programming, randomization, network flows, approximation algorithms and others (if time permits). Students will be expected to show good design principles and adequate skills at reasoning about the correctness and complexity of algorithms. [24L, 12T] Priority is given to students enrolled in Computer Science Specialist, Information Security Specialist, Bioinformatics Specialist or Computer Science Major programs.","campus":"UTM"},{"courseID":"UTSG-CSC384H","code":"CSC384H","name":"Introduction to Artificial Intelligence","description":"Theories and algorithms that capture (or approximate) some of the core elements of computational intelligence. Topics include: search; logical representations and reasoning, classical automated planning, representing and reasoning with uncertainty, learning, decision making (planning) under uncertainty. Assignments provide practical experience, in both theory and programming, of the core topics.","campus":"UTSG"},{"courseID":"UTSG-CSC384H","code":"CSC384H","name":"Introduction to Artificial Intelligence","description":"Theories and algorithms that capture (or approximate) some of the core elements of computational intelligence. Topics include: search; logical representations and reasoning, classical automated planning, representing and reasoning with uncertainty, learning, decision making (planning) under uncertainty. Assignments provide practical experience, in both theory and programming, of the core topics.","campus":"UTSG"},{"courseID":"UTSG-CSC384H","code":"CSC384H","name":"Introduction to Artificial Intelligence","description":"Theories and algorithms that capture (or approximate) some of the core elements of computational intelligence. Topics include: search; logical representations and reasoning, classical automated planning, representing and reasoning with uncertainty, learning, decision making (planning) under uncertainty. Assignments provide practical experience, in both theory and programming, of the core topics.","campus":"UTSG"},{"courseID":"UTSG-CSC384H","code":"CSC384H","name":"Introduction to Artificial Intelligence","description":"Theories and algorithms that capture (or approximate) some of the core elements of computational intelligence. Topics include: search; logical representations and reasoning, classical automated planning, representing and reasoning with uncertainty, learning, decision making (planning) under uncertainty. Assignments provide practical experience, in both theory and programming, of the core topics.","campus":"UTSG"},{"courseID":"UTSG-CSC384H","code":"CSC384H","name":"Introduction to Artificial Intelligence","description":"Theories and algorithms that capture (or approximate) some of the core elements of computational intelligence. Topics include: search; logical representations and reasoning, classical automated planning, representing and reasoning with uncertainty, learning, decision making (planning) under uncertainty. Assignments provide practical experience, in both theory and programming, of the core topics.","campus":"UTSG"},{"courseID":"UTSG-CSC384H","code":"CSC384H","name":"Introduction to Artificial Intelligence","description":"Theories and algorithms that capture (or approximate) some of the core elements of computational intelligence. Topics include: search; logical representations and reasoning, classical automated planning, representing and reasoning with uncertainty, learning, decision making (planning) under uncertainty. Assignments provide practical experience, in both theory and programming, of the core topics.","campus":"UTSG"},{"courseID":"UTSG-CSC384H","code":"CSC384H","name":"Introduction to Artificial Intelligence","description":"Theories and algorithms that capture (or approximate) some of the core elements of computational intelligence. Topics include: search; logical representations and reasoning, classical automated planning, representing and reasoning with uncertainty, learning, decision making (planning) under uncertainty. Assignments provide practical experience, in both theory and programming, of the core topics.","campus":"UTSG"},{"courseID":"UTSG-CSC384H","code":"CSC384H","name":"Introduction to Artificial Intelligence","description":"Theories and algorithms that capture (or approximate) some of the core elements of computational intelligence. Topics include: search; logical representations and reasoning, classical automated planning, representing and reasoning with uncertainty, learning, decision making (planning) under uncertainty. Assignments provide practical experience, in both theory and programming, of the core topics.","campus":"UTSG"},{"courseID":"UTM-CSC384H","code":"CSC384H","name":"Introduction to Artificial Intelligence","description":"A broad introduction to the sub-disciplines of AI. Core topics: search methods, game playing and rule-based systems. Overview of: natural language understanding, knowledge representation, reasoning, planning, vision, robotics, learning and neural networks. Assignments provide practical experience, both theory and programming, of the core topics. [24L, 12T] Priority is given to students enrolled in Computer Science Specialist, Information Security Specialist, Bioinformatics Specialist or Computer Science Major programs.","campus":"UTM"},{"courseID":"UTM-CSC384H","code":"CSC384H","name":"Introduction to Artificial Intelligence","description":"A broad introduction to the sub-disciplines of AI. Core topics: search methods, game playing and rule-based systems. Overview of: natural language understanding, knowledge representation, reasoning, planning, vision, robotics, learning and neural networks. Assignments provide practical experience, both theory and programming, of the core topics. [24L, 12T] Priority is given to students enrolled in Computer Science Specialist, Information Security Specialist, Bioinformatics Specialist or Computer Science Major programs.","campus":"UTM"},{"courseID":"UTM-CSC384H","code":"CSC384H","name":"Introduction to Artificial Intelligence","description":"A broad introduction to the sub-disciplines of AI. Core topics: search methods, game playing and rule-based systems. Overview of: natural language understanding, knowledge representation, reasoning, planning, vision, robotics, learning and neural networks. Assignments provide practical experience, both theory and programming, of the core topics. [24L, 12T] Priority is given to students enrolled in Computer Science Specialist, Information Security Specialist, Bioinformatics Specialist or Computer Science Major programs.","campus":"UTM"},{"courseID":"UTSG-CSC385H","code":"CSC385H","name":"Microprocessor Systems","description":"Microprocessor and embedded systems: Software techniques for real-time task creation and management.  Connected device charachteristics and the hardware and software ramifications. System construction and management.  An examination of the issues unique to or particulaly important to embedded computing. Laboratory experiments provide \"hands on\" experience. An open team project is done in the last few laboratory sessions.","campus":"UTSG"},{"courseID":"UTSG-CSC385H","code":"CSC385H","name":"Microprocessor Systems","description":"Microprocessor and embedded systems: Software techniques for real-time task creation and management. Connected device charachteristics and the hardware and software ramifications. System construction and management. An examination of the issues unique to or particulaly important to embedded computing. Laboratory experiments provide \"hands on\" experience. An open team project is done in the last few laboratory sessions.","campus":"UTSG"},{"courseID":"UTSG-CSC385H","code":"CSC385H","name":"Microprocessor Systems","description":"Microprocessor and embedded systems: Software techniques for real-time task creation and management. Connected device charachteristics and the hardware and software ramifications. System construction and management. An examination of the issues unique to or particulaly important to embedded computing. Laboratory experiments provide \"hands on\" experience. An open team project is done in the last few laboratory sessions.","campus":"UTSG"},{"courseID":"UTM-CSC398H","code":"CSC398H","name":"Topics in Computer Science","description":"Introduction to a topic of current interest in computer science intended for CSC majors and specialists. Content will vary from year to year. Priority is given to students enrolled in Computer Science Specialist, Information Security Specialist, Bioinformatics Specialist or Computer Science Major programs.","campus":"UTM"},{"courseID":"UTM-CSC398H","code":"CSC398H","name":"Topics in Computer Science","description":"Introduction to a topic of current interest in computer science intended for CSC majors and specialists. Content will vary from year to year. Priority is given to students enrolled in Computer Science Specialist, Information Security Specialist, Bioinformatics Specialist or Computer Science Major programs.","campus":"UTM"},{"courseID":"UTM-CSC398H","code":"CSC398H","name":"Topics in Computer Science","description":"Introduction to a topic of current interest in computer science intended for CSC majors and specialists. Content will vary from year to year. Priority is given to students enrolled in Computer Science Specialist, Information Security Specialist, Bioinformatics Specialist or Computer Science Major programs.","campus":"UTM"},{"courseID":"UTM-CSC398H","code":"CSC398H","name":"Topics in Computer Science","description":"Introduction to a topic of current interest in computer science intended for CSC majors and specialists. Content will vary from year to year. Priority is given to students enrolled in Computer Science Specialist, Information Security Specialist, Bioinformatics Specialist or Computer Science Major programs.","campus":"UTM"},{"courseID":"UTM-CSC398H","code":"CSC398H","name":"Topics in Computer Science","description":"Introduction to a topic of current interest in computer science intended for CSC majors and specialists. Content will vary from year to year. Priority is given to students enrolled in Computer Science Specialist, Information Security Specialist, Bioinformatics Specialist or Computer Science Major programs.","campus":"UTM"},{"courseID":"UTM-CSC398H","code":"CSC398H","name":"Topics in Computer Science","description":"Introduction to a topic of current interest in computer science intended for CSC majors and specialists. Content will vary from year to year. Priority is given to students enrolled in Computer Science Specialist, Information Security Specialist, Bioinformatics Specialist or Computer Science Major programs.","campus":"UTM"},{"courseID":"UTM-CSC398H","code":"CSC398H","name":"Topics in Computer Science","description":"Introduction to a topic of current interest in computer science intended for CSC majors and specialists. Content will vary from year to year. Priority is given to students enrolled in Computer Science Specialist, Information Security Specialist, Bioinformatics Specialist or Computer Science Major programs.","campus":"UTM"},{"courseID":"UTM-CSC398H","code":"CSC398H","name":"Topics in Computer Science","description":"Introduction to a topic of current interest in computer science intended for CSC majors and specialists. Content will vary from year to year. Priority is given to students enrolled in Computer Science Specialist, Information Security Specialist, Bioinformatics Specialist or Computer Science Major programs.","campus":"UTM"},{"courseID":"UTSG-CSC399Y","code":"CSC399Y","name":"Research Opportunity Program","description":"Credit course for supervised participation in faculty research project. Details at http://www.artsci.utoronto.ca/current/course/rop. Not eligible for CR/NCR option.","campus":"UTSG"},{"courseID":"UTSG-CSC399Y","code":"CSC399Y","name":"Research Opportunity Program","description":"Credit course for supervised participation in faculty research project. Details at http://www.artsci.utoronto.ca/current/course/rop. Not eligible for CR/NCR option.","campus":"UTSG"},{"courseID":"UTSG-CSC399Y","code":"CSC399Y","name":"Research Opportunity Program","description":"Credit course for supervised participation in faculty research project. Details at http://www.artsci.utoronto.ca/current/course/rop. Not eligible for CR/NCR option.","campus":"UTSG"},{"courseID":"UTM-CSC399Y","code":"CSC399Y","name":"Research Opportunity Program","description":"This course provides a richly rewarding opportunity for students in their third or fourth year to work in the research project of a professor in return for 399Y course credit. Students enrolled have an opportunity to become involved in original research, learn research methods and share in the excitement and discovery of acquiring new knowledge. Participating faculty members post their project descriptions for the following summer and fall/winter sessions in early February and students are invited to apply in early March. See Experiential and International Opportunities for more details. Priority is given to students enrolled in Computer Science Specialist, Information Security Specialist, Bioinformatics Specialist or Computer Science Major programs.","campus":"UTM"},{"courseID":"UTM-CSC399Y","code":"CSC399Y","name":"Research Opportunity Program","description":"This course provides a richly rewarding opportunity for students in their third or fourth year to work in the research project of a professor in return for 399Y course credit. Students enrolled have an opportunity to become involved in original research, learn research methods and share in the excitement and discovery of acquiring new knowledge. Participating faculty members post their project descriptions for the following summer and fall/winter sessions in early February and students are invited to apply in early March. See Experiential and International Opportunities for more details. Priority is given to students enrolled in Computer Science Specialist, Information Security Specialist, Bioinformatics Specialist or Computer Science Major programs.","campus":"UTM"},{"courseID":"UTM-CSC399Y","code":"CSC399Y","name":"Research Opportunity Program","description":"This course provides a richly rewarding opportunity for students in their third or fourth year to work in the research project of a professor in return for 399Y course credit. Students enrolled have an opportunity to become involved in original research, learn research methods and share in the excitement and discovery of acquiring new knowledge. Participating faculty members post their project descriptions for the following summer and fall/winter sessions in early February and students are invited to apply in early March. See Experiential and International Opportunities for more details. Priority is given to students enrolled in Computer Science Specialist, Information Security Specialist, Bioinformatics Specialist or Computer Science Major programs.","campus":"UTM"},{"courseID":"UTM-CSC399Y","code":"CSC399Y","name":"Research Opportunity Program","description":"This course provides a richly rewarding opportunity for students in their third or fourth year to work in the research project of a professor in return for 399Y course credit. Students enrolled have an opportunity to become involved in original research, learn research methods and share in the excitement and discovery of acquiring new knowledge. Participating faculty members post their project descriptions for the following summer and fall/winter sessions in early February and students are invited to apply in early March. See Experiential and International Opportunities for more details. Priority is given to students enrolled in Computer Science Specialist, Information Security Specialist, Bioinformatics Specialist or Computer Science Major programs.","campus":"UTM"},{"courseID":"UTM-CSC399Y","code":"CSC399Y","name":"Research Opportunity Program","description":"This course provides a richly rewarding opportunity for students in their third or fourth year to work in the research project of a professor in return for 399Y course credit. Students enrolled have an opportunity to become involved in original research, learn research methods and share in the excitement and discovery of acquiring new knowledge. Participating faculty members post their project descriptions for the following summer and fall/winter sessions in early February and students are invited to apply in early March. See Experiential and International Opportunities for more details. Priority is given to students enrolled in Computer Science Specialist, Information Security Specialist, Bioinformatics Specialist or Computer Science Major programs.","campus":"UTM"},{"courseID":"UTM-CSC399Y","code":"CSC399Y","name":"Research Opportunity Program","description":"This course provides a richly rewarding opportunity for students in their third or fourth year to work in the research project of a professor in return for 399Y course credit. Students enrolled have an opportunity to become involved in original research, learn research methods and share in the excitement and discovery of acquiring new knowledge. Participating faculty members post their project descriptions for the following summer and fall/winter sessions in early February and students are invited to apply in early March. See Experiential and International Opportunities for more details. Priority is given to students enrolled in Computer Science Specialist, Information Security Specialist, Bioinformatics Specialist or Computer Science Major programs.","campus":"UTM"},{"courseID":"UTSG-CSC401H","code":"CSC401H","name":"Natural Language Computing","description":"Introduction to techniques involving natural language and speech in applications such as information retrieval, extraction, and filtering; intelligent Web searching; spelling and grammar checking; speech recognition and synthesis; and multi-lingual systems including machine translation. N-grams, POS-tagging, semantic distance metrics, indexing, on-line lexicons and thesauri, markup languages, collections of on-line documents, corpus analysis. PERL and other software.","campus":"UTSG"},{"courseID":"UTSG-CSC401H","code":"CSC401H","name":"Natural Language Computing","description":"Introduction to techniques involving natural language and speech in applications such as information retrieval, extraction, and filtering; intelligent Web searching; spelling and grammar checking; speech recognition and synthesis; and multi-lingual systems including machine translation. N-grams, POS-tagging, semantic distance metrics, indexing, on-line lexicons and thesauri, markup languages, collections of on-line documents, corpus analysis. PERL and other software.","campus":"UTSG"},{"courseID":"UTSG-CSC401H","code":"CSC401H","name":"Natural Language Computing","description":"Introduction to techniques involving natural language and speech in applications such as information retrieval, extraction, and filtering; intelligent Web searching; spelling and grammar checking; speech recognition and synthesis; and multi-lingual systems including machine translation. N-grams, POS-tagging, semantic distance metrics, indexing, on-line lexicons and thesauri, markup languages, collections of on-line documents, corpus analysis. PERL and other software.","campus":"UTSG"},{"courseID":"UTSG-CSC404H","code":"CSC404H","name":"Introduction to Video Game Design","description":"Concepts and techniques for the design and development of electronic games. History, social issues, and story elements. The business of game development and game promotion. Software engineering, artificial intelligence, and graphics elements. Level and model design. Audio elements. Practical assignments leading to team implementation of a complete game.","campus":"UTSG"},{"courseID":"UTSG-CSC404H","code":"CSC404H","name":"Introduction to Video Game Design","description":"Concepts and techniques for the design and development of electronic games. History, social issues, and story elements. The business of game development and game promotion. Software engineering, artificial intelligence, and graphics elements. Level and model design. Audio elements. Practical assignments leading to team implementation of a complete game.","campus":"UTSG"},{"courseID":"UTSG-CSC404H","code":"CSC404H","name":"Introduction to Video Game Design","description":"Concepts and techniques for the design and development of electronic games. History, social issues, and story elements. The business of game development and game promotion. Software engineering, artificial intelligence, and graphics elements. Level and model design. Audio elements. Practical assignments leading to team implementation of a complete game.","campus":"UTSG"},{"courseID":"UTSG-CSC404H","code":"CSC404H","name":"Introduction to Video Game Design","description":"Concepts and techniques for the design and development of electronic games. History, social issues, and story elements. The business of game development and game promotion. Software engineering, artificial intelligence, and graphics elements. Level and model design. Audio elements. Practical assignments leading to team implementation of a complete game.","campus":"UTSG"},{"courseID":"UTSG-CSC404H","code":"CSC404H","name":"Introduction to Video Game Design","description":"Concepts and techniques for the design and development of electronic games. History, social issues, and story elements. The business of game development and game promotion. Software engineering, artificial intelligence, and graphics elements. Level and model design. Audio elements. Practical assignments leading to team implementation of a complete game.","campus":"UTSG"},{"courseID":"UTSG-CSC404H","code":"CSC404H","name":"Introduction to Video Game Design","description":"Concepts and techniques for the design and development of electronic games. History, social issues, and story elements. The business of game development and game promotion. Software engineering, artificial intelligence, and graphics elements. Level and model design. Audio elements. Practical assignments leading to team implementation of a complete game.","campus":"UTSG"},{"courseID":"UTM-CSC409H","code":"CSC409H","name":"Scalable Computing","description":"We investigate computation in the large -- utilizing many CPUs with large amounts of memory, large storage and massive connectivity -- to solve computationally complex problems involving big data, serving large collections of users, in high availability, global settings. Our investigation covers both theoretical techniques and current, applied tools used to scale applications on the desktop and in the cloud. Topics include caching, load balancing, parallel computing and models of computation, redundancy, failover strategies, use of GPUs, and noSQL databases. [24L, 12T] Priority is given to students enrolled in Computer Science Specialist, Information Security Specialist, Bioinformatics Specialist or Computer Science Major programs.","campus":"UTM"},{"courseID":"UTSG-CSC410H","code":"CSC410H","name":"Software Testing and Verification","description":"Concepts and state-of-the-art techniques in quality assessment for software engineering; quality attributes; formal specifications and their analysis; testing, verification, and validation.","campus":"UTSG"},{"courseID":"UTSG-CSC410H","code":"CSC410H","name":"Software Testing and Verification","description":"Concepts and state-of-the-art techniques in quality assessment for software engineering; quality attributes; formal specifications and their analysis; testing, verification, and validation.","campus":"UTSG"},{"courseID":"UTSG-CSC410H","code":"CSC410H","name":"Software Testing and Verification","description":"Concepts and state-of-the-art techniques in quality assessment for software engineering; quality attributes; formal specifications and their analysis; testing, verification, and validation.","campus":"UTSG"},{"courseID":"UTSG-CSC411H","code":"CSC411H","name":"Machine Learning and Data Mining","description":"An introduction to methods for automated learning of relationships on the basis of empirical data. Classification and regression using nearest neighbour methods, decision trees, linear models, and neural networks. Clustering algorithms. Problems of overfitting and of assessing accuracy. Problems with handling large databases. Emphasis on statistical approaches.","campus":"UTSG"},{"courseID":"UTSG-CSC411H","code":"CSC411H","name":"Machine Learning and Data Mining","description":"An introduction to methods for automated learning of relationships on the basis of empirical data. Classification and regression using nearest neighbour methods, decision trees, linear models, and neural networks. Clustering algorithms. Problems of overfitting and of assessing accuracy. Problems with handling large databases. Emphasis on statistical approaches.","campus":"UTSG"},{"courseID":"UTSG-CSC411H","code":"CSC411H","name":"Machine Learning and Data Mining","description":"An introduction to methods for automated learning of relationships on the basis of empirical data. Classification and regression using nearest neighbour methods, decision trees, linear models, and neural networks. Clustering algorithms. Problems of overfitting and of assessing accuracy. Problems with handling large databases. Emphasis on statistical approaches.","campus":"UTSG"},{"courseID":"UTSG-CSC411H","code":"CSC411H","name":"Machine Learning and Data Mining","description":"An introduction to methods for automated learning of relationships on the basis of empirical data. Classification and regression using nearest neighbour methods, decision trees, linear models, and neural networks. Clustering algorithms. Problems of overfitting and of assessing accuracy. Problems with handling large databases. Emphasis on statistical approaches.","campus":"UTSG"},{"courseID":"UTSG-CSC411H","code":"CSC411H","name":"Machine Learning and Data Mining","description":"An introduction to methods for automated learning of relationships on the basis of empirical data. Classification and regression using nearest neighbour methods, decision trees, linear models, and neural networks. Clustering algorithms. Problems of overfitting and of assessing accuracy. Problems with handling large databases. Emphasis on statistical approaches.","campus":"UTSG"},{"courseID":"UTSG-CSC411H","code":"CSC411H","name":"Machine Learning and Data Mining","description":"An introduction to methods for automated learning of relationships on the basis of empirical data. Classification and regression using nearest neighbour methods, decision trees, linear models, and neural networks. Clustering algorithms. Problems of overfitting and of assessing accuracy. Problems with handling large databases. Emphasis on statistical approaches.","campus":"UTSG"},{"courseID":"UTM-CSC411H","code":"CSC411H","name":"Machine Learning and Data Mining","description":"An introduction to methods for automated learning of relationships on the basis of empirical data. Classification and regression using nearest neighbour methods, decision trees, linear models, and neural networks. Clustering algorithms. Problems of overfitting and of assessing accuracy. Problems with handling large databases. [24L, 12T] Priority is given to students enrolled in Computer Science Specialist, Information Security Specialist, Bioinformatics Specialist or Computer Science Major programs.","campus":"UTM"},{"courseID":"UTM-CSC411H","code":"CSC411H","name":"Machine Learning and Data Mining","description":"An introduction to methods for automated learning of relationships on the basis of empirical data. Classification and regression using nearest neighbour methods, decision trees, linear models, and neural networks. Clustering algorithms. Problems of overfitting and of assessing accuracy. Problems with handling large databases. [24L, 12T] Priority is given to students enrolled in Computer Science Specialist, Information Security Specialist, Bioinformatics Specialist or Computer Science Major programs.","campus":"UTM"},{"courseID":"UTSG-CSC412H","code":"CSC412H","name":"Probabilistic Learning and Reasoning","description":"An introduction to probability as a means of representing and reasoning with uncertain knowledge. Qualitative and quantitative specification of probability distributions using probabilistic graphical models. Algorithms for inference and probabilistic reasoning with graphical models. Statistical approaches and algorithms for learning probability models from empirical data. Applications of these models in artificial intelligence and machine learning.","campus":"UTSG"},{"courseID":"UTSG-CSC412H","code":"CSC412H","name":"Probabilistic Learning and Reasoning","description":"An introduction to probability as a means of representing and reasoning with uncertain knowledge. Qualitative and quantitative specification of probability distributions using probabilistic graphical models. Algorithms for inference and probabilistic reasoning with graphical models. Statistical approaches and algorithms for learning probability models from empirical data. Applications of these models in artificial intelligence and machine learning.","campus":"UTSG"},{"courseID":"UTSG-CSC412H","code":"CSC412H","name":"Probabilistic Learning and Reasoning","description":"An introduction to probability as a means of representing and reasoning with uncertain knowledge. Qualitative and quantitative specification of probability distributions using probabilistic graphical models. Algorithms for inference and probabilistic reasoning with graphical models. Statistical approaches and algorithms for learning probability models from empirical data. Applications of these models in artificial intelligence and machine learning.","campus":"UTSG"},{"courseID":"UTSG-CSC418H","code":"CSC418H","name":"Computer Graphics","description":"Identification and characterization of the objects manipulated in computer graphics, the operations possible on these objects, efficient algorithms to perform these operations, and interfaces to transform one type of object to another. Display devices, display data structures and procedures, graphical input, object modelling, transformations, illumination models, primary and secondary light effects; graphics packages and systems. Students, individually or in teams, implement graphical algorithms or entire graphics systems.","campus":"UTSG"},{"courseID":"UTSG-CSC418H","code":"CSC418H","name":"Computer Graphics","description":"Identification and characterization of the objects manipulated in computer graphics, the operations possible on these objects, efficient algorithms to perform these operations, and interfaces to transform one type of object to another. Display devices, display data structures and procedures, graphical input, object modelling, transformations, illumination models, primary and secondary light effects; graphics packages and systems. Students, individually or in teams, implement graphical algorithms or entire graphics systems.","campus":"UTSG"},{"courseID":"UTSG-CSC418H","code":"CSC418H","name":"Computer Graphics","description":"Identification and characterization of the objects manipulated in computer graphics, the operations possible on these objects, efficient algorithms to perform these operations, and interfaces to transform one type of object to another. Display devices, display data structures and procedures, graphical input, object modelling, transformations, illumination models, primary and secondary light effects; graphics packages and systems. Students, individually or in teams, implement graphical algorithms or entire graphics systems.","campus":"UTSG"},{"courseID":"UTSG-CSC418H","code":"CSC418H","name":"Computer Graphics","description":"Identification and characterization of the objects manipulated in computer graphics, the operations possible on these objects, efficient algorithms to perform these operations, and interfaces to transform one type of object to another. Display devices, display data structures and procedures, graphical input, object modelling, transformations, illumination models, primary and secondary light effects; graphics packages and systems. Students, individually or in teams, implement graphical algorithms or entire graphics systems.","campus":"UTSG"},{"courseID":"UTSG-CSC418H","code":"CSC418H","name":"Computer Graphics","description":"Identification and characterization of the objects manipulated in computer graphics, the operations possible on these objects, efficient algorithms to perform these operations, and interfaces to transform one type of object to another. Display devices, display data structures and procedures, graphical input, object modelling, transformations, illumination models, primary and secondary light effects; graphics packages and systems. Students, individually or in teams, implement graphical algorithms or entire graphics systems.","campus":"UTSG"},{"courseID":"UTSG-CSC418H","code":"CSC418H","name":"Computer Graphics","description":"Identification and characterization of the objects manipulated in computer graphics, the operations possible on these objects, efficient algorithms to perform these operations, and interfaces to transform one type of object to another. Display devices, display data structures and procedures, graphical input, object modelling, transformations, illumination models, primary and secondary light effects; graphics packages and systems. Students, individually or in teams, implement graphical algorithms or entire graphics systems.","campus":"UTSG"},{"courseID":"UTSG-CSC420H","code":"CSC420H","name":"Introduction to Image Understanding","description":"Introduction to basic concepts in computer vision. Extraction of image features at multiple scales. Robust estimation of model parameters. Multiview geometry and reconstruction. Image motion estimation and tracking. Object recognition. Topics in scene understanding as time permits.","campus":"UTSG"},{"courseID":"UTSG-CSC420H","code":"CSC420H","name":"Introduction to Image Understanding","description":"Introduction to basic concepts in computer vision. Extraction of image features at multiple scales. Robust estimation of model parameters. Multiview geometry and reconstruction. Image motion estimation and tracking. Object recognition. Topics in scene understanding as time permits.","campus":"UTSG"},{"courseID":"UTSG-CSC420H","code":"CSC420H","name":"Introduction to Image Understanding","description":"Introduction to basic concepts in computer vision. Extraction of image features at multiple scales. Robust estimation of model parameters. Multiview geometry and reconstruction. Image motion estimation and tracking. Object recognition. Topics in scene understanding as time permits.","campus":"UTSG"},{"courseID":"UTM-CSC420H","code":"CSC420H","name":"Introduction to Image Understanding","description":"This class is an introduction to fundamental concepts in image understanding, the sub-discipline of artificial intelligence that tries to make the computers \"see\". It will survey a variety of interesting vision problems and techniques. Specifically, the course will cover image formation, features, object and scene recognition and learning, multi-view geometry and video processing. It will also feature recognition with RGB-D data. The goal of the class will be to grasp a number of computer vision problems and understand basic approaches to tackle them for real-world applications. [24L, 12T] Priority is given to students enrolled in Computer Science Specialist, Information Security Specialist, Bioinformatics Specialist or Computer Science Major programs.","campus":"UTM"},{"courseID":"UTM-CSC420H","code":"CSC420H","name":"Introduction to Image Understanding","description":"This class is an introduction to fundamental concepts in image understanding, the sub-discipline of artificial intelligence that tries to make the computers \"see\". It will survey a variety of interesting vision problems and techniques. Specifically, the course will cover image formation, features, object and scene recognition and learning, multi-view geometry and video processing. It will also feature recognition with RGB-D data. The goal of the class will be to grasp a number of computer vision problems and understand basic approaches to tackle them for real-world applications. [24L, 12T] Priority is given to students enrolled in Computer Science Specialist, Information Security Specialist, Bioinformatics Specialist or Computer Science Major programs.","campus":"UTM"},{"courseID":"UTM-CSC420H","code":"CSC420H","name":"Introduction to Image Understanding","description":"This class is an introduction to fundamental concepts in image understanding, the sub-discipline of artificial intelligence that tries to make the computers \"see\". It will survey a variety of interesting vision problems and techniques. Specifically, the course will cover image formation, features, object and scene recognition and learning, multi-view geometry and video processing. It will also feature recognition with RGB-D data. The goal of the class will be to grasp a number of computer vision problems and understand basic approaches to tackle them for real-world applications. [24L, 12T] Priority is given to students enrolled in Computer Science Specialist, Information Security Specialist, Bioinformatics Specialist or Computer Science Major programs.","campus":"UTM"},{"courseID":"UTSG-CSC421H","code":"CSC421H","name":"Neural Networks and Deep Learning","description":"An introduction to neural networks and deep learning. Backpropagation and automatic differentiation. Architectures: convolutional networks and recurrent neural networks. Methods for improving optimization and generalization. Neural networks for unsupervised and reinforcement learning.","campus":"UTSG"},{"courseID":"UTM-CSC423H","code":"CSC423H","name":"Computer Forensics","description":"Introduction to the digital investigation of electronic evidence. The computer as a crime scene and as a party to a criminal offence. Focus on network issues (intrusion detection, sniffer logs) and operating system issues (especially file system issues: hidden data, file metadata, deleted data). This course will build upon your background in operating systems theory and practice, and will introduce you to the tools and techniques of the computer forensic specialist in the Linux and Microsoft environments. Reference to Canadian computer crime case law. [24L, 12T] Priority is given to students enrolled in Computer Science Specialist, Information Security Specialist, Bioinformatics Specialist or Computer Science Major programs.","campus":"UTM"},{"courseID":"UTM-CSC423H","code":"CSC423H","name":"Computer Forensics","description":"Introduction to the digital investigation of electronic evidence. The computer as a crime scene and as a party to a criminal offence. Focus on network issues (intrusion detection, sniffer logs) and operating system issues (especially file system issues: hidden data, file metadata, deleted data). This course will build upon your background in operating systems theory and practice, and will introduce you to the tools and techniques of the computer forensic specialist in the Linux and Microsoft environments. Reference to Canadian computer crime case law. [24L, 12T] Priority is given to students enrolled in Computer Science Specialist, Information Security Specialist, Bioinformatics Specialist or Computer Science Major programs.","campus":"UTM"},{"courseID":"UTM-CSC423H","code":"CSC423H","name":"Computer Forensics","description":"Introduction to the digital investigation of electronic evidence. The computer as a crime scene and as a party to a criminal offence. Focus on network issues (intrusion detection, sniffer logs) and operating system issues (especially file system issues: hidden data, file metadata, deleted data). This course will build upon your background in operating systems theory and practice, and will introduce you to the tools and techniques of the computer forensic specialist in the Linux and Microsoft environments. Reference to Canadian computer crime case law. [24L, 12T] Priority is given to students enrolled in Computer Science Specialist, Information Security Specialist, Bioinformatics Specialist or Computer Science Major programs.","campus":"UTM"},{"courseID":"UTM-CSC423H","code":"CSC423H","name":"Computer Forensics","description":"Introduction to the digital investigation of electronic evidence. The computer as a crime scene and as a party to a criminal offence. Focus on network issues (intrusion detection, sniffer logs) and operating system issues (especially file system issues: hidden data, file metadata, deleted data). This course will build upon your background in operating systems theory and practice, and will introduce you to the tools and techniques of the computer forensic specialist in the Linux and Microsoft environments. Reference to Canadian computer crime case law. [24L, 12P] Priority is given to students enrolled in Computer Science Specialist, Information Security Specialist, Bioinformatics Specialist or Computer Science Major programs.","campus":"UTM"},{"courseID":"UTM-CSC427H","code":"CSC427H","name":"Computer Security","description":"Network attacks and defenses, operating system vulnerabilities, application security (e-mail, Web, databases), viruses, spyware, social engineering attacks, privacy and digital rights management. The course will cover both attack techniques and defense mechanisms. [24L, 12T] Priority is given to students enrolled in Computer Science Specialist, Information Security Specialist, Bioinformatics Specialist or Computer Science Major programs.","campus":"UTM"},{"courseID":"UTM-CSC427H","code":"CSC427H","name":"Computer Security","description":"Network attacks and defenses, operating system vulnerabilities, application security (e-mail, Web, databases), viruses, spyware, social engineering attacks, privacy and digital rights management. The course will cover both attack techniques and defense mechanisms. [24L, 12T] Priority is given to students enrolled in Computer Science Specialist, Information Security Specialist, Bioinformatics Specialist or Computer Science Major programs.","campus":"UTM"},{"courseID":"UTM-CSC427H","code":"CSC427H","name":"Computer Security","description":"Network attacks and defenses, operating system vulnerabilities, application security (e-mail, Web, databases), viruses, spyware, social engineering attacks, privacy and digital rights management. The course will cover both attack techniques and defense mechanisms. [24L, 12P] Priority is given to students enrolled in Computer Science Specialist, Information Security Specialist, Bioinformatics Specialist or Computer Science Major programs.","campus":"UTM"},{"courseID":"UTSG-CSC428H","code":"CSC428H","name":"Human-Computer Interaction","description":"Understanding human behaviour as it applies to user interfaces: work activity analysis, observational techniques, questionnaire administration, and unobtrusive measures. Operating parameters of the human cognitive system, task analysis and cognitive modelling techniques and their application to designing interfaces. Interface representations and prototyping tools. Cognitive walkthroughs, usability studies and verbal protocol analysis. Case studies of specific user interfaces.","campus":"UTSG"},{"courseID":"UTSG-CSC428H","code":"CSC428H","name":"Human-Computer Interaction","description":"Understanding human behaviour as it applies to user interfaces: work activity analysis, observational techniques, questionnaire administration, and unobtrusive measures. Operating parameters of the human cognitive system, task analysis and cognitive modelling techniques and their application to designing interfaces. Interface representations and prototyping tools. Cognitive walkthroughs, usability studies and verbal protocol analysis. Case studies of specific user interfaces.","campus":"UTSG"},{"courseID":"UTSG-CSC428H","code":"CSC428H","name":"Human-Computer Interaction","description":"Understanding human behaviour as it applies to user interfaces: work activity analysis, observational techniques, questionnaire administration, and unobtrusive measures. Operating parameters of the human cognitive system, task analysis and cognitive modelling techniques and their application to designing interfaces. Interface representations and prototyping tools. Cognitive walkthroughs, usability studies and verbal protocol analysis. Case studies of specific user interfaces.","campus":"UTSG"},{"courseID":"UTSG-CSC428H","code":"CSC428H","name":"Human-Computer Interaction","description":"Understanding human behaviour as it applies to user interfaces: work activity analysis, observational techniques, questionnaire administration, and unobtrusive measures. Operating parameters of the human cognitive system, task analysis and cognitive modelling techniques and their application to designing interfaces. Interface representations and prototyping tools. Cognitive walkthroughs, usability studies and verbal protocol analysis. Case studies of specific user interfaces.","campus":"UTSG"},{"courseID":"UTSG-CSC428H","code":"CSC428H","name":"Human-Computer Interaction","description":"Understanding human behaviour as it applies to user interfaces: work activity analysis, observational techniques, questionnaire administration, and unobtrusive measures. Operating parameters of the human cognitive system, task analysis and cognitive modelling techniques and their application to designing interfaces. Interface representations and prototyping tools. Cognitive walkthroughs, usability studies and verbal protocol analysis. Case studies of specific user interfaces.","campus":"UTSG"},{"courseID":"UTSG-CSC428H","code":"CSC428H","name":"Human-Computer Interaction","description":"Understanding human behaviour as it applies to user interfaces: work activity analysis, observational techniques, questionnaire administration, and unobtrusive measures. Operating parameters of the human cognitive system, task analysis and cognitive modelling techniques and their application to designing interfaces. Interface representations and prototyping tools. Cognitive walkthroughs, usability studies and verbal protocol analysis. Case studies of specific user interfaces.","campus":"UTSG"},{"courseID":"UTSG-CSC436H","code":"CSC436H","name":"Numerical Algorithms","description":"Numerical algorithms for the algebraic eigenvalue problem, approximation, integration, and the solution of ordinary differential equations. Emphasis is on the convergence, stability, and efficiency properties of the algorithms.","campus":"UTSG"},{"courseID":"UTSG-CSC436H","code":"CSC436H","name":"Numerical Algorithms","description":"Numerical algorithms for the algebraic eigenvalue problem, approximation, integration, and the solution of ordinary differential equations. Emphasis is on the convergence, stability, and efficiency properties of the algorithms.","campus":"UTSG"},{"courseID":"UTSG-CSC436H","code":"CSC436H","name":"Numerical Algorithms","description":"Numerical algorithms for the algebraic eigenvalue problem, approximation, integration, and the solution of ordinary differential equations. Emphasis is on the convergence, stability, and efficiency properties of the algorithms.","campus":"UTSG"},{"courseID":"UTSG-CSC438H","code":"CSC438H","name":"Computability and Logic","description":"","campus":"UTSG"},{"courseID":"UTSG-CSC438H","code":"CSC438H","name":"Computability and Logic","description":"Computable functions, Church's thesis, unsolvable problems, recursively enumerable sets. Predicate calculus, including the completeness, compactness, and Lowenheim-Skolem theorems. Formal theories and the GÃ¶del Incompleteness Theorem. Ordinarily offered in years alternating with CSC448H1.","campus":"UTSG"},{"courseID":"UTSG-CSC443H","code":"CSC443H","name":"Database System Technology","description":"Implementation of database management systems. Storage management, indexing, query processing, concurrency control, transaction management. Database systems on parallel and distributed architectures. Modern database applications: data mining, data warehousing, OLAP, data on the web. Object-oriented and object-relational databases.","campus":"UTSG"},{"courseID":"UTSG-CSC443H","code":"CSC443H","name":"Database System Technology","description":"Implementation of database management systems. Storage management, indexing, query processing, concurrency control, transaction management. Database systems on parallel and distributed architectures. Modern database applications: data mining, data warehousing, OLAP, data on the web. Object-oriented and object-relational databases.","campus":"UTSG"},{"courseID":"UTSG-CSC443H","code":"CSC443H","name":"Database System Technology","description":"Implementation of database management systems. Storage management, indexing, query processing, concurrency control, transaction management. Database systems on parallel and distributed architectures. Modern database applications: data mining, data warehousing, OLAP, data on the web. Object-oriented and object-relational databases.","campus":"UTSG"},{"courseID":"UTSG-CSC443H","code":"CSC443H","name":"Database System Technology","description":"Implementation of database management systems. Storage management, indexing, query processing, concurrency control, transaction management. Database systems on parallel and distributed architectures. Modern database applications: data mining, data warehousing, OLAP, data on the web. Object-oriented and object-relational databases.","campus":"UTSG"},{"courseID":"UTSG-CSC443H","code":"CSC443H","name":"Database System Technology","description":"Implementation of database management systems. Storage management, indexing, query processing, concurrency control, transaction management. Database systems on parallel and distributed architectures. Modern database applications: data mining, data warehousing, OLAP, data on the web. Object-oriented and object-relational databases.","campus":"UTSG"},{"courseID":"UTSG-CSC443H","code":"CSC443H","name":"Database System Technology","description":"Implementation of database management systems. Storage management, indexing, query processing, concurrency control, transaction management. Database systems on parallel and distributed architectures. Modern database applications: data mining, data warehousing, OLAP, data on the web. Object-oriented and object-relational databases.","campus":"UTSG"},{"courseID":"UTSG-CSC444H","code":"CSC444H","name":"Software Engineering I","description":"The software development process. Software requirements and specifications. Software design techniques. Techniques for developing large software systems; CASE tools and software development environments. Software testing, documentation and maintenance.","campus":"UTSG"},{"courseID":"UTSG-CSC444H","code":"CSC444H","name":"Software Engineering ","description":"The software development process. Software requirements and specifications. Software design techniques. Techniques for developing large software systems; CASE tools and software development environments. Software testing, documentation and maintenance.","campus":"UTSG"},{"courseID":"UTSG-CSC444H","code":"CSC444H","name":"Software Engineering ","description":"The software development process. Software requirements and specifications. Software design techniques. Techniques for developing large software systems; CASE tools and software development environments. Software testing, documentation and maintenance.","campus":"UTSG"},{"courseID":"UTSG-CSC446H","code":"CSC446H","name":"Computational Methods for Partial Differential Equations","description":"Finite difference methods for hyperbolic and parabolic equations; consistency, convergence, and stability. Finite element methods for 2-point boundary value problems and elliptic equations. Special problems of interest. Ordinarily offered in years alternating with CSC456H1.","campus":"UTSG"},{"courseID":"UTSG-CSC446H","code":"CSC446H","name":"Computational Methods for Partial Differential Equations","description":"Finite difference methods for hyperbolic and parabolic equations; consistency, convergence, and stability. Finite element methods for 2-point boundary value problems and elliptic equations. Special problems of interest. Ordinarily offered in years alternating with CSC456H1.","campus":"UTSG"},{"courseID":"UTSG-CSC448H","code":"CSC448H","name":"Formal Languages and Automata","description":"Regular, deterministic, context free, context sensitive, and recursively enumerable languages via generative grammars and corresponding automata (finite state machines, push down machines, and Turing machines). Topics include complexity bounds for recognition, language decision problems and operations on languages. Ordinarily offered in years alternating with CSC438H1.","campus":"UTSG"},{"courseID":"UTSG-CSC448H","code":"CSC448H","name":"Formal Languages and Automata","description":"Regular, deterministic, context free, context sensitive, and recursively enumerable languages via generative grammars and corresponding automata (finite state machines, push down machines, and Turing machines). Topics include complexity bounds for recognition, language decision problems and operations on languages. Ordinarily offered in years alternating with CSC438H1.","campus":"UTSG"},{"courseID":"UTSG-CSC448H","code":"CSC448H","name":"Formal Languages and Automata","description":"Regular, deterministic, context free, context sensitive, and recursively enumerable languages via generative grammars and corresponding automata (finite state machines, push down machines, and Turing machines). Topics include complexity bounds for recognition, language decision problems and operations on languages. Ordinarily offered in years alternating with CSC438H1.","campus":"UTSG"},{"courseID":"UTSG-CSC454H","code":"CSC454H","name":"The Business of Software","description":"The software and internet industries; principles of operation for successful software enterprises; innovation and entrepreneurship; software business definition and planning; business models, market and product planning; product development, marketing, sales, and support; financial management and financing of high-technology ventures; management, leadership, and partnerships. Students will all write business plans in teams.","campus":"UTSG"},{"courseID":"UTSG-CSC454H","code":"CSC454H","name":"The Business of Software","description":"The software and internet industries; principles of operation for successful software enterprises; innovation and entrepreneurship; software business definition and planning; business models, market and product planning; product development, marketing, sales, and support; financial management and financing of high-technology ventures; management, leadership, and partnerships. Students will all write business plans in teams.","campus":"UTSG"},{"courseID":"UTSG-CSC454H","code":"CSC454H","name":"The Business of Software","description":"The software and internet industries; principles of operation for successful software enterprises; innovation and entrepreneurship; software business definition and planning; business models, market and product planning; product development, marketing, sales, and support; financial management and financing of high-technology ventures; management, leadership, and partnerships. Students will all write business plans in teams.","campus":"UTSG"},{"courseID":"UTSG-CSC454H","code":"CSC454H","name":"The Business of Software","description":"The software and internet industries; principles of operation for successful software enterprises; innovation and entrepreneurship; software business definition and planning; business models, market and product planning; product development, marketing, sales, and support; financial management and financing of high-technology ventures; management, leadership, and partnerships. Students will all write business plans in teams.","campus":"UTSG"},{"courseID":"UTSG-CSC454H","code":"CSC454H","name":"The Business of Software","description":"The software and internet industries; principles of operation for successful software enterprises; innovation and entrepreneurship; software business definition and planning; business models, market and product planning; product development, marketing, sales, and support; financial management and financing of high-technology ventures; management, leadership, and partnerships. Students will all write business plans in teams.","campus":"UTSG"},{"courseID":"UTSG-CSC454H","code":"CSC454H","name":"The Business of Software","description":"The software and internet industries; principles of operation for successful software enterprises; innovation and entrepreneurship; software business definition and planning; business models, market and product planning; product development, marketing, sales, and support; financial management and financing of high-technology ventures; management, leadership, and partnerships. Students will all write business plans in teams.","campus":"UTSG"},{"courseID":"UTSG-CSC456H","code":"CSC456H","name":"High-Performance Scientific Computing","description":"Computationally-intensive applications in science and engineering are implemented on the fastest computers available, today composed of many processors operating in parallel. Parallel computer architectures; implementation of numerical algorithms on parallel architectures; performance evaluation. Topics from: matrix-vector product, solution of linear systems, sparse matrices, iterative methods, domain decomposition, Fourier solvers. For students in computer science, applied mathematics, science, engineering. Ordinarily offered in years alternating with CSC446H1.","campus":"UTSG"},{"courseID":"UTSG-CSC456H","code":"CSC456H","name":"High-Performance Scientific Computing","description":"Computationally-intensive applications in science and engineering are implemented on the fastest computers available, today composed of many processors operating in parallel. Parallel computer architectures; implementation of numerical algorithms on parallel architectures; performance evaluation. Topics from: matrix-vector product, solution of linear systems, sparse matrices, iterative methods, domain decomposition, Fourier solvers. For students in computer science, applied mathematics, science, engineering. Ordinarily offered in years alternating with CSC446H1.","campus":"UTSG"},{"courseID":"UTSG-CSC458H","code":"CSC458H","name":"Computer Networking Systems","description":"Computer networks with an emphasis on network programming and applications. An overview of networking basics: layering, naming, and addressing, packet switching fundamentals, socket programming, protocols, congestion control, routing, network security, wireless networks, multimedia, web 2.0, software-defined networking, and online social networks.","campus":"UTSG"},{"courseID":"UTSG-CSC458H","code":"CSC458H","name":"Computer Networking Systems","description":"Computer networks with an emphasis on network programming and applications. An overview of networking basics: layering, naming, and addressing, packet switching fundamentals, socket programming, protocols, congestion control, routing, network security, wireless networks, multimedia, web 2.0, software-defined networking, and online social networks.","campus":"UTSG"},{"courseID":"UTSG-CSC458H","code":"CSC458H","name":"Computer Networking Systems","description":"Computer networks with an emphasis on network programming and applications. An overview of networking basics: layering, naming, and addressing, packet switching fundamentals, socket programming, protocols, congestion control, routing, network security, wireless networks, multimedia, web 2.0, software-defined networking, and online social networks.","campus":"UTSG"},{"courseID":"UTSG-CSC463H","code":"CSC463H","name":"Computational Complexity and Computability","description":"Introduction to the theory of computability: Turing machines and other models of computation, Church’s thesis, computable and noncomputable functions, recursive and recursively enumerable sets, many-one reductions. Introduction to complexity theory: P, NP, polynomial time reducibility, NP-completeness, self-reducibility, space complexity (L, NL, PSPACE and completeness for those classes), hierarchy theorems, and provably intractable problems.","campus":"UTSG"},{"courseID":"UTSG-CSC463H","code":"CSC463H","name":"Computational Complexity and Computability","description":"Introduction to the theory of computability: Turing machines and other models of computation, Churchâ€™s thesis, computable and noncomputable functions, recursive and recursively enumerable sets, many-one reductions. Introduction to complexity theory: P, NP, polynomial time reducibility, NP-completeness, self-reducibility, space complexity (L, NL, PSPACE and completeness for those classes), hierarchy theorems, and provably intractable problems.","campus":"UTSG"},{"courseID":"UTSG-CSC463H","code":"CSC463H","name":"Computational Complexity and Computability","description":"Introduction to the theory of computability: Turing machines and other models of computation, Church’s thesis, computable and noncomputable functions, recursive and recursively enumerable sets, many-one reductions. Introduction to complexity theory: P, NP, polynomial time reducibility, NP-completeness, self-reducibility, space complexity (L, NL, PSPACE and completeness for those classes), hierarchy theorems, and provably intractable problems.","campus":"UTSG"},{"courseID":"UTSG-CSC465H","code":"CSC465H","name":"Formal Methods in Software Design","description":"Using mathematics to write error-free programs. Proving each refinement; identifying errors as they are made. Program development to meet specifications; modifications that preserve correctness. Useful for all programming; essential for programs that lives depend on. Basic logic, formal specifications, refinement. Conditional, sequential, parallel, interaction, probabilistic programming, and functional programming.","campus":"UTSG"},{"courseID":"UTSG-CSC465H","code":"CSC465H","name":"Formal Methods in Software Design","description":"Using mathematics to write error-free programs. Proving each refinement; identifying errors as they are made. Program development to meet specifications; modifications that preserve correctness. Useful for all programming; essential for programs that lives depend on. Basic logic, formal specifications, refinement. Conditional, sequential, parallel, interaction, probabilistic programming, and functional programming.","campus":"UTSG"},{"courseID":"UTSG-CSC465H","code":"CSC465H","name":"Formal Methods in Software Design","description":"Using mathematics to write error-free programs. Proving each refinement; identifying errors as they are made. Program development to meet specifications; modifications that preserve correctness. Useful for all programming; essential for programs that lives depend on. Basic logic, formal specifications, refinement. Conditional, sequential, parallel, interaction, probabilistic programming, and functional programming.","campus":"UTSG"},{"courseID":"UTSG-CSC466H","code":"CSC466H","name":"Numerical Methods for Optimization Problems","description":"Numerical methods for unconstrained optimization problems, in particular line search methods and trust region methods. Topics include steepest descent, Newton's method, quasi-Newton methods, conjugate gradient methods and techniques for large problems. This course will normally be offered every other year.","campus":"UTSG"},{"courseID":"UTSG-CSC467H","code":"CSC467H","name":"Compilers and Interpreters","description":"Compiler organization, compiler writing tools, use of regular expressions, finite automata and context-free grammars, scanning and parsing, runtime organization, semantic analysis, implementing the runtime model, storage allocation, code generation.","campus":"UTSG"},{"courseID":"UTSG-CSC467H","code":"CSC467H","name":"Compilers and Interpreters","description":"Compiler organization, compiler writing tools, use of regular expressions, finite automata and context-free grammars, scanning and parsing, runtime organization, semantic analysis, implementing the runtime model, storage allocation, code generation.","campus":"UTSG"},{"courseID":"UTSG-CSC467H","code":"CSC467H","name":"Compilers and Interpreters","description":"Compiler organization, compiler writing tools, use of regular expressions, finite automata and context-free grammars, scanning and parsing, runtime organization, semantic analysis, implementing the runtime model, storage allocation, code generation.","campus":"UTSG"},{"courseID":"UTSG-CSC469H","code":"CSC469H","name":"Operating Systems Design and Implementation","description":"An in-depth exploration of the major components of operating systems with an emphasis on the techniques, algorithms, and structures used to implement these components in modern systems. Project-based study of process management, scheduling, memory management, file systems, and networking is used to build insight into the intricacies of a large concurrent system.","campus":"UTSG"},{"courseID":"UTSG-CSC469H","code":"CSC469H","name":"Operating Systems Design and Implementation","description":"An in-depth exploration of the major components of operating systems with an emphasis on the techniques, algorithms, and structures used to implement these components in modern systems. Project-based study of process management, scheduling, memory management, file systems, and networking is used to build insight into the intricacies of a large concurrent system.","campus":"UTSG"},{"courseID":"UTSG-CSC469H","code":"CSC469H","name":"Operating Systems Design and Implementation","description":"An in-depth exploration of the major components of operating systems with an emphasis on the techniques, algorithms, and structures used to implement these components in modern systems. Project-based study of process management, scheduling, memory management, file systems, and networking is used to build insight into the intricacies of a large concurrent system.","campus":"UTSG"},{"courseID":"UTSG-CSC473H","code":"CSC473H","name":"Advanced Algorithm Design","description":"Advanced algorithm design techniques, with emphasis on the role that geometry, approximation, randomization, and parallelism play in modern algorithms. Examples will be drawn from linear programming and basics of continuous optimization; randomized algorithms for string matching, graph problems, and number theory problems; streaming algorithms and parallel algorithms in the Map-Reduce model.","campus":"UTSG"},{"courseID":"UTSG-CSC473H","code":"CSC473H","name":"Advanced Algorithm Design","description":"Advanced algorithm design techniques, with emphasis on the role that geometry, approximation, randomization, and parallelism play in modern algorithms. Examples will be drawn from linear programming and basics of continuous optimization; randomized algorithms for string matching, graph problems, and number theory problems; streaming algorithms and parallel algorithms in the Map-Reduce model.","campus":"UTSG"},{"courseID":"UTSG-CSC473H","code":"CSC473H","name":"Advanced Algorithm Design","description":"Advanced algorithm design techniques, with emphasis on the role that geometry, approximation, randomization, and parallelism play in modern algorithms. Examples will be drawn from linear programming and basics of continuous optimization; randomized algorithms for string matching, graph problems, and number theory problems; streaming algorithms and parallel algorithms in the Map-Reduce model.","campus":"UTSG"},{"courseID":"UTSG-CSC485H","code":"CSC485H","name":"Computational Linguistics","description":"Computational linguistics and the processing of language by computer. Topics include: context-free grammars; chart parsing, statistical parsing; semantics and semantic interpretation; ambiguity resolution techniques; reference resolution. Emphasis on statistical learning methods for lexical, syntactic, and semantic knowledge.","campus":"UTSG"},{"courseID":"UTSG-CSC485H","code":"CSC485H","name":"Computational Linguistics","description":"Computational linguistics and the processing of language by computer. Topics include: context-free grammars; chart parsing, statistical parsing; semantics and semantic interpretation; ambiguity resolution techniques; reference resolution. Emphasis on statistical learning methods for lexical, syntactic, and semantic knowledge.","campus":"UTSG"},{"courseID":"UTSG-CSC485H","code":"CSC485H","name":"Computational Linguistics","description":"Computational linguistics and the processing of language by computer. Topics include: context-free grammars; chart parsing, statistical parsing; semantics and semantic interpretation; ambiguity resolution techniques; reference resolution. Emphasis on statistical learning methods for lexical, syntactic, and semantic knowledge.","campus":"UTSG"},{"courseID":"UTSG-CSC486H","code":"CSC486H","name":"Knowledge Representation and Reasoning","description":"Representing knowledge symbolically in a form suitable for automated reasoning, and associated reasoning methods. Topics from: first-order logic, entailment, the resolution method, Horn clauses, procedural representations, production systems, description logics, inheritance networks, defaults and probabilities, tractable reasoning, abductive explanation, the representation of action, planning.","campus":"UTSG"},{"courseID":"UTSG-CSC486H","code":"CSC486H","name":"Knowledge Representation and Reasoning","description":"Representing knowledge symbolically in a form suitable for automated reasoning, and associated reasoning methods. Topics from: first-order logic, entailment, the resolution method, Horn clauses, procedural representations, production systems, description logics, inheritance networks, defaults and probabilities, tractable reasoning, abductive explanation, the representation of action, planning.","campus":"UTSG"},{"courseID":"UTSG-CSC486H","code":"CSC486H","name":"Knowledge Representation and Reasoning","description":"Representing knowledge symbolically in a form suitable for automated reasoning, and associated reasoning methods. Topics from: first-order logic, entailment, the resolution method, Horn clauses, procedural representations, production systems, description logics, inheritance networks, defaults and probabilities, tractable reasoning, abductive explanation, the representation of action, planning.","campus":"UTSG"},{"courseID":"UTSG-CSC488H","code":"CSC488H","name":"Compilers and Interpreters","description":"The structure of compilers, Programming language processing. Scanning based on regular expressions, Parsing using context free grammars, Semantic analysis (type and usage checking), Compiler dictionaries and tables. Runtime organization and storage allocation, code generation, optimization. Use of modern compiler building tools. Course project involves building a complete compiler.","campus":"UTSG"},{"courseID":"UTSG-CSC488H","code":"CSC488H","name":"Compilers and Interpreters","description":"The structure of compilers, Programming language processing. Scanning based on regular expressions, Parsing using context free grammars, Semantic analysis (type and usage checking), Compiler dictionaries and tables. Runtime organization and storage allocation, code generation, optimization. Use of modern compiler building tools. Course project involves building a complete compiler.","campus":"UTSG"},{"courseID":"UTSG-CSC488H","code":"CSC488H","name":"Compilers and Interpreters","description":"The structure of compilers, Programming language processing. Scanning based on regular expressions, Parsing using context free grammars, Semantic analysis (type and usage checking), Compiler dictionaries and tables. Runtime organization and storage allocation, code generation, optimization. Use of modern compiler building tools. Course project involves building a complete compiler.","campus":"UTSG"},{"courseID":"UTM-CSC488H","code":"CSC488H","name":"Compilers and Interpreters","description":"Compiler organization, compiler writing tools, use of regular expressions, finite automation and content-free grammars, scanning and parsing, runtine organization, semantic analysis, implementing the runtime model, storage allocation, code generation. [24L, 12T] Priority is given to students enrolled in Computer Science Specialist, Information Security Specialist, Bioinformatics Specialist or Computer Science Major programs.","campus":"UTM"},{"courseID":"UTM-CSC488H","code":"CSC488H","name":"Compilers and Interpreters","description":"Compiler organization, compiler writing tools, use of regular expressions, finite automation and content-free grammars, scanning and parsing, runtine organization, semantic analysis, implementing the runtime model, storage allocation, code generation. [24L, 12T] Priority is given to students enrolled in Computer Science Specialist, Information Security Specialist, Bioinformatics Specialist or Computer Science Major programs.","campus":"UTM"},{"courseID":"UTSG-CSC490H","code":"CSC490H","name":"Capstone Design Project","description":"This half-course gives students experience solving a substantial problem that may span several areas of Computer Science. Students will define the scope of the problem, develop a solution plan, produce a working implementation, and present their work using written, oral, and (if suitable) video reports. Class time will focus on the project, but may include some lectures. The class will be small and highly interactive. Project themes change each year. Contact the Computer Science Undergraduate Office for information about this year’s topic themes, required preparation, and course enrolment procedures. Not eligible for CR/NCR option.","campus":"UTSG"},{"courseID":"UTSG-CSC490H","code":"CSC490H","name":"Capstone Design Project","description":"This half-course gives students experience solving a substantial problem that may span several areas of Computer Science. Students will define the scope of the problem, develop a solution plan, produce a working implementation, and present their work using written, oral, and (if suitable) video reports. Class time will focus on the project, but may include some lectures. The class will be small and highly interactive. Project themes change each year. Contact the Computer Science Undergraduate Office for information about this year’s topic themes, required preparation, and course enrolment procedures. Not eligible for CR/NCR option.","campus":"UTSG"},{"courseID":"UTM-CSC490H","code":"CSC490H","name":"Capstone Design Course","description":"This course gives students experience solving a substantial problem that may span several areas of Computer Science. Students will define the scope of the problem, develop a solution plan, produce a working implementation, and present their work using written, oral and (if suitable) video reports. Class time will focus on the project, but may include some lectures. The class will be small and highly interactive. Topics, themes and required preparation will vary by instructor. [24L, 12T] Priority is given to students enrolled in Computer Science Specialist, Information Security Specialist, Bioinformatics Specialist or Computer Science Major programs.","campus":"UTM"},{"courseID":"UTM-CSC490H","code":"CSC490H","name":"Capstone Design Course","description":"This course gives students experience solving a substantial problem that may span several areas of Computer Science. Students will define the scope of the problem, develop a solution plan, produce a working implementation, and present their work using written, oral and (if suitable) video reports. Class time will focus on the project, but may include some lectures. The class will be small and highly interactive. Topics, themes and required preparation will vary by instructor. [24L, 12P] Priority is given to students enrolled in Computer Science Specialist, Information Security Specialist, Bioinformatics Specialist or Computer Science Major programs.","campus":"UTM"},{"courseID":"UTM-CSC490H","code":"CSC490H","name":"Capstone Design Course","description":"This course gives students experience solving a substantial problem that may span several areas of Computer Science. Students will define the scope of the problem, develop a solution plan, produce a working implementation, and present their work using written, oral and (if suitable) video reports. Class time will focus on the project, but may include some lectures. The class will be small and highly interactive. Topics, themes and required preparation will vary by instructor. [24L, 12T] Priority is given to students enrolled in Computer Science Specialist, Information Security Specialist, Bioinformatics Specialist or Computer Science Major programs.","campus":"UTM"},{"courseID":"UTM-CSC490H","code":"CSC490H","name":"Capstone Design Course","description":"This course gives students experience solving a substantial problem that may span several areas of Computer Science. Students will define the scope of the problem, develop a solution plan, produce a working implementation, and present their work using written, oral and (if suitable) video reports. Class time will focus on the project, but may include some lectures. The class will be small and highly interactive. Topics, themes and required preparation will vary by instructor. [24L, 12T] Priority is given to students enrolled in Computer Science Specialist, Information Security Specialist, Bioinformatics Specialist or Computer Science Major programs.","campus":"UTM"},{"courseID":"UTM-CSC490H","code":"CSC490H","name":"Capstone Design Course","description":"This course gives students experience solving a substantial problem that may span several areas of Computer Science. Students will define the scope of the problem, develop a solution plan, produce a working implementation, and present their work using written, oral and (if suitable) video reports. Class time will focus on the project, but may include some lectures. The class will be small and highly interactive. Topics, themes and required preparation will vary by instructor. [24L, 12P] Priority is given to students enrolled in Computer Science Specialist, Information Security Specialist, Bioinformatics Specialist or Computer Science Major programs.","campus":"UTM"},{"courseID":"UTSG-CSC491H","code":"CSC491H","name":"Capstone Design Project","description":"This half-course gives students experience solving a substantial problem that may span several areas of Computer Science. Students will define the scope of the problem, develop a solution plan, produce a working implementation, and present their work using written, oral, and (if suitable) video reports. Class time will focus on the project, but may include some lectures. The class will be small and highly interactive. Project themes change each year. Contact the Computer Science Undergraduate Office for information about this year’s topic themes, required preparation, and course enrolment procedures. Not eligible for CR/NCR option.","campus":"UTSG"},{"courseID":"UTSG-CSC491H","code":"CSC491H","name":"Capstone Design Project","description":"This half-course gives students experience solving a substantial problem that may span several areas of Computer Science. Students will define the scope of the problem, develop a solution plan, produce a working implementation, and present their work using written, oral, and (if suitable) video reports. Class time will focus on the project, but may include some lectures. The class will be small and highly interactive. Project themes change each year. Contact the Computer Science Undergraduate Office for information about this yearâ€™s topic themes, required preparation, and course enrolment procedures. Not eligible for CR/NCR option.","campus":"UTSG"},{"courseID":"UTSG-CSC491H","code":"CSC491H","name":"Capstone Design Project","description":"This half-course gives students experience solving a substantial problem that may span several areas of Computer Science. Students will define the scope of the problem, develop a solution plan, produce a working implementation, and present their work using written, oral, and (if suitable) video reports. Class time will focus on the project, but may include some lectures. The class will be small and highly interactive. Project themes change each year. Contact the Computer Science Undergraduate Office for information about this year’s topic themes, required preparation, and course enrolment procedures. Not eligible for CR/NCR option.","campus":"UTSG"},{"courseID":"UTSG-CSC491H","code":"CSC491H","name":"Capstone Design Project","description":"This half-course gives students experience solving a substantial problem that may span several areas of Computer Science. Students will define the scope of the problem, develop a solution plan, produce a working implementation, and present their work using written, oral, and (if suitable) video reports. Class time will focus on the project, but may include some lectures. The class will be small and highly interactive. Project themes change each year. Contact the Computer Science Undergraduate Office for information about this year’s topic themes, required preparation, and course enrolment procedures. Not eligible for CR/NCR option.","campus":"UTSG"},{"courseID":"UTSG-CSC491H","code":"CSC491H","name":"Capstone Design Project","description":"This half-course gives students experience solving a substantial problem that may span several areas of Computer Science. Students will define the scope of the problem, develop a solution plan, produce a working implementation, and present their work using written, oral, and (if suitable) video reports. Class time will focus on the project, but may include some lectures. The class will be small and highly interactive. Project themes change each year. Contact the Computer Science Undergraduate Office for information about this yearâ€™s topic themes, required preparation, and course enrolment procedures. Not eligible for CR/NCR option.","campus":"UTSG"},{"courseID":"UTSG-CSC491H","code":"CSC491H","name":"Capstone Design Project","description":"This half-course gives students experience solving a substantial problem that may span several areas of Computer Science. Students will define the scope of the problem, develop a solution plan, produce a working implementation, and present their work using written, oral, and (if suitable) video reports. Class time will focus on the project, but may include some lectures. The class will be small and highly interactive. Project themes change each year. Contact the Computer Science Undergraduate Office for information about this year’s topic themes, required preparation, and course enrolment procedures. Not eligible for CR/NCR option.","campus":"UTSG"},{"courseID":"UTM-CSC492H","code":"CSC492H","name":"Computer Science Implementation Project","description":"This course involves a significant implementation project in any area of Computer Science. The project may be undertaken individually or in small groups. The project is offered by arrangement with a Computer Science faculty member. Priority is given to students enrolled in Computer Science Specialist, Information Security Specialist, Bioinformatics Specialist or Computer Science Major programs.","campus":"UTM"},{"courseID":"UTM-CSC492H","code":"CSC492H","name":"Computer Science Implementation Project","description":"This course involves a significant implementation project in any area of Computer Science. The project may be undertaken individually or in small groups. The project is offered by arrangement with a Computer Science faculty member. Priority is given to students enrolled in Computer Science Specialist, Information Security Specialist, Bioinformatics Specialist or Computer Science Major programs.","campus":"UTM"},{"courseID":"UTM-CSC492H","code":"CSC492H","name":"Computer Science Implementation Project","description":"This course involves a significant implementation project in any area of Computer Science. The project may be undertaken individually or in small groups. The project is offered by arrangement with a Computer Science faculty member. Priority is given to students enrolled in Computer Science Specialist, Information Security Specialist, Bioinformatics Specialist or Computer Science Major programs.","campus":"UTM"},{"courseID":"UTM-CSC492H","code":"CSC492H","name":"Computer Science Implementation Project","description":"This course involves a significant implementation project in any area of Computer Science. The project may be undertaken individually or in small groups. The project is offered by arrangement with a Computer Science faculty member. Priority is given to students enrolled in Computer Science Specialist, Information Security Specialist, Bioinformatics Specialist or Computer Science Major programs.","campus":"UTM"},{"courseID":"UTM-CSC492H","code":"CSC492H","name":"Computer Science Implementation Project","description":"This course involves a significant implementation project in any area of Computer Science. The project may be undertaken individually or in small groups. The project is offered by arrangement with a Computer Science faculty member. Priority is given to students enrolled in Computer Science Specialist, Information Security Specialist, Bioinformatics Specialist or Computer Science Major programs.","campus":"UTM"},{"courseID":"UTM-CSC492H","code":"CSC492H","name":"Computer Science Implementation Project","description":"This course involves a significant implementation project in any area of Computer Science. The project may be undertaken individually or in small groups. The project is offered by arrangement with a Computer Science faculty member. Priority is given to students enrolled in Computer Science Specialist, Information Security Specialist, Bioinformatics Specialist or Computer Science Major programs.","campus":"UTM"},{"courseID":"UTM-CSC492H","code":"CSC492H","name":"Computer Science Implementation Project","description":"This course involves a significant implementation project in any area of Computer Science. The project may be undertaken individually or in small groups. The project is offered by arrangement with a Computer Science faculty member. Priority is given to students enrolled in Computer Science Specialist, Information Security Specialist, Bioinformatics Specialist or Computer Science Major programs.","campus":"UTM"},{"courseID":"UTM-CSC492H","code":"CSC492H","name":"Computer Science Implementation Project","description":"This course involves a significant implementation project in any area of Computer Science. The project may be undertaken individually or in small groups. The project is offered by arrangement with a Computer Science faculty member. Priority is given to students enrolled in Computer Science Specialist, Information Security Specialist, Bioinformatics Specialist or Computer Science Major programs.","campus":"UTM"},{"courseID":"UTM-CSC492H","code":"CSC492H","name":"Computer Science Implementation Project","description":"This course involves a significant implementation project in any area of Computer Science. The project may be undertaken individually or in small groups. The project is offered by arrangement with a Computer Science faculty member. Priority is given to students enrolled in Computer Science Specialist, Information Security Specialist, Bioinformatics Specialist or Computer Science Major programs.","campus":"UTM"},{"courseID":"UTM-CSC493H","code":"CSC493H","name":"Computer Science Expository Work","description":"This course involves a significant literature search and expository work in any area of Computer Science. This work must be undertaken individually. It is offered by arrangement with a Computer Science faculty member. Priority is given to students enrolled in Computer Science Specialist, Information Security Specialist, Bioinformatics Specialist or Computer Science Major programs.","campus":"UTM"},{"courseID":"UTM-CSC493H","code":"CSC493H","name":"Computer Science Expository Work","description":"This course involves a significant literature search and expository work in any area of Computer Science. This work must be undertaken individually. It is offered by arrangement with a Computer Science faculty member. Priority is given to students enrolled in Computer Science Specialist, Information Security Specialist, Bioinformatics Specialist or Computer Science Major programs.","campus":"UTM"},{"courseID":"UTM-CSC493H","code":"CSC493H","name":"Computer Science Expository Work","description":"This course involves a significant literature search and expository work in any area of Computer Science. This work must be undertaken individually. It is offered by arrangement with a Computer Science faculty member. Priority is given to students enrolled in Computer Science Specialist, Information Security Specialist, Bioinformatics Specialist or Computer Science Major programs.","campus":"UTM"},{"courseID":"UTM-CSC493H","code":"CSC493H","name":"Computer Science Expository Work","description":"This course involves a significant literature search and expository work in any area of Computer Science. This work must be undertaken individually. It is offered by arrangement with a Computer Science faculty member. Priority is given to students enrolled in Computer Science Specialist, Information Security Specialist, Bioinformatics Specialist or Computer Science Major programs.","campus":"UTM"},{"courseID":"UTM-CSC493H","code":"CSC493H","name":"Computer Science Expository Work","description":"This course involves a significant literature search and expository work in any area of Computer Science. This work must be undertaken individually. It is offered by arrangement with a Computer Science faculty member. Priority is given to students enrolled in Computer Science Specialist, Information Security Specialist, Bioinformatics Specialist or Computer Science Major programs.","campus":"UTM"},{"courseID":"UTM-CSC493H","code":"CSC493H","name":"Computer Science Expository Work","description":"This course involves a significant literature search and expository work in any area of Computer Science. This work must be undertaken individually. It is offered by arrangement with a Computer Science faculty member. Priority is given to students enrolled in Computer Science Specialist, Information Security Specialist, Bioinformatics Specialist or Computer Science Major programs.","campus":"UTM"},{"courseID":"UTM-CSC493H","code":"CSC493H","name":"Computer Science Expository Work","description":"This course involves a significant literature search and expository work in any area of Computer Science. This work must be undertaken individually. It is offered by arrangement with a Computer Science faculty member. Priority is given to students enrolled in Computer Science Specialist, Information Security Specialist, Bioinformatics Specialist or Computer Science Major programs.","campus":"UTM"},{"courseID":"UTM-CSC493H","code":"CSC493H","name":"Computer Science Expository Work","description":"This course involves a significant literature search and expository work in any area of Computer Science. This work must be undertaken individually. It is offered by arrangement with a Computer Science faculty member. Priority is given to students enrolled in Computer Science Specialist, Information Security Specialist, Bioinformatics Specialist or Computer Science Major programs.","campus":"UTM"},{"courseID":"UTSG-CSC494H","code":"CSC494H","name":"Computer Science Project","description":"This half-course involves a significant project in any area of Computer Science. The project may be undertaken individually or in small groups. The course is offered by arrangement with a Computer Science faculty member. Not eligible for CR/NCR option.","campus":"UTSG"},{"courseID":"UTSG-CSC494H","code":"CSC494H","name":"Computer Science Project","description":"This half-course involves a significant project in any area of Computer Science. The project may be undertaken individually or in small groups. The course is offered by arrangement with a Computer Science faculty member. Not eligible for CR/NCR option.","campus":"UTSG"},{"courseID":"UTSG-CSC494H","code":"CSC494H","name":"Computer Science Project","description":"This half-course involves a significant project in any area of Computer Science. The project may be undertaken individually or in small groups. The course is offered by arrangement with a Computer Science faculty member. Not eligible for CR/NCR option.","campus":"UTSG"},{"courseID":"UTSG-CSC494H","code":"CSC494H","name":"Computer Science Project","description":"This half-course involves a significant project in any area of Computer Science. The project may be undertaken individually or in small groups. The course is offered by arrangement with a Computer Science faculty member. Not eligible for CR/NCR option.","campus":"UTSG"},{"courseID":"UTSG-CSC494H","code":"CSC494H","name":"Computer Science Project","description":"This half-course involves a significant project in any area of Computer Science. The project may be undertaken individually or in small groups. The course is offered by arrangement with a Computer Science faculty member. Not eligible for CR/NCR option.","campus":"UTSG"},{"courseID":"UTSG-CSC494H","code":"CSC494H","name":"Computer Science Project","description":"This half-course involves a significant project in any area of Computer Science. The project may be undertaken individually or in small groups. The course is offered by arrangement with a Computer Science faculty member. Not eligible for CR/NCR option.","campus":"UTSG"},{"courseID":"UTSG-CSC494H","code":"CSC494H","name":"Computer Science Project","description":"This half-course involves a significant project in any area of Computer Science. The project may be undertaken individually or in small groups. The course is offered by arrangement with a Computer Science faculty member. Not eligible for CR/NCR option.","campus":"UTSG"},{"courseID":"UTSG-CSC494H","code":"CSC494H","name":"Computer Science Project","description":"This half-course involves a significant project in any area of Computer Science. The project may be undertaken individually or in small groups. The course is offered by arrangement with a Computer Science faculty member. Not eligible for CR/NCR option.","campus":"UTSG"},{"courseID":"UTSG-CSC494H","code":"CSC494H","name":"Computer Science Project","description":"This half-course involves a significant project in any area of Computer Science. The project may be undertaken individually or in small groups. The course is offered by arrangement with a Computer Science faculty member. Not eligible for CR/NCR option.","campus":"UTSG"},{"courseID":"UTSG-CSC494H","code":"CSC494H","name":"Computer Science Project","description":"This half-course involves a significant project in any area of Computer Science. The project may be undertaken individually or in small groups. The course is offered by arrangement with a Computer Science faculty member. Not eligible for CR/NCR option.","campus":"UTSG"},{"courseID":"UTSG-CSC494H","code":"CSC494H","name":"Computer Science Project","description":"This half-course involves a significant project in any area of Computer Science. The project may be undertaken individually or in small groups. The course is offered by arrangement with a Computer Science faculty member. Not eligible for CR/NCR option.","campus":"UTSG"},{"courseID":"UTSG-CSC494Y","code":"CSC494Y","name":"Project in CSC ","description":"","campus":"UTSG"},{"courseID":"UTSG-CSC494Y","code":"CSC494Y","name":"Project in CSC ","description":"","campus":"UTSG"},{"courseID":"UTSG-CSC494Y","code":"CSC494Y","name":"Project in CSC ","description":"","campus":"UTSG"},{"courseID":"UTSG-CSC495H","code":"CSC495H","name":"Computer Science Project","description":"This half-course involves a significant project in any area of Computer Science. The project may be undertaken individually or in small groups. The course is offered by arrangement with a Computer Science faculty member. Not eligible for CR/NCR option.","campus":"UTSG"},{"courseID":"UTSG-CSC495H","code":"CSC495H","name":"Computer Science Project","description":"This half-course involves a significant project in any area of Computer Science. The project may be undertaken individually or in small groups. The course is offered by arrangement with a Computer Science faculty member. Not eligible for CR/NCR option.","campus":"UTSG"},{"courseID":"UTSG-CSC495H","code":"CSC495H","name":"Computer Science Project","description":"This half-course involves a significant project in any area of Computer Science. The project may be undertaken individually or in small groups. The course is offered by arrangement with a Computer Science faculty member. Not eligible for CR/NCR option.","campus":"UTSG"},{"courseID":"UTSG-CSC495H","code":"CSC495H","name":"Computer Science Project","description":"This half-course involves a significant project in any area of Computer Science. The project may be undertaken individually or in small groups. The course is offered by arrangement with a Computer Science faculty member. Not eligible for CR/NCR option.","campus":"UTSG"},{"courseID":"UTSG-CSC495H","code":"CSC495H","name":"Computer Science Project","description":"This half-course involves a significant project in any area of Computer Science. The project may be undertaken individually or in small groups. The course is offered by arrangement with a Computer Science faculty member. Not eligible for CR/NCR option.","campus":"UTSG"},{"courseID":"UTSG-CSC495H","code":"CSC495H","name":"Computer Science Project","description":"This half-course involves a significant project in any area of Computer Science. The project may be undertaken individually or in small groups. The course is offered by arrangement with a Computer Science faculty member. Not eligible for CR/NCR option.","campus":"UTSG"},{"courseID":"UTSG-CSC495H","code":"CSC495H","name":"Computer Science Project","description":"This half-course involves a significant project in any area of Computer Science. The project may be undertaken individually or in small groups. The course is offered by arrangement with a Computer Science faculty member. Not eligible for CR/NCR option.","campus":"UTSG"},{"courseID":"UTSG-CSC495H","code":"CSC495H","name":"Computer Science Project","description":"This half-course involves a significant project in any area of Computer Science. The project may be undertaken individually or in small groups. The course is offered by arrangement with a Computer Science faculty member. Not eligible for CR/NCR option.","campus":"UTSG"},{"courseID":"UTSG-CSC495H","code":"CSC495H","name":"Computer Science Project","description":"This half-course involves a significant project in any area of Computer Science. The project may be undertaken individually or in small groups. The course is offered by arrangement with a Computer Science faculty member. Not eligible for CR/NCR option.","campus":"UTSG"},{"courseID":"UTSG-CSC495H","code":"CSC495H","name":"Computer Science Project","description":"This half-course involves a significant project in any area of Computer Science. The project may be undertaken individually or in small groups. The course is offered by arrangement with a Computer Science faculty member. Not eligible for CR/NCR option.","campus":"UTSG"},{"courseID":"UTSG-CSC495H","code":"CSC495H","name":"Computer Science Project","description":"This half-course involves a significant project in any area of Computer Science. The project may be undertaken individually or in small groups. The course is offered by arrangement with a Computer Science faculty member. Not eligible for CR/NCR option.","campus":"UTSG"},{"courseID":"UTM-CSC498H","code":"CSC498H","name":"Topics in Computer Science","description":"Introduction to a topic of current interest in computer science intended for CSC majors and specialists. Content will vary from year to year. Priority is given to students enrolled in Computer Science Specialist, Information Security Specialist, Bioinformatics Specialist or Computer Science Major programs.","campus":"UTM"},{"courseID":"UTM-CSC498H","code":"CSC498H","name":"Topics in Computer Science","description":"Introduction to a topic of current interest in computer science intended for CSC majors and specialists. Content will vary from year to year. Priority is given to students enrolled in Computer Science Specialist, Information Security Specialist, Bioinformatics Specialist or Computer Science Major programs.","campus":"UTM"},{"courseID":"UTM-CSC498H","code":"CSC498H","name":"Topics in Computer Science","description":"Introduction to a topic of current interest in computer science intended for CSC majors and specialists. Content will vary from year to year. Priority is given to students enrolled in Computer Science Specialist, Information Security Specialist, Bioinformatics Specialist or Computer Science Major programs.","campus":"UTM"},{"courseID":"UTM-CSC498H","code":"CSC498H","name":"Topics in Computer Science","description":"Introduction to a topic of current interest in computer science intended for CSC majors and specialists. Content will vary from year to year. Priority is given to students enrolled in Computer Science Specialist, Information Security Specialist, Bioinformatics Specialist or Computer Science Major programs.","campus":"UTM"},{"courseID":"UTM-CSC498H","code":"CSC498H","name":"Topics in Computer Science","description":"Introduction to a topic of current interest in computer science intended for CSC majors and specialists. Content will vary from year to year. Priority is given to students enrolled in Computer Science Specialist, Information Security Specialist, Bioinformatics Specialist or Computer Science Major programs.","campus":"UTM"},{"courseID":"UTM-CSC499Y","code":"CSC499Y","name":"Research Opportunity Program","description":"This course provides a richly rewarding opportunity for students in their third or fourth year to work in the research project of a professor in return for 499Y course credit. Students enrolled have an opportunity to become involved in original research, learn research methods and share in the excitement and discovery of acquiring new knowledge. Participating faculty members post their project descriptions for the following summer and fall/winter sessions in early February and students are invited to apply in early March. See Experiential and International Opportunities [http://uoft.me/explp] for more details. Priority is given to students enrolled in Computer Science Specialist, Information Security Specialist, Bioinformatics Specialist or Computer Science Major programs.","campus":"UTM"},{"courseID":"UTM-CSC499Y","code":"CSC499Y","name":"Research Opportunity Program","description":"This course provides a richly rewarding opportunity for students in their third or fourth year to work in the research project of a professor in return for 499Y course credit. Students enrolled have an opportunity to become involved in original research, learn research methods and share in the excitement and discovery of acquiring new knowledge. Participating faculty members post their project descriptions for the following summer and fall/winter sessions in early February and students are invited to apply in early March. See Experiential and International Opportunities [http://uoft.me/explp] for more details. Priority is given to students enrolled in Computer Science Specialist, Information Security Specialist, Bioinformatics Specialist or Computer Science Major programs.","campus":"UTM"},{"courseID":"UTM-CSC499Y","code":"CSC499Y","name":"Research Opportunity Program","description":"This course provides a richly rewarding opportunity for students in their third or fourth year to work in the research project of a professor in return for 499Y course credit. Students enrolled have an opportunity to become involved in original research, learn research methods and share in the excitement and discovery of acquiring new knowledge. Participating faculty members post their project descriptions for the following summer and fall/winter sessions in early February and students are invited to apply in early March. See Experiential and International Opportunities [http://uoft.me/explp] for more details. Priority is given to students enrolled in Computer Science Specialist, Information Security Specialist, Bioinformatics Specialist or Computer Science Major programs.","campus":"UTM"},{"courseID":"UTM-CSC499Y","code":"CSC499Y","name":"Research Opportunity Program","description":"This course provides a richly rewarding opportunity for students in their third or fourth year to work in the research project of a professor in return for 499Y course credit. Students enrolled have an opportunity to become involved in original research, learn research methods and share in the excitement and discovery of acquiring new knowledge. Participating faculty members post their project descriptions for the following summer and fall/winter sessions in early February and students are invited to apply in early March. See Experiential and International Opportunities [http://uoft.me/explp] for more details. Priority is given to students enrolled in Computer Science Specialist, Information Security Specialist, Bioinformatics Specialist or Computer Science Major programs.","campus":"UTM"},{"courseID":"UTSC-CSCA08H","code":"CSCA08H","name":"Introduction to Computer Science I","description":"Programming in an object-oriented language such as Python. Program structure: elementary data types, statements, control flow, functions, classes, objects, methods. Lists; searching, sorting and complexity. This course is intended for students having a serious interest in higher level computer science courses, or planning to complete a computer science program.","campus":"UTSC"},{"courseID":"UTSC-CSCA08H","code":"CSCA08H","name":"Introduction to Computer Science I","description":"Programming in an object-oriented language such as Python. Program structure: elementary data types, statements, control flow, functions, classes, objects, methods. Lists; searching, sorting and complexity. This course is intended for students having a serious interest in higher level computer science courses, or planning to complete a computer science program.","campus":"UTSC"},{"courseID":"UTSC-CSCA08H","code":"CSCA08H","name":"Introduction to Computer Science I","description":"Programming in an object-oriented language such as Python. Program structure: elementary data types, statements, control flow, functions, classes, objects, methods. Lists; searching, sorting and complexity.  This course is intended for students having a serious interest in higher level computer science courses, or planning to complete a computer science program.","campus":"UTSC"},{"courseID":"UTSC-CSCA08H","code":"CSCA08H","name":"Introduction to Computer Science I","description":"Programming in an object-oriented language such as Python. Program structure: elementary data types, statements, control flow, functions, classes, objects, methods. Lists; searching, sorting and complexity. This course is intended for students having a serious interest in higher level computer science courses, or planning to complete a computer science program.","campus":"UTSC"},{"courseID":"UTSC-CSCA08H","code":"CSCA08H","name":"Introduction to Computer Science I","description":"Programming in an object-oriented language such as Python. Program structure: elementary data types, statements, control flow, functions, classes, objects, methods. Lists; searching, sorting and complexity. This course is intended for students having a serious interest in higher level computer science courses, or planning to complete a computer science program.","campus":"UTSC"},{"courseID":"UTSC-CSCA20H","code":"CSCA20H","name":"Introduction to Programming","description":"An introduction to computer programming, with an emphasis on gaining practical skills. Introduction to programming, software tools, database manipulation. This course is appropriate for students with an interest in programming and computers who do not plan to pursue a Computer Science program.","campus":"UTSC"},{"courseID":"UTSC-CSCA20H","code":"CSCA20H","name":"Introduction to Programming","description":"An introduction to computer programming, with an emphasis on gaining practical skills. Introduction to programming, software tools, database manipulation. This course is appropriate for students with an interest in programming and computers who do not plan to pursue a Computer Science program.","campus":"UTSC"},{"courseID":"UTSC-CSCA48H","code":"CSCA48H","name":"Introduction to Computer Science II","description":"Abstract data types and data structures for implementing them. Linked data structures. Object Oriented Programming. Encapsulation and information-hiding. Testing. Specifications. Analyzing the efficiency of programs. Recursion.","campus":"UTSC"},{"courseID":"UTSC-CSCA48H","code":"CSCA48H","name":"Introduction to Computer Science II","description":"Abstract data types and data structures for implementing them. Linked data structures. Object Oriented Programming. Encapsulation and information-hiding. Testing. Specifications. Analyzing the efficiency of programs. Recursion.","campus":"UTSC"},{"courseID":"UTSC-CSCA48H","code":"CSCA48H","name":"Introduction to Computer Science II","description":"Abstract data types and data structures for implementing them. Linked data structures. Object Oriented Programming. Encapsulation and information-hiding. Testing. Specifications. Analyzing the efficiency of programs. Recursion.","campus":"UTSC"},{"courseID":"UTSC-CSCA48H","code":"CSCA48H","name":"Introduction to Computer Science II","description":"Abstract data types and data structures for implementing them. Linked data structures. Object Oriented Programming. Encapsulation and information-hiding. Testing. Specifications. Analyzing the efficiency of programs. Recursion.","campus":"UTSC"},{"courseID":"UTSC-CSCA48H","code":"CSCA48H","name":"Introduction to Computer Science II","description":"Abstract data types and data structures for implementing them. Linked data structures. Object Oriented Programming. Encapsulation and information-hiding. Testing. Specifications. Analyzing the efficiency of programs. Recursion.","campus":"UTSC"},{"courseID":"UTSC-CSCA67H","code":"CSCA67H","name":"Discrete Mathematics","description":"Introduction to discrete mathematics: Elementary combinatorics; discrete probability including conditional probability and independence; graph theory including trees, planar graphs, searches and traversals, colouring. The course emphasizes topics of relevance to computer science, and exercises problem-solving skills and proof techniques such as well ordering, induction, contradiction, and counterexample.Same as MATA67H3","campus":"UTSC"},{"courseID":"UTSC-CSCA67H","code":"CSCA67H","name":"Discrete Mathematics","description":"Introduction to discrete mathematics: Elementary combinatorics; discrete probability including conditional probability and independence; graph theory including trees, planar graphs, searches and traversals, colouring. The course emphasizes topics of relevance to computer science, and exercises problem-solving skills and proof techniques such as well ordering, induction, contradiction, and counterexample.Same as MATA67H3","campus":"UTSC"},{"courseID":"UTSC-CSCB07H","code":"CSCB07H","name":"Software Design","description":"An introduction to software design and development concepts, methods, and tools, using a statically-typed object-oriented language such as Java. Topics from: version control, build management, unit testing, refactoring, object oriented design and development, design patterns and advanced IDE usage.","campus":"UTSC"},{"courseID":"UTSC-CSCB07H","code":"CSCB07H","name":"Software Design","description":"An introduction to software design and development concepts, methods, and tools, using a statically-typed object-oriented language such as Java. Topics from: version control, build management, unit testing, refactoring, object oriented design and development, design patterns and advanced IDE usage.","campus":"UTSC"},{"courseID":"UTSC-CSCB07H","code":"CSCB07H","name":"Software Design","description":"An introduction to software design and development concepts, methods, and tools, using a statically-typed object-oriented language such as Java. Topics from: version control, build management, unit testing, refactoring, object oriented design and development, design patterns and advanced IDE usage.","campus":"UTSC"},{"courseID":"UTSC-CSCB07H","code":"CSCB07H","name":"Software Design","description":"An introduction to software design and development concepts, methods, and tools, using a statically-typed object-oriented language such as Java. Topics from: version control, build management, unit testing, refactoring, object oriented design and development, design patterns and advanced IDE usage.","campus":"UTSC"},{"courseID":"UTSC-CSCB09H","code":"CSCB09H","name":"Software Tools and Systems Programming","description":"Software techniques in a Unix-style environment, using scripting languages and a machine-oriented programming language (typically C). What goes on in the system when programs are executed. Core topics: creating and using software tools, pipes and filters, file processing, shell programming, processes, system calls, signals, basic network programming.","campus":"UTSC"},{"courseID":"UTSC-CSCB09H","code":"CSCB09H","name":"Software Tools and Systems Programming","description":"Software techniques in a Unix-style environment, using scripting languages and a machine-oriented programming language (typically C). What goes on in the system when programs are executed. Core topics: creating and using software tools, pipes and filters, file processing, shell programming, processes, system calls, signals, basic network programming.","campus":"UTSC"},{"courseID":"UTSC-CSCB09H","code":"CSCB09H","name":"Software Tools and Systems Programming","description":"Software techniques in a Unix-style environment, using scripting languages and a machine-oriented programming language (typically C). What goes on in the system when programs are executed. Core topics: creating and using software tools, pipes and filters, file processing, shell programming, processes, system calls, signals, basic network programming.","campus":"UTSC"},{"courseID":"UTSC-CSCB09H","code":"CSCB09H","name":"Software Tools and Systems Programming","description":"Software techniques in a Unix-style environment, using scripting languages and a machine-oriented programming language (typically C). What goes on in the system when programs are executed. Core topics: creating and using software tools, pipes and filters, file processing, shell programming, processes, system calls, signals, basic network programming.","campus":"UTSC"},{"courseID":"UTSC-CSCB09H","code":"CSCB09H","name":"Software Tools and Systems Programming","description":"Software techniques in a Unix-style environment, using scripting languages and a machine-oriented programming language (typically C). What goes on in the system when programs are executed. Core topics: creating and using software tools, pipes and filters, file processing, shell programming, processes, system calls, signals, basic network programming.","campus":"UTSC"},{"courseID":"UTSC-CSCB20H","code":"CSCB20H","name":"Introduction to Databases and Web Applications","description":"A practical introduction to databases and Web app development. Databases: terminology and applications; creating, querying and updating databases; the entity-relationship model for database design. Web documents and applications: static and interactive documents; Web servers and dynamic server-generated content; Web application development and interface with databases.","campus":"UTSC"},{"courseID":"UTSC-CSCB20H","code":"CSCB20H","name":"Introduction to Databases and Web Applications","description":"A practical introduction to databases and Web app development. Databases: terminology and applications; creating, querying and updating databases; the entity-relationship model for database design. Web documents and applications: static and interactive documents; Web servers and dynamic server-generated content; Web application development and interface with databases.","campus":"UTSC"},{"courseID":"UTSC-CSCB20H","code":"CSCB20H","name":"Introduction to Databases and Web Applications","description":"A practical introduction to databases and Web app development. Databases: terminology and applications; creating, querying and updating databases; the entity-relationship model for database design. Web documents and applications: static and interactive documents; Web servers and dynamic server-generated content; Web application development and interface with databases.","campus":"UTSC"},{"courseID":"UTSC-CSCB36H","code":"CSCB36H","name":"Introduction to the Theory of Computation","description":"Mathematical induction with emphasis on applications relevant to computer science. Aspects of mathematical logic, correctness proofs for iterative and recursive algorithms, solutions of linear and divide-and-conquer recurrences, introduction to automata and formal languages.","campus":"UTSC"},{"courseID":"UTSC-CSCB36H","code":"CSCB36H","name":"Introduction to the Theory of Computation","description":"Mathematical induction with emphasis on applications relevant to computer science. Aspects of mathematical logic, correctness proofs for iterative and recursive algorithms, solutions of linear and divide-and-conquer recurrences, introduction to automata and formal languages.","campus":"UTSC"},{"courseID":"UTSC-CSCB36H","code":"CSCB36H","name":"Introduction to the Theory of Computation","description":"Mathematical induction with emphasis on applications relevant to computer science. Aspects of mathematical logic, correctness proofs for iterative and recursive algorithms, solutions of linear and divide-and-conquer recurrences, introduction to automata and formal languages.","campus":"UTSC"},{"courseID":"UTSC-CSCB36H","code":"CSCB36H","name":"Introduction to the Theory of Computation","description":"Mathematical induction with emphasis on applications relevant to computer science. Aspects of mathematical logic, correctness proofs for iterative and recursive algorithms, solutions of linear and divide-and-conquer recurrences, introduction to automata and formal languages.","campus":"UTSC"},{"courseID":"UTSC-CSCB58H","code":"CSCB58H","name":"Computer Organization","description":"Principles of the design and operation of digital computers. Binary data representation and manipulation, Boolean logic, components of computer systems, memory technology, peripherals, structure of a CPU, assembly languages, instruction execution, and addressing techniques. There are a number of laboratory periods in which students conduct experiments with digital logic circuits.","campus":"UTSC"},{"courseID":"UTSC-CSCB58H","code":"CSCB58H","name":"Computer Organization","description":"Principles of the design and operation of digital computers. Binary data representation and manipulation, Boolean logic, components of computer systems, memory technology, peripherals, structure of a CPU, assembly languages, instruction execution, and addressing techniques. There are a number of laboratory periods in which students conduct experiments with digital logic circuits.","campus":"UTSC"},{"courseID":"UTSC-CSCB58H","code":"CSCB58H","name":"Computer Organization","description":"Principles of the design and operation of digital computers. Binary data representation and manipulation, Boolean logic, components of computer systems, memory technology, peripherals, structure of a CPU, assembly languages, instruction execution, and addressing techniques. There are a number of laboratory periods in which students conduct experiments with digital logic circuits.","campus":"UTSC"},{"courseID":"UTSC-CSCB58H","code":"CSCB58H","name":"Computer Organization","description":"Principles of the design and operation of digital computers. Binary data representation and manipulation, Boolean logic, components of computer systems, memory technology, peripherals, structure of a CPU, assembly languages, instruction execution, and addressing techniques. There are a number of laboratory periods in which students conduct experiments with digital logic circuits.","campus":"UTSC"},{"courseID":"UTSC-CSCB58H","code":"CSCB58H","name":"Computer Organization","description":"Principles of the design and operation of digital computers. Binary data representation and manipulation, Boolean logic, components of computer systems, memory technology, peripherals, structure of a CPU, assembly languages, instruction execution, and addressing techniques. There are a number of laboratory periods in which students conduct experiments with digital logic circuits.","campus":"UTSC"},{"courseID":"UTSC-CSCB63H","code":"CSCB63H","name":"Design and Analysis of Data Structures","description":"Design, analysis, implementation and comparison of efficient data structures for common abstract data types. Priority queues: heaps and mergeable heaps. Dictionaries: balanced binary search trees, B-trees, hashing. Amortization: data structures for managing dynamic tables and disjoint sets. Data structures for representing graphs. Graph searches.","campus":"UTSC"},{"courseID":"UTSC-CSCB63H","code":"CSCB63H","name":"Design and Analysis of Data Structures","description":"Design, analysis, implementation and comparison of efficient data structures for common abstract data types. Priority queues: heaps and mergeable heaps. Dictionaries: balanced binary search trees, B-trees, hashing. Amortization: data structures for managing dynamic tables and disjoint sets. Data structures for representing graphs. Graph searches.","campus":"UTSC"},{"courseID":"UTSC-CSCB63H","code":"CSCB63H","name":"Design and Analysis of Data Structures","description":"Design, analysis, implementation and comparison of efficient data structures for common abstract data types. Priority queues: heaps and mergeable heaps. Dictionaries: balanced binary search trees, B-trees, hashing. Amortization: data structures for managing dynamic tables and disjoint sets. Data structures for representing graphs. Graph searches.","campus":"UTSC"},{"courseID":"UTSC-CSCB63H","code":"CSCB63H","name":"Design and Analysis of Data Structures","description":"Design, analysis, implementation and comparison of efficient data structures for common abstract data types. Priority queues: heaps and mergeable heaps. Dictionaries: balanced binary search trees, B-trees, hashing. Amortization: data structures for managing dynamic tables and disjoint sets. Data structures for representing graphs. Graph searches.","campus":"UTSC"},{"courseID":"UTSC-CSCB63H","code":"CSCB63H","name":"Design and Analysis of Data Structures","description":"Design, analysis, implementation and comparison of efficient data structures for common abstract data types. Priority queues: heaps and mergeable heaps. Dictionaries: balanced binary search trees, B-trees, hashing. Amortization: data structures for managing dynamic tables and disjoint sets. Data structures for representing graphs. Graph searches.","campus":"UTSC"},{"courseID":"UTSC-CSCC01H","code":"CSCC01H","name":"Introduction to Software Engineering","description":"Introduction to software development methodologies with an emphasis on agile development methods appropriate for rapidly-moving projects. Basic software development infrastructure; requirements elicitation and tracking; prototyping; basic project management; basic UML; introduction to software architecture; design patterns; testing.","campus":"UTSC"},{"courseID":"UTSC-CSCC01H","code":"CSCC01H","name":"Introduction to Software Engineering","description":"Introduction to software development methodologies with an emphasis on agile development methods appropriate for rapidly-moving projects. Basic software development infrastructure; requirements elicitation and tracking; prototyping; basic project management; basic UML; introduction to software architecture; design patterns; testing.","campus":"UTSC"},{"courseID":"UTSC-CSCC01H","code":"CSCC01H","name":"Introduction to Software Engineering","description":"Introduction to software development methodologies with an emphasis on agile development methods appropriate for rapidly-moving projects. Basic software development infrastructure; requirements elicitation and tracking; prototyping; basic project management; basic UML; introduction to software architecture; design patterns; testing.","campus":"UTSC"},{"courseID":"UTSC-CSCC01H","code":"CSCC01H","name":"Introduction to Software Engineering","description":"Introduction to software development methodologies with an emphasis on agile development methods appropriate for rapidly-moving projects. Basic software development infrastructure; requirements elicitation and tracking; prototyping; basic project management; basic UML; introduction to software architecture; design patterns; testing.","campus":"UTSC"},{"courseID":"UTSC-CSCC09H","code":"CSCC09H","name":"Programming on the Web","description":"An introduction to software development on the web. Concepts underlying the development of programs that operate on the web. Operational concepts of the internet and the web, static and dynamic client content, dynamically served content, n-tiered architectures, web development processes and security on the web.","campus":"UTSC"},{"courseID":"UTSC-CSCC09H","code":"CSCC09H","name":"Programming on the Web","description":"An introduction to software development on the web. Concepts underlying the development of programs that operate on the web. Operational concepts of the internet and the web, static and dynamic client content, dynamically served content, n-tiered architectures, web development processes and security on the web.","campus":"UTSC"},{"courseID":"UTSC-CSCC09H","code":"CSCC09H","name":"Programming on the Web","description":"An introduction to software development on the web. Concepts underlying the development of programs that operate on the web. Operational concepts of the internet and the web, static and dynamic client content, dynamically served content, n-tiered architectures, web development processes and security on the web.","campus":"UTSC"},{"courseID":"UTSC-CSCC10H","code":"CSCC10H","name":"Human-Computer Interaction","description":"The course will provide an introduction to the field of Human-Computer Interaction (HCI) with emphasis on guidelines, principles, methodologies, and tools and techniques for analyzing, designing and evaluating user interfaces. Subsequent topics include usability assessment of interactive systems, prototyping tools, information search and visualization, mobile devices, social media and social networking, and accessibility factors.","campus":"UTSC"},{"courseID":"UTSC-CSCC10H","code":"CSCC10H","name":"Human-Computer Interaction","description":"The course will provide an introduction to the field of Human-Computer Interaction (HCI) with emphasis on guidelines, principles, methodologies, and tools and techniques for analyzing, designing and evaluating user interfaces. Subsequent topics include usability assessment of interactive systems, prototyping tools, information search and visualization, mobile devices, social media and social networking, and accessibility factors.","campus":"UTSC"},{"courseID":"UTSC-CSCC10H","code":"CSCC10H","name":"Human-Computer Interaction","description":"The course will provide an introduction to the field of Human-Computer Interaction (HCI) with emphasis on guidelines, principles, methodologies, and tools and techniques for analyzing, designing and evaluating user interfaces. Subsequent topics include usability assessment of interactive systems, prototyping tools, information search and visualization, mobile devices, social media and social networking, and accessibility factors.","campus":"UTSC"},{"courseID":"UTSC-CSCC11H","code":"CSCC11H","name":"Introduction to Machine Learning and Data Mining","description":"An introduction to methods for automated learning of relationships on the basis of empirical data. Classification and regression using nearest neighbour methods, decision trees, linear and non-linear models, class-conditional models, neural networks, and Bayesian methods. Clustering algorithms and dimensionality reduction. Model selection. Problems of over-fitting and assessing accuracy. Problems with handling large databases.","campus":"UTSC"},{"courseID":"UTSC-CSCC11H","code":"CSCC11H","name":"Introduction to Machine Learning and Data Mining","description":"An introduction to methods for automated learning of relationships on the basis of empirical data. Classification and regression using nearest neighbour methods, decision trees, linear and non-linear models, class-conditional models, neural networks, and Bayesian methods. Clustering algorithms and dimensionality reduction. Model selection. Problems of over-fitting and assessing accuracy. Problems with handling large databases.","campus":"UTSC"},{"courseID":"UTSC-CSCC24H","code":"CSCC24H","name":"Principles of Programming Languages","description":"Major topics in the design, definition, analysis, and implementation of modern programming languages. Study of programming paradigms: procedural (e.g., C, Java, Python), functional (e.g., Scheme, ML, Haskell) and logic programming (e.g., Prolog, Mercury).","campus":"UTSC"},{"courseID":"UTSC-CSCC24H","code":"CSCC24H","name":"Principles of Programming Languages","description":"Major topics in the design, definition, analysis, and implementation of modern programming languages. Study of programming paradigms: procedural (e.g., C, Java, Python), functional (e.g., Scheme, ML, Haskell) and logic programming (e.g., Prolog, Mercury).","campus":"UTSC"},{"courseID":"UTSC-CSCC24H","code":"CSCC24H","name":"Principles of Programming Languages","description":"Major topics in the design, definition, analysis, and implementation of modern programming languages. Study of programming paradigms: procedural (e.g., C, Java, Python), functional (e.g., Scheme, ML, Haskell) and logic programming (e.g., Prolog, Mercury).","campus":"UTSC"},{"courseID":"UTSC-CSCC24H","code":"CSCC24H","name":"Principles of Programming Languages","description":"Major topics in the design, definition, analysis, and implementation of modern programming languages. Study of programming paradigms: procedural (e.g., C, Java, Python), functional (e.g., Scheme, ML, Haskell) and logic programming (e.g., Prolog, Mercury).","campus":"UTSC"},{"courseID":"UTSC-CSCC37H","code":"CSCC37H","name":"Introduction to Numerical Algorithms for Computational Mathematics","description":"An introduction to computational methods for solving problems in linear algebra, non-linear equations, approximation and integration. Floating-point arithmetic; numerical algorithms; application of numerical software packages.","campus":"UTSC"},{"courseID":"UTSC-CSCC37H","code":"CSCC37H","name":"Introduction to Numerical Algorithms for Computational Mathematics","description":"An introduction to computational methods for solving problems in linear algebra, non-linear equations, approximation and integration. Floating-point arithmetic; numerical algorithms; application of numerical software packages.","campus":"UTSC"},{"courseID":"UTSC-CSCC43H","code":"CSCC43H","name":"Introduction to Databases","description":"Introduction to database management systems. The relational data model. Relational algebra. Querying and updating databases: the SQL query language. Application programming with SQL. Integrity constraints, normal forms, and database design. Elements of database system technology: query processing, transaction management.","campus":"UTSC"},{"courseID":"UTSC-CSCC43H","code":"CSCC43H","name":"Introduction to Databases","description":"Introduction to database management systems. The relational data model. Relational algebra. Querying and updating databases: the SQL query language. Application programming with SQL. Integrity constraints, normal forms, and database design. Elements of database system technology: query processing, transaction management.","campus":"UTSC"},{"courseID":"UTSC-CSCC43H","code":"CSCC43H","name":"Introduction to Databases","description":"Introduction to database management systems. The relational data model. Relational algebra. Querying and updating databases: the SQL query language. Application programming with SQL. Integrity constraints, normal forms, and database design. Elements of database system technology: query processing, transaction management.","campus":"UTSC"},{"courseID":"UTSC-CSCC43H","code":"CSCC43H","name":"Introduction to Databases","description":"Introduction to database management systems. The relational data model. Relational algebra. Querying and updating databases: the SQL query language. Application programming with SQL. Integrity constraints, normal forms, and database design. Elements of database system technology: query processing, transaction management.","campus":"UTSC"},{"courseID":"UTSC-CSCC46H","code":"CSCC46H","name":"Social and Information Networks","description":"How networks underlie the social, technological, and natural worlds, with an emphasis on developing intuitions for broadly applicable concepts in network analysis. Topics include: introductions to graph theory, network concepts, and game theory; social networks; information networks; the aggregate behaviour of markets and crowds; network dynamics; information diffusion; popular concepts such as \"six degrees of separation\", the \"friendship paradox\", and the \"wisdom of crowds\".","campus":"UTSC"},{"courseID":"UTSC-CSCC46H","code":"CSCC46H","name":"Social and Information Networks","description":"How networks underlie the social, technological, and natural worlds, with an emphasis on developing intuitions for broadly applicable concepts in network analysis. Topics include: introductions to graph theory, network concepts, and game theory; social networks; information networks; the aggregate behaviour of markets and crowds; network dynamics; information diffusion; popular concepts such as \"six degrees of separation\", the \"friendship paradox\", and the \"wisdom of crowds\".","campus":"UTSC"},{"courseID":"UTSC-CSCC63H","code":"CSCC63H","name":"Computability and Computational Complexity","description":"Introduction to the theory of computability: Turing machines, Church's thesis, computable and non-computable functions, recursive and recursively enumerable sets, reducibility. Introduction to complexity theory: models of computation, P, NP, polynomial time reducibility, NP-completeness, further topics in complexity theory. Note: Although the courses CSCC63H3 & CSCC73H3 may be taken in any order, it is recommended that CSCC73H3 be taken first.","campus":"UTSC"},{"courseID":"UTSC-CSCC63H","code":"CSCC63H","name":"Computability and Computational Complexity","description":"Introduction to the theory of computability: Turing machines, Church's thesis, computable and non-computable functions, recursive and recursively enumerable sets, reducibility. Introduction to complexity theory: models of computation, P, NP, polynomial time reducibility, NP-completeness, further topics in complexity theory. Note: Although the courses CSCC63H3 and CSCC73H3 may be taken in any order, it is recommended that CSCC73H3 be taken first.","campus":"UTSC"},{"courseID":"UTSC-CSCC63H","code":"CSCC63H","name":"Computability and Computational Complexity","description":"Introduction to the theory of computability: Turing machines, Church's thesis, computable and non-computable functions, recursive and recursively enumerable sets, reducibility. Introduction to complexity theory: models of computation, P, NP, polynomial time reducibility, NP-completeness, further topics in complexity theory. Note: Although the courses CSCC63H3 and CSCC73H3 may be taken in any order, it is recommended that CSCC73H3 be taken first.","campus":"UTSC"},{"courseID":"UTSC-CSCC63H","code":"CSCC63H","name":"Computability and Computational Complexity","description":"Introduction to the theory of computability: Turing machines, Church's thesis, computable and non-computable functions, recursive and recursively enumerable sets, reducibility. Introduction to complexity theory: models of computation, P, NP, polynomial time reducibility, NP-completeness, further topics in complexity theory. Note: Although the courses CSCC63H3 and CSCC73H3 may be taken in any order, it is recommended that CSCC73H3 be taken first.","campus":"UTSC"},{"courseID":"UTSC-CSCC63H","code":"CSCC63H","name":"Computability and Computational Complexity","description":"Introduction to the theory of computability: Turing machines, Church's thesis, computable and non-computable functions, recursive and recursively enumerable sets, reducibility. Introduction to complexity theory: models of computation, P, NP, polynomial time reducibility, NP-completeness, further topics in complexity theory. Note: Although the courses CSCC63H3 and CSCC73H3 may be taken in any order, it is recommended that CSCC73H3 be taken first.","campus":"UTSC"},{"courseID":"UTSC-CSCC69H","code":"CSCC69H","name":"Operating Systems","description":"Principles of operating systems. The operating system as a control program and as a resource allocator. The concept of a process and concurrency problem: synchronization, mutual exclusion, deadlock. Additional topics include memory management, file systems, process scheduling, threads, and protection.","campus":"UTSC"},{"courseID":"UTSC-CSCC69H","code":"CSCC69H","name":"Operating Systems","description":"Principles of operating systems. The operating system as a control program and as a resource allocator. The concept of a process and concurrency problem: synchronization, mutual exclusion, deadlock. Additional topics include memory management, file systems, process scheduling, threads, and protection.","campus":"UTSC"},{"courseID":"UTSC-CSCC69H","code":"CSCC69H","name":"Operating Systems","description":"Principles of operating systems. The operating system as a control program and as a resource allocator. The concept of a process and concurrency problem: synchronization, mutual exclusion, deadlock. Additional topics include memory management, file systems, process scheduling, threads, and protection.","campus":"UTSC"},{"courseID":"UTSC-CSCC69H","code":"CSCC69H","name":"Operating Systems","description":"Principles of operating systems. The operating system as a control program and as a resource allocator. The concept of a process and concurrency problem: synchronization, mutual exclusion, deadlock. Additional topics include memory management, file systems, process scheduling, threads, and protection.","campus":"UTSC"},{"courseID":"UTSC-CSCC69H","code":"CSCC69H","name":"Operating Systems","description":"Principles of operating systems. The operating system as a control program and as a resource allocator. The concept of a process and concurrency problem: synchronization, mutual exclusion, deadlock. Additional topics include memory management, file systems, process scheduling, threads, and protection.","campus":"UTSC"},{"courseID":"UTSC-CSCC73H","code":"CSCC73H","name":"Algorithm Design and Analysis","description":"Standard algorithm design techniques: divide-and-conquer, greedy strategies, dynamic programming, linear programming, randomization, and possibly others.","campus":"UTSC"},{"courseID":"UTSC-CSCC73H","code":"CSCC73H","name":"Algorithm Design and Analysis","description":"Standard algorithm design techniques: divide-and-conquer, greedy strategies, dynamic programming, linear programming, randomization, and possibly others.","campus":"UTSC"},{"courseID":"UTSC-CSCC85H","code":"CSCC85H","name":"Introduction to Embedded Systems","description":"The course covers the components and fundamental principles of operation of systems built around micro-processing elements: the architecture, operation, and types of micro-processing components; sensors, actuators, signal acquisition and processing, and basic principles of control theory. Laboratory sessions involving the use of a mobile robotic platform provide hands-on experience.","campus":"UTSC"},{"courseID":"UTSC-CSCC85H","code":"CSCC85H","name":"Introduction to Embedded Systems","description":"The course covers the components and fundamental principles of operation of systems built around micro-processing elements: the architecture, operation, and types of micro-processing components; sensors, actuators, signal acquisition and processing, and basic principles of control theory. Laboratory sessions involving the use of a mobile robotic platform provide hands-on experience.","campus":"UTSC"},{"courseID":"UTSC-CSCD01H","code":"CSCD01H","name":"Engineering Large Software Systems","description":"An introduction to the theory and practice of large-scale software system design, development, and deployment. Project management; advanced UML; requirements engineering; verification and validation; software architecture; performance modeling and analysis; formal methods in software engineering.","campus":"UTSC"},{"courseID":"UTSC-CSCD01H","code":"CSCD01H","name":"Engineering Large Software Systems","description":"An introduction to the theory and practice of large-scale software system design, development, and deployment. Project management; advanced UML; requirements engineering; verification and validation; software architecture; performance modeling and analysis; formal methods in software engineering.","campus":"UTSC"},{"courseID":"UTSC-CSCD01H","code":"CSCD01H","name":"Engineering Large Software Systems","description":"An introduction to the theory and practice of large-scale software system design, development, and deployment. Project management; advanced UML; requirements engineering; verification and validation; software architecture; performance modeling and analysis; formal methods in software engineering.","campus":"UTSC"},{"courseID":"UTSC-CSCD03H","code":"CSCD03H","name":"Social Impact of Information Technology","description":"The trade-offs between benefits and risks to society of information systems, and related issues in ethics and public policy. Topics will include safety-critical software; invasion of privacy; computer-based crime; the social effects of an always-online life; and professional ethics in the software industry. There will be an emphasis on current events relating to these topics.","campus":"UTSC"},{"courseID":"UTSC-CSCD03H","code":"CSCD03H","name":"Social Impact of Information Technology","description":"The trade-offs between benefits and risks to society of information systems, and related issues in ethics and public policy. Topics will include safety-critical software; invasion of privacy; computer-based crime; the social effects of an always-online life; and professional ethics in the software industry. There will be an emphasis on current events relating to these topics.","campus":"UTSC"},{"courseID":"UTSC-CSCD03H","code":"CSCD03H","name":"Social Impact of Information Technology","description":"The trade-offs between benefits and risks to society of information systems, and related issues in ethics and public policy. Topics will include safety-critical software; invasion of privacy; computer-based crime; the social effects of an always-online life; and professional ethics in the software industry. There will be an emphasis on current events relating to these topics.","campus":"UTSC"},{"courseID":"UTSC-CSCD03H","code":"CSCD03H","name":"Social Impact of Information Technology","description":"The trade-offs between benefits and risks to society of information systems, and related issues in ethics and public policy. Topics will include safety-critical software; invasion of privacy; computer-based crime; the social effects of an always-online life; and professional ethics in the software industry. There will be an emphasis on current events relating to these topics.","campus":"UTSC"},{"courseID":"UTSC-CSCD03H","code":"CSCD03H","name":"Social Impact of Information Technology","description":"The trade-offs between benefits and risks to society of information systems, and related issues in ethics and public policy. Topics will include safety-critical software; invasion of privacy; computer-based crime; the social effects of an always-online life; and professional ethics in the software industry. There will be an emphasis on current events relating to these topics.","campus":"UTSC"},{"courseID":"UTSC-CSCD18H","code":"CSCD18H","name":"Computer Graphics","description":"The course will cover in detail the principles and algorithms used to generate high-quality, computer generated images for fields as diverse as scientific data visualization, modeling, computer aided design, human computer interaction, special effects, and video games. Topics covered include image formation, cameras and lenses, object models, object manipulation, transformations, illumination, appearance modeling, and advanced rendering via ray-tracing and path-tracing. Throughout the course, students will implement a working rendering engine in a suitable programming language.","campus":"UTSC"},{"courseID":"UTSC-CSCD18H","code":"CSCD18H","name":"Computer Graphics","description":"The course will cover in detail the principles and algorithms used to generate high-quality, computer generated images for fields as diverse as scientific data visualization, modeling, computer aided design, human computer interaction, special effects, and video games. Topics covered include image formation, cameras and lenses, object models, object manipulation, transformations, illumination, appearance modeling, and advanced rendering via ray-tracing and path-tracing. Throughout the course, students will implement a working rendering engine in a suitable programming language.","campus":"UTSC"},{"courseID":"UTSC-CSCD27H","code":"CSCD27H","name":"Computer and Network Security","description":"Public and symmetric key algorithms and their application; key management and certification; authentication protocols; digital signatures and data integrity; secure network and application protocols; application, system and network attacks and defences; intrusion detection and prevention; social engineering attacks; risk assessment and management.","campus":"UTSC"},{"courseID":"UTSC-CSCD27H","code":"CSCD27H","name":"Computer and Network Security","description":"Public and symmetric key algorithms and their application; key management and certification; authentication protocols; digital signatures and data integrity; secure network and application protocols; application, system and network attacks and defences; intrusion detection and prevention; social engineering attacks; risk assessment and management.","campus":"UTSC"},{"courseID":"UTSC-CSCD37H","code":"CSCD37H","name":"Analysis of Numerical Algorithms for Computational Mathematics","description":"Most mathematical models of real systems cannot be solved analytically and the solution of these models must be approximated by numerical algorithms. The efficiency, accuracy and reliability of numerical algorithms for several classes of models will be considered. In particular, models involving least squares, non-linear equations, optimization, quadrature, and systems of ordinary differential equations will be studied.","campus":"UTSC"},{"courseID":"UTSC-CSCD37H","code":"CSCD37H","name":"Analysis of Numerical Algorithms for Computational Mathematics","description":"Most mathematical models of real systems cannot be solved analytically and the solution of these models must be approximated by numerical algorithms. The efficiency, accuracy and reliability of numerical algorithms for several classes of models will be considered. In particular, models involving least squares, non-linear equations, optimization, quadrature, and systems of ordinary differential equations will be studied.","campus":"UTSC"},{"courseID":"UTSC-CSCD37H","code":"CSCD37H","name":"Analysis of Numerical Algorithms for Computational Mathematics","description":"Most mathematical models of real systems cannot be solved analytically and the solution of these models must be approximated by numerical algorithms. The efficiency, accuracy and reliability of numerical algorithms for several classes of models will be considered. In particular, models involving least squares, non-linear equations, optimization, quadrature, and systems of ordinary differential equations will be studied.","campus":"UTSC"},{"courseID":"UTSC-CSCD43H","code":"CSCD43H","name":"Database System Technology","description":"Implementation of database management systems. Storage management, indexing, query processing, concurrency control, transaction management. Database systems on parallel and distributed architectures. Modern database applications: data mining, data warehousing, OLAP, data on the web. Object-oriented and object-relational databases.","campus":"UTSC"},{"courseID":"UTSC-CSCD43H","code":"CSCD43H","name":"Database System Technology","description":"Implementation of database management systems. Storage management, indexing, query processing, concurrency control, transaction management. Database systems on parallel and distributed architectures. Modern database applications: data mining, data warehousing, OLAP, data on the web. Object-oriented and object-relational databases.","campus":"UTSC"},{"courseID":"UTSC-CSCD43H","code":"CSCD43H","name":"Database System Technology","description":"Implementation of database management systems. Storage management, indexing, query processing, concurrency control, transaction management. Database systems on parallel and distributed architectures. Modern database applications: data mining, data warehousing, OLAP, data on the web. Object-oriented and object-relational databases.","campus":"UTSC"},{"courseID":"UTSC-CSCD54H","code":"CSCD54H","name":"Technology Innovation and Entrepreneurship","description":"This course examines high-Tech innovation and entrepreneurship, principles of operation of successful high-tech enterprises, customer identification and validation, product development, business models, lean startup techniques, and financing of high-technology ventures. Students will work in teams to develop their own innovative product idea, and will produce a sound business plan to support their product.","campus":"UTSC"},{"courseID":"UTSC-CSCD54H","code":"CSCD54H","name":"Technology Innovation and Entrepreneurship","description":"This course examines high-Tech innovation and entrepreneurship, principles of operation of successful high-tech enterprises, customer identification and validation, product development, business models, lean startup techniques, and financing of high-technology ventures. Students will work in teams to develop their own innovative product idea, and will produce a sound business plan to support their product.","campus":"UTSC"},{"courseID":"UTSC-CSCD54H","code":"CSCD54H","name":"Technology Innovation and Entrepreneurship","description":"This course examines high-Tech innovation and entrepreneurship, principles of operation of successful high-tech enterprises, customer identification and validation, product development, business models, lean startup techniques, and financing of high-technology ventures. Students will work in teams to develop their own innovative product idea, and will produce a sound business plan to support their product.","campus":"UTSC"},{"courseID":"UTSC-CSCD58H","code":"CSCD58H","name":"Computer Networks","description":"Computer communication network principles and practice. The OSI protocol-layer model; Internet application layer and naming; transport layer and congestion avoidance; network layer and routing; link layer with local area networks, connection-oriented protocols and error detection and recovery; multimedia networking with quality of service and multicasting. Principles in the context of the working-code model implemented in the Internet.","campus":"UTSC"},{"courseID":"UTSC-CSCD58H","code":"CSCD58H","name":"Computer Networks","description":"Computer communication network principles and practice. The OSI protocol-layer model; Internet application layer and naming; transport layer and congestion avoidance; network layer and routing; link layer with local area networks, connection-oriented protocols and error detection and recovery; multimedia networking with quality of service and multicasting. Principles in the context of the working-code model implemented in the Internet.","campus":"UTSC"},{"courseID":"UTSC-CSCD58H","code":"CSCD58H","name":"Computer Networks","description":"Computer communication network principles and practice. The OSI protocol-layer model; Internet application layer and naming; transport layer and congestion avoidance; network layer and routing; link layer with local area networks, connection-oriented protocols and error detection and recovery; multimedia networking with quality of service and multicasting. Principles in the context of the working-code model implemented in the Internet.","campus":"UTSC"},{"courseID":"UTSC-CSCD58H","code":"CSCD58H","name":"Computer Networks","description":"Computer communication network principles and practice. The OSI protocol-layer model; Internet application layer and naming; transport layer and congestion avoidance; network layer and routing; link layer with local area networks, connection-oriented protocols and error detection and recovery; multimedia networking with quality of service and multicasting. Principles in the context of the working-code model implemented in the Internet.","campus":"UTSC"},{"courseID":"UTSC-CSCD70H","code":"CSCD70H","name":"Compiler Optimization ","description":"","campus":"UTSC"},{"courseID":"UTSC-CSCD70H","code":"CSCD70H","name":"Compiler Optimization","description":"The goal of this course is to examine the design and implementation of a compiler optimized for modern parallel architectures. Students will learn about common optimizations, intermediate representations (IRs), control-flow and dataflow analysis, dependence graphs, instruction scheduling, and register allocation. Advanced topics include static single assignment, memory hierarchy optimizations and parallelization, compiling for multicore machines, memory dependence analysis, automatic vectorization/thread extraction, and predicated/speculative execution.","campus":"UTSC"},{"courseID":"UTSC-CSCD84H","code":"CSCD84H","name":"Artificial Intelligence","description":"A study of the theories and algorithms of Artificial Intelligence. Topics include a subset of: search, game playing, logical representations and reasoning, planning, natural language processing, reasoning and decision making with uncertainty, computational perception, robotics, and applications of Artificial Intelligence. Assignments provide practical experience of the core topics.","campus":"UTSC"},{"courseID":"UTSC-CSCD84H","code":"CSCD84H","name":"Artificial Intelligence","description":"A study of the theories and algorithms of Artificial Intelligence. Topics include a subset of: search, game playing, logical representations and reasoning, planning, natural language processing, reasoning and decision making with uncertainty, computational perception, robotics, and applications of Artificial Intelligence. Assignments provide practical experience of the core topics.","campus":"UTSC"},{"courseID":"UTSC-CSCD90H","code":"CSCD90H","name":"The Startup Sandbox","description":"In this capstone course, students will work in teams to develop a viable product prototype following the methodologies and techniques covered in CSCD54H3. Students will produce written reports, short videos pitching their idea, and a final presentation showcasing their proposed innovation, as it would be pitched to potential investors. The course instructor and TAs will provide close supervision and mentorship throughout the project.","campus":"UTSC"},{"courseID":"UTSC-CSCD90H","code":"CSCD90H","name":"The Startup Sandbox","description":"In this capstone course, students will work in teams to develop a viable product prototype following the methodologies and techniques covered in CSCD54H3. Students will produce written reports, short videos pitching their idea, and a final presentation showcasing their proposed innovation, as it would be pitched to potential investors. The course instructor and TAs will provide close supervision and mentorship throughout the project.","campus":"UTSC"},{"courseID":"UTSC-CSCD90H","code":"CSCD90H","name":"The Startup Sandbox","description":"In this capstone course, students will work in teams to develop a viable product prototype following the methodologies and techniques covered in CSCD54H3. Students will produce written reports, short videos pitching their idea, and a final presentation showcasing their proposed innovation, as it would be pitched to potential investors. The course instructor and TAs will provide close supervision and mentorship throughout the project.","campus":"UTSC"},{"courseID":"UTSC-CSCD92H","code":"CSCD92H","name":"Readings in Computer Science","description":"Students will examine an area of interest through reading papers and texts. This course is offered by arrangement with a computer science faculty member. It may be taken in any session, and must be completed by the last day of classes in the session in which it is taken.","campus":"UTSC"},{"courseID":"UTSC-CSCD92H","code":"CSCD92H","name":"Readings in Computer Science","description":"Students will examine an area of interest through reading papers and texts. This course is offered by arrangement with a computer science faculty member. It may be taken in any session, and must be completed by the last day of classes in the session in which it is taken.","campus":"UTSC"},{"courseID":"UTSC-CSCD92H","code":"CSCD92H","name":"Readings in Computer Science","description":"Students will examine an area of interest through reading papers and texts. This course is offered by arrangement with a computer science faculty member. It may be taken in any session, and must be completed by the last day of classes in the session in which it is taken.","campus":"UTSC"},{"courseID":"UTSC-CSCD92H","code":"CSCD92H","name":"Readings in Computer Science","description":"Students will examine an area of interest through reading papers and texts. This course is offered by arrangement with a computer science faculty member. It may be taken in any session, and must be completed by the last day of classes in the session in which it is taken.","campus":"UTSC"},{"courseID":"UTSC-CSCD92H","code":"CSCD92H","name":"Readings in Computer Science","description":"Students will examine an area of interest through reading papers and texts. This course is offered by arrangement with a computer science faculty member. It may be taken in any session, and must be completed by the last day of classes in the session in which it is taken.","campus":"UTSC"},{"courseID":"UTSC-CSCD92H","code":"CSCD92H","name":"Readings in Computer Science","description":"Students will examine an area of interest through reading papers and texts. This course is offered by arrangement with a computer science faculty member. It may be taken in any session, and must be completed by the last day of classes in the session in which it is taken.","campus":"UTSC"},{"courseID":"UTSC-CSCD92H","code":"CSCD92H","name":"Readings in Computer Science","description":"Students will examine an area of interest through reading papers and texts. This course is offered by arrangement with a computer science faculty member. It may be taken in any session, and must be completed by the last day of classes in the session in which it is taken.","campus":"UTSC"},{"courseID":"UTSC-CSCD94H","code":"CSCD94H","name":"Computer Science Project","description":"A significant project in any area of computer science. The project may be undertaken individually or in small groups. This course is offered by arrangement with a computer science faculty member, at U of T Scarborough or the St. George campus. This course may be taken in any session and the project must be completed by the last day of classes in the session in which it is taken. Students must obtain consent from the Supervisor of Studies before registering for this course.","campus":"UTSC"},{"courseID":"UTSC-CSCD94H","code":"CSCD94H","name":"Computer Science Project","description":"A significant project in any area of computer science. The project may be undertaken individually or in small groups. This course is offered by arrangement with a computer science faculty member, at U of T Scarborough or the St. George campus. This course may be taken in any session and the project must be completed by the last day of classes in the session in which it is taken. Students must obtain consent from the Supervisor of Studies before registering for this course.","campus":"UTSC"},{"courseID":"UTSC-CSCD94H","code":"CSCD94H","name":"Computer Science Project","description":"A significant project in any area of computer science. The project may be undertaken individually or in small groups. This course is offered by arrangement with a computer science faculty member, at U of T Scarborough or the St. George campus. This course may be taken in any session and the project must be completed by the last day of classes in the session in which it is taken. Students must obtain consent from the Supervisor of Studies before registering for this course.","campus":"UTSC"},{"courseID":"UTSC-CSCD94H","code":"CSCD94H","name":"Computer Science Project","description":"A significant project in any area of computer science. The project may be undertaken individually or in small groups. This course is offered by arrangement with a computer science faculty member, at U of T Scarborough or the St. George campus. This course may be taken in any session and the project must be completed by the last day of classes in the session in which it is taken. Students must obtain consent from the Supervisor of Studies before registering for this course.","campus":"UTSC"},{"courseID":"UTSC-CSCD94H","code":"CSCD94H","name":"Computer Science Project","description":"A significant project in any area of computer science. The project may be undertaken individually or in small groups. This course is offered by arrangement with a computer science faculty member, at U of T Scarborough or the St. George campus. This course may be taken in any session and the project must be completed by the last day of classes in the session in which it is taken. Students must obtain consent from the Supervisor of Studies before registering for this course.","campus":"UTSC"},{"courseID":"UTSC-CSCD94H","code":"CSCD94H","name":"Computer Science Project","description":"A significant project in any area of computer science. The project may be undertaken individually or in small groups. This course is offered by arrangement with a computer science faculty member, at U of T Scarborough or the St. George campus. This course may be taken in any session and the project must be completed by the last day of classes in the session in which it is taken. Students must obtain consent from the Supervisor of Studies before registering for this course.","campus":"UTSC"},{"courseID":"UTSC-CSCD94H","code":"CSCD94H","name":"Computer Science Project","description":"A significant project in any area of computer science. The project may be undertaken individually or in small groups. This course is offered by arrangement with a computer science faculty member, at U of T Scarborough or the St. George campus. This course may be taken in any session and the project must be completed by the last day of classes in the session in which it is taken. Students must obtain consent from the Supervisor of Studies before registering for this course.","campus":"UTSC"},{"courseID":"UTSC-CSCD94H","code":"CSCD94H","name":"Computer Science Project","description":"A significant project in any area of computer science. The project may be undertaken individually or in small groups. This course is offered by arrangement with a computer science faculty member, at U of T Scarborough or the St. George campus. This course may be taken in any session and the project must be completed by the last day of classes in the session in which it is taken. Students must obtain consent from the Supervisor of Studies before registering for this course.","campus":"UTSC"},{"courseID":"UTSC-CSCD94H","code":"CSCD94H","name":"Computer Science Project","description":"A significant project in any area of computer science. The project may be undertaken individually or in small groups. This course is offered by arrangement with a computer science faculty member, at U of T Scarborough or the St. George campus. This course may be taken in any session and the project must be completed by the last day of classes in the session in which it is taken. Students must obtain consent from the Supervisor of Studies before registering for this course.","campus":"UTSC"},{"courseID":"UTSC-CSCD94H","code":"CSCD94H","name":"Computer Science Project","description":"A significant project in any area of computer science. The project may be undertaken individually or in small groups. This course is offered by arrangement with a computer science faculty member, at U of T Scarborough or the St. George campus. This course may be taken in any session and the project must be completed by the last day of classes in the session in which it is taken. Students must obtain consent from the Supervisor of Studies before registering for this course.","campus":"UTSC"},{"courseID":"UTSC-CSCD94H","code":"CSCD94H","name":"Computer Science Project","description":"A significant project in any area of computer science. The project may be undertaken individually or in small groups. This course is offered by arrangement with a computer science faculty member, at U of T Scarborough or the St. George campus. This course may be taken in any session and the project must be completed by the last day of classes in the session in which it is taken. Students must obtain consent from the Supervisor of Studies before registering for this course.","campus":"UTSC"},{"courseID":"UTSC-CSCD95H","code":"CSCD95H","name":"Computer Science Project","description":"Same description as CSCD94H3. Normally a student may not take two project half-courses on closely related topics or with the same supervisor. If an exception is made allowing a second project on a topic closely related to the topic of an earlier project, higher standards will be applied in judging it. We expect that a student with the experience of a first project completed will be able to perform almost at the level of a graduate student.","campus":"UTSC"},{"courseID":"UTSC-CSCD95H","code":"CSCD95H","name":"Computer Science Project","description":"Same description as CSCD94H3. Normally a student may not take two project half-courses on closely related topics or with the same supervisor. If an exception is made allowing a second project on a topic closely related to the topic of an earlier project, higher standards will be applied in judging it. We expect that a student with the experience of a first project completed will be able to perform almost at the level of a graduate student.","campus":"UTSC"},{"courseID":"UTSC-CSCD95H","code":"CSCD95H","name":"Computer Science Project","description":"Same description as CSCD94H3. Normally a student may not take two project half-courses on closely related topics or with the same supervisor. If an exception is made allowing a second project on a topic closely related to the topic of an earlier project, higher standards will be applied in judging it. We expect that a student with the experience of a first project completed will be able to perform almost at the level of a graduate student.","campus":"UTSC"},{"courseID":"UTSC-CSCD95H","code":"CSCD95H","name":"Computer Science Project","description":"Same description as CSCD94H3. Normally a student may not take two project half-courses on closely related topics or with the same supervisor. If an exception is made allowing a second project on a topic closely related to the topic of an earlier project, higher standards will be applied in judging it. We expect that a student with the experience of a first project completed will be able to perform almost at the level of a graduate student.","campus":"UTSC"},{"courseID":"UTSC-CSCD95H","code":"CSCD95H","name":"Computer Science Project","description":"Same description as CSCD94H3. Normally a student may not take two project half-courses on closely related topics or with the same supervisor. If an exception is made allowing a second project on a topic closely related to the topic of an earlier project, higher standards will be applied in judging it. We expect that a student with the experience of a first project completed will be able to perform almost at the level of a graduate student.","campus":"UTSC"},{"courseID":"UTSC-CSCD95H","code":"CSCD95H","name":"Computer Science Project","description":"Same description as CSCD94H3. Normally a student may not take two project half-courses on closely related topics or with the same supervisor. If an exception is made allowing a second project on a topic closely related to the topic of an earlier project, higher standards will be applied in judging it. We expect that a student with the experience of a first project completed will be able to perform almost at the level of a graduate student.","campus":"UTSC"},{"courseID":"UTSC-CSCD95H","code":"CSCD95H","name":"Computer Science Project","description":"Same description as CSCD94H3. Normally a student may not take two project half-courses on closely related topics or with the same supervisor. If an exception is made allowing a second project on a topic closely related to the topic of an earlier project, higher standards will be applied in judging it. We expect that a student with the experience of a first project completed will be able to perform almost at the level of a graduate student.","campus":"UTSC"},{"courseID":"UTSC-CSCD95H","code":"CSCD95H","name":"Computer Science Project","description":"Same description as CSCD94H3. Normally a student may not take two project half-courses on closely related topics or with the same supervisor. If an exception is made allowing a second project on a topic closely related to the topic of an earlier project, higher standards will be applied in judging it. We expect that a student with the experience of a first project completed will be able to perform almost at the level of a graduate student.","campus":"UTSC"},{"courseID":"UTSC-CSCD95H","code":"CSCD95H","name":"Computer Science Project","description":"Same description as CSCD94H3. Normally a student may not take two project half-courses on closely related topics or with the same supervisor. If an exception is made allowing a second project on a topic closely related to the topic of an earlier project, higher standards will be applied in judging it. We expect that a student with the experience of a first project completed will be able to perform almost at the level of a graduate student.","campus":"UTSC"},{"courseID":"UTSC-CSCD95H","code":"CSCD95H","name":"Computer Science Project","description":"Same description as CSCD94H3. Normally a student may not take two project half-courses on closely related topics or with the same supervisor. If an exception is made allowing a second project on a topic closely related to the topic of an earlier project, higher standards will be applied in judging it. We expect that a student with the experience of a first project completed will be able to perform almost at the level of a graduate student.","campus":"UTSC"},{"courseID":"UTSC-CSCD95H","code":"CSCD95H","name":"Computer Science Project","description":"Same description as CSCD94H3. Normally a student may not take two project half-courses on closely related topics or with the same supervisor. If an exception is made allowing a second project on a topic closely related to the topic of an earlier project, higher standards will be applied in judging it. We expect that a student with the experience of a first project completed will be able to perform almost at the level of a graduate student.","campus":"UTSC"}]